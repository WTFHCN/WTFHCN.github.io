<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NaCNer</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-12-14T15:06:51.925Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>HCN</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>About me</title>
    <link href="http://yoursite.com/2022/12/31/%E6%9D%BF%E5%AD%90/"/>
    <id>http://yoursite.com/2022/12/31/%E6%9D%BF%E5%AD%90/</id>
    <published>2022-12-31T02:47:00.000Z</published>
    <updated>2020-12-14T15:06:51.925Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cfrating.ihcr.top/?user=WaluntOvO" alt=""></p><p><img src="https://cfrating.ihcr.top/?user=NaCNerer" alt=""></p><p><img src="https://cfrating.ihcr.top/?user=misakicoca" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://cfrating.ihcr.top/?user=WaluntOvO&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cfrating.ihcr.top/?user=NaCNerer&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;i
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数学公式</title>
    <link href="http://yoursite.com/2020/12/31/%E4%B8%80%E4%BA%9B%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/12/31/%E4%B8%80%E4%BA%9B%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</id>
    <published>2020-12-31T02:47:00.000Z</published>
    <updated>2020-11-01T08:12:25.743Z</updated>
    
    <content type="html"><![CDATA[<p>忘记太多了..<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;忘记太多了..&lt;br&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>训练记录</title>
    <link href="http://yoursite.com/2020/12/31/%E8%AE%AD%E7%BB%83%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2020/12/31/%E8%AE%AD%E7%BB%83%E8%AE%B0%E5%BD%95/</id>
    <published>2020-12-31T02:47:00.000Z</published>
    <updated>2020-11-12T14:12:08.159Z</updated>
    
    <content type="html"><![CDATA[<p><details><br>  <summary>脑瘫问题首发</summary></p><ul><li>$s.earse(地址)$</li><li>递归是用全局$vetor$</li><li>线段树$if(!tag[pos])$</li><li>可撤销并查集可以采用<strong>保持合并前所有信息</strong></li><li>多项式 $如果 while(ML&lt;n+m-1)$ ,$n,m为项数$，如果$ML\leq n+m$<br>$n,m$为最高项系数，$sqrt,Inv….$等倒入的是项数（有多少项）。</li><li>多项式合并时注意限制项数。</li><li>线段树注意$lazy$的初始化</li><li>公式化的离散化线段变成左开右闭  </li><li>直径看清楚是否需要$-1$</li><li>虚树注意清空该清空的</li><li>多维$dp$转移注意边界</li><li>后缀树上$lcp(i,j)=len(lca(i,j))$</li><li>全排列二项式定理，也要考虑单独概率考虑</li><li>随机化使用std::mt19937 rnd(std::chrono::steady_clock::now().time_since_epoch().count())</li><li>树链剖分注意$top[rt]$，注意$w[dfn[x]]$</li><li>$KruskalTree重构树$开两倍空间。</li><li>负数向下取整$&gt;&gt;1$</li><li>$KruskalTree重构树$是特胖叶子节点$g[x].size()\leq 1$!!,可以减少特胖</li><li>字典序表示先字母大小再长度</li><li>二分图的最大团=补图的最大独立集。，最大独立集=所有顶点数-最小顶点覆盖，最小顶点覆盖等于二分图的最大匹配。</li><li>Boruvka算法快。</li><li>李超线段树$\max,\min$ 里面都要仔细改</li><li>点分治的时候记住情况应该清空的数据结构，要记住有$a[rt]$这个点也要加入。</li></ul><details><a id="more"></a><h3 id="牛客多校"><a href="#牛客多校" class="headerlink" title="牛客多校"></a>牛客多校</h3><ul><li><a href="https://ac.nowcoder.com/acm/contest/5666" target="_blank" rel="noopener">2020牛客暑期多校训练营（第一场）</a>  $solve(2/10)$,$upsolve(2/10)$</li><li><a href="https://ac.nowcoder.com/acm/contest/5667" target="_blank" rel="noopener">2020牛客暑期多校训练营（第二场）</a> $solve(1/11)$,$upsolve(9/11)$</li><li><a href="https://ac.nowcoder.com/acm/contest/5668" target="_blank" rel="noopener">2020牛客暑期多校训练营（第三场）</a> $solve(5/12)$,$upsolve(9/12)$</li><li><a href="https://ac.nowcoder.com/acm/contest/5669" target="_blank" rel="noopener">2020牛客暑期多校训练营（第四场）</a> $solve(3/10)$,$upsolve(4/10)$</li><li><a href="https://ac.nowcoder.com/acm/contest/5670" target="_blank" rel="noopener">2020牛客暑期多校训练营（第五场）</a> $solve(4/11)$,$upsolve(8/10)$</li><li><a href="https://ac.nowcoder.com/acm/contest/5671" target="_blank" rel="noopener">2020牛客暑期多校训练营（第六场）</a> $solve(2/11)$,$upsolve(6/11)$</li><li><a href="https://ac.nowcoder.com/acm/contest/5672" target="_blank" rel="noopener">2020牛客暑期多校训练营（第七场）</a> </li><li><a href="https://ac.nowcoder.com/acm/contest/5673" target="_blank" rel="noopener">2020牛客暑期多校训练营（第八场）</a> $solve(3/11)$,$upsolve(5/11)$</li><li><a href="https://ac.nowcoder.com/acm/contest/5673" target="_blank" rel="noopener">2020牛客暑期多校训练营（第九场）</a> $solve(3/11)$,$upsolve(10/12)$</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;details&gt;&lt;br&gt;  &lt;summary&gt;脑瘫问题首发&lt;/summary&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$s.earse(地址)$&lt;/li&gt;
&lt;li&gt;递归是用全局$vetor$&lt;/li&gt;
&lt;li&gt;线段树$if(!tag[pos])$&lt;/li&gt;
&lt;li&gt;可撤销并查集可以采用&lt;strong&gt;保持合并前所有信息&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;多项式 $如果 while(ML&amp;lt;n+m-1)$ ,$n,m为项数$，如果$ML\leq n+m$&lt;br&gt;$n,m$为最高项系数，$sqrt,Inv….$等倒入的是项数（有多少项）。&lt;/li&gt;
&lt;li&gt;多项式合并时注意限制项数。&lt;/li&gt;
&lt;li&gt;线段树注意$lazy$的初始化&lt;/li&gt;
&lt;li&gt;公式化的离散化线段变成左开右闭  &lt;/li&gt;
&lt;li&gt;直径看清楚是否需要$-1$&lt;/li&gt;
&lt;li&gt;虚树注意清空该清空的&lt;/li&gt;
&lt;li&gt;多维$dp$转移注意边界&lt;/li&gt;
&lt;li&gt;后缀树上$lcp(i,j)=len(lca(i,j))$&lt;/li&gt;
&lt;li&gt;全排列二项式定理，也要考虑单独概率考虑&lt;/li&gt;
&lt;li&gt;随机化使用std::mt19937 rnd(std::chrono::steady_clock::now().time_since_epoch().count())&lt;/li&gt;
&lt;li&gt;树链剖分注意$top[rt]$，注意$w[dfn[x]]$&lt;/li&gt;
&lt;li&gt;$KruskalTree重构树$开两倍空间。&lt;/li&gt;
&lt;li&gt;负数向下取整$&amp;gt;&amp;gt;1$&lt;/li&gt;
&lt;li&gt;$KruskalTree重构树$是特胖叶子节点$g[x].size()\leq 1$!!,可以减少特胖&lt;/li&gt;
&lt;li&gt;字典序表示先字母大小再长度&lt;/li&gt;
&lt;li&gt;二分图的最大团=补图的最大独立集。，最大独立集=所有顶点数-最小顶点覆盖，最小顶点覆盖等于二分图的最大匹配。&lt;/li&gt;
&lt;li&gt;Boruvka算法快。&lt;/li&gt;
&lt;li&gt;李超线段树$\max,\min$ 里面都要仔细改&lt;/li&gt;
&lt;li&gt;点分治的时候记住情况应该清空的数据结构，要记住有$a[rt]$这个点也要加入。&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>乱七八糟题解</title>
    <link href="http://yoursite.com/2020/12/31/%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/12/31/%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F%E9%A2%98%E8%A7%A3/</id>
    <published>2020-12-31T02:47:00.000Z</published>
    <updated>2020-12-06T11:35:33.278Z</updated>
    
    <content type="html"><![CDATA[<p>鸽子的题解太多了。只好直接写。</p><!-- TOC --><ul><li><a href="#gym">GYM</a><ul><li><a href="#2019-ccpc-哈尔滨">2019-CCPC-哈尔滨</a><ul><li><a href="#b-binary-numbers">B. Binary Numbers</a></li><li><a href="#e-exchanging-gifts">E. Exchanging Gifts</a></li><li><a href="#i-interesting-permutation">I. Interesting Permutation</a></li><li><a href="#l-lru-algorithm">L. LRU Algorithm</a></li></ul></li><li><a href="#300iq-contest-1">300iq Contest 1</a><ul><li><a href="#bbest-subsequence">B.Best Subsequence</a></li><li><a href="#ccool-pairs">C.Cool Pairs</a></li><li><a href="#d-dates">D. Dates</a></li><li><a href="#f-free-edges">F. Free Edges</a></li><li><a href="#k-knowledge">K. Knowledge</a></li></ul></li><li><a href="#icpc-asia-east-continent-final">ICPC Asia-East Continent Final</a><ul><li><a href="#hking">H.King</a></li></ul></li></ul></li><li><a href="#雅礼集训">雅礼集训</a><ul><li><a href="#loj6029-雅礼集训-2017-day1市场">LOJ6029. 「雅礼集训 2017 Day1」市场</a></li><li><a href="#loj6030-雅礼集训-2017-day1矩阵">LOJ6030. 「雅礼集训 2017 Day1」矩阵</a></li><li><a href="#loj6031-雅礼集训-2017-day1字符串">LOJ6031. 「雅礼集训 2017 Day1」字符串</a></li><li><a href="#loj6032-雅礼集训-2017-day2水箱">LOJ6032. 「雅礼集训 2017 Day2」水箱</a></li><li><a href="#loj6033-雅礼集训-2017-day2棋盘游戏">LOJ6033. 「雅礼集训 2017 Day2」棋盘游戏</a></li><li><a href="#loj6034-雅礼集训-2017-day2线段游戏">LOJ6034. 「雅礼集训 2017 Day2」线段游戏</a></li><li><a href="#loj6035-雅礼集训-2017-day4洗衣服">LOJ6035. 「雅礼集训 2017 Day4」洗衣服</a></li><li><a href="#loj6036-雅礼集训-2017-day4编码">LOJ6036. 「雅礼集训 2017 Day4」编码</a></li></ul></li><li><a href="#codeforces">Codeforces</a><ul><li><a href="#cf1358f-tasty-cookie">CF1358F Tasty Cookie</a></li><li><a href="#cf1367f2-flying-sort-hard-version">CF1367F2 Flying Sort (Hard Version)</a></li><li><a href="#cf1368e-ski-accidents">CF1368E Ski Accidents</a></li><li><a href="#cf1374e2-reading-books-hard-version">CF1374E2 Reading Books (hard version)</a></li><li><a href="#cf1380g-circular-dungeon">CF1380G Circular Dungeon</a></li><li><a href="#cf1384d-gamegame">CF1384D. GameGame</a></li><li><a href="#cf1387b1-village-minimum">CF1387B1 Village (Minimum)</a></li><li><a href="#cf1387b2-village-maximum">CF1387B2 Village (Maximum)</a></li><li><a href="#cf1399e2-weights-division-hard-version">CF1399E2 Weights Division (hard version)</a></li><li><a href="#cf1354c2-not-so-simple-polygon-embedding">CF1354C2. Not So Simple Polygon Embedding</a></li><li><a href="#cf1354f-summoning-minions">CF1354F. Summoning Minions</a></li><li><a href="#cf1354g-find-a-gift">CF1354G. Find a Gift</a></li><li><a href="#cf1421e-swedish-heroes">CF1421E. Swedish Heroes</a></li><li><a href="#cf1353f-decreasing-heights">CF1353F. Decreasing Heights</a></li><li><a href="#cf1353e-k-periodic-garland">CF1353E. K-periodic Garland</a></li><li><a href="#cf1427e--xum">CF1427E . Xum</a></li><li><a href="#cf1344drésumé-review">CF1344D.Résumé Review</a></li><li><a href="#cf1344c-quantifier-question">CF1344C Quantifier Question</a></li><li><a href="#cf1363f-rotating-substrings">CF1363F Rotating Substrings</a></li><li><a href="#cf1408e-avoid-rainbow-cycles">CF1408E Avoid Rainbow Cycles</a></li><li><a href="#cf1408f-two-different">CF1408F Two Different</a></li><li><a href="#cf1422f-boring-queries">CF1422F Boring Queries</a></li><li><a href="#cf1437g---death-dbms">CF1437G - Death DBMS</a></li><li><a href="#cf1436f-sum-over-subsets">CF1436F. Sum Over Subsets</a></li><li><a href="#cf1443f---identify-the-operations">CF1443F - Identify the Operations</a></li><li><a href="#cf1443e---long-permutation">CF1443E - Long Permutation</a></li><li><a href="#cf19d">CF19D</a></li><li><a href="#cf204e-little-elephant-and-strings">CF204E Little Elephant and Strings</a></li><li><a href="#cf793c-mice-problem">CF793C Mice problem</a></li><li><a href="#cf1285e-delete-a-segment">CF1285E Delete a Segment</a></li><li><a href="#cf1451e-bitwise-queries">CF1451E Bitwise Queries</a></li><li><a href="#cf1452e-two-editorials">CF1452E Two Editorials</a></li></ul></li><li><a href="#洛谷">洛谷</a><ul><li><a href="#p4103-heoi2014大工程">P4103 [HEOI2014]大工程</a></li><li><a href="#p5504-jsoi2011柠檬">P5504 [JSOI2011]柠檬</a></li></ul></li><li><a href="#atcoder">Atcoder</a><ul><li><a href="#atcoder-grand-contest-048">AtCoder Grand Contest 048</a></li><li><a href="#acl-beginner-contest">ACL Beginner Contest</a><ul><li><a href="#f---heights-and-pairs">F - Heights and Pairs</a></li></ul></li></ul></li><li><a href="#牛客">牛客</a><ul><li><a href="#icpc小米邀请赛2">ICPC小米邀请赛2</a><ul><li><a href="#a2020">A.2020</a></li><li><a href="#isubsequence-pair">I.Subsequence Pair</a></li></ul></li></ul></li></ul><!-- /TOC --><a id="more"></a><h1 id="GYM"><a href="#GYM" class="headerlink" title="GYM"></a>GYM</h1><h2 id="2019-CCPC-哈尔滨"><a href="#2019-CCPC-哈尔滨" class="headerlink" title="2019-CCPC-哈尔滨"></a>2019-CCPC-哈尔滨</h2><h3 id="B-Binary-Numbers"><a href="#B-Binary-Numbers" class="headerlink" title="B. Binary Numbers"></a>B. Binary Numbers</h3><p>$f(a,b)$即$a,b$的最长公共前缀长度，然后暴力打表，可以知道$a,b$越相近，$f(a,b)越大$，从每个区间里选出一个代表数字$A i$，如果对于所有区间$i$，满足$f ( A_i , k ) ≥ f ( A_j , k )$,$L_i≤k≤R_i$。</p><p>显然根据单调性</p><ul><li>$f ( A_{i-1} , R_{i-1} ) ≥ f ( A_{i} , R_{i-1})$</li></ul><ul><li>$f ( A_i , L_i ) ≥ f ( A_{i-1} , L_i )$</li></ul><p>$f ( A_{i-1} , L_i ),f ( A_{i-1} , R_{i-1} )$当作$dp[i-1][][]$的状态去转移，根据两个条件看是否转移，以及更新状态即可。</p><h3 id="E-Exchanging-Gifts"><a href="#E-Exchanging-Gifts" class="headerlink" title="E. Exchanging Gifts"></a>E. Exchanging Gifts</h3><p><strong>请先搞清楚，基本最大快乐值如何求</strong>。</p><p>两个操作可以想成一颗树，然后根据最后需要的向下类似$dp$,最后得到某些数的数量。</p><p>就是比较最大值和总和之间大小的分类讨论。</p><h3 id="I-Interesting-Permutation"><a href="#I-Interesting-Permutation" class="headerlink" title="I. Interesting Permutation"></a>I. Interesting Permutation</h3><p>考虑每次就相当于一个区间长度，$tmp=$可插空位</p><ul><li>$h_{i+1}=h_i$,$ans=ans\times tmp,tmp-1$</li><li>$h_{i+1}&gt;h_i$,$ans=2\times ans,tmp=tmp+h_{i+1}-h_i-1$,表示新的数可以插前面和后面。并且更新可插空位。</li></ul><h3 id="L-LRU-Algorithm"><a href="#L-LRU-Algorithm" class="headerlink" title="L. LRU Algorithm"></a>L. LRU Algorithm</h3><p>找到规律发现，内存其实无所谓，假设内存无限大，那么对于有内存去前面$k$个即可，轻松可以预处理$hash[n][k]$，然后每次暴力查找即可。注意$0$。</p><h2 id="300iq-Contest-1"><a href="#300iq-Contest-1" class="headerlink" title="300iq Contest 1"></a>300iq Contest 1</h2><h3 id="B-Best-Subsequence"><a href="#B-Best-Subsequence" class="headerlink" title="B.Best Subsequence"></a>B.Best Subsequence</h3><p>逆向思维取删出相邻最大的一定最优。用$set$模拟即可。</p><h3 id="C-Cool-Pairs"><a href="#C-Cool-Pairs" class="headerlink" title="C.Cool Pairs"></a>C.Cool Pairs</h3><p>转化成$a_i&lt; -b_j=z_j$，这类构造先考虑$k=0$,直接$z_j=-n$，再将$a_i$按照顺序变$[-n,-1]$。然后慢慢调整$z_j$大小。</p><ul><li>如果不够，直接设$z_j=1$,就可以覆盖$j-1$个$a_i$。</li><li>如果够了，将$i&lt;j$的$a_i$，排个序找到第$k$小的$a$,$z_j$直接等于就好了，并且结束，由于$a_i$是负的，保证$z_j$单调递减。</li></ul><h3 id="D-Dates"><a href="#D-Dates" class="headerlink" title="D. Dates"></a>D. Dates</h3><p>每个妹子匹配一个时间区间，每个时间最多选择𝑎𝑖个妹子，每个妹子有一个快乐值，最大化总快乐值。</p><p>由于一个妹子最多只会占用其他妹子的约会时间，所以贪心的选择快乐值总没错。</p><p>那么题意就变成选择妹子是否可以保证能成功过匹配。</p><p>对于任意区间$[i,j]$，区间$[i,j]$中选中妹子的数量需要小于等于这个区间和。</p><p>此时相当于判断是否所有子集的邻域（即与其相邻的点构成的集合）大小都比子集本身大。由于$L_i\leq L_{i+1},R_i\leq R_{i+1}$，左侧的区间的情况只有$n^2$种。</p><p>$c[j]-c[i-1]\leq s[r_j]-s[l_i-1]$</p><p>$c[j]-s[r_j]\leq c[i-1]-s[l_i-1]$</p><p>考虑我加入一个选中一个妹子的时候左侧$[j,n]$会发生变化。右侧$[j+1,n]$会发生变化。判断变化的那端是否发生左侧最大值$[j,n]$是否大于右侧最小值$[1,j]$了。</p><p>不然撤回操作。</p><h3 id="F-Free-Edges"><a href="#F-Free-Edges" class="headerlink" title="F. Free Edges"></a>F. Free Edges</h3><p>问至少删掉多少条边后图中不存在环。并茶几瞎几把找一找就好了</p><h3 id="K-Knowledge"><a href="#K-Knowledge" class="headerlink" title="K. Knowledge"></a>K. Knowledge</h3><p>每次可以删加掉$aa$,$bb$,$ababab$。</p><p>发现任何字符串都可以变成一个最短无法变短字符串<br>找到关键的几个变化</p><ul><li>$aa\rightarrow$</li><li>$bbb\rightarrow$</li><li>$abba \rightarrow bab$</li><li>$ababa\rightarrow bb$</li><li>$abba\rightarrow bab$</li><li>$baba\rightarrow abb$</li></ul><p>多写一点就好了，然后发现就$12$个为基底的字符串。</p><p>然后即从$k$长度的字符串变成$s$,考虑$12$个的互相变换关系，相当与走路径一样，查看从$x$走到$y$有几种走法，这里就是从空字符串走$k$步，有多少种变成$s$的路径种类，矩阵快速幂即可。</p><h2 id="ICPC-Asia-East-Continent-Final"><a href="#ICPC-Asia-East-Continent-Final" class="headerlink" title="ICPC Asia-East Continent Final"></a>ICPC Asia-East Continent Final</h2><h3 id="H-King"><a href="#H-King" class="headerlink" title="H.King"></a>H.King</h3><p>找到$qa_i \equiv a_{i+1} \pmod p$,$\geq n/2$的最长子序列。<br>$q\equiv a_{i+1}a^{-1}_i \pmod p$</p><p>$\geq n/2$的最长子序列。必定存在相邻的$a_i$。</p><p>随机化枚举即可。</p><h1 id="雅礼集训"><a href="#雅礼集训" class="headerlink" title="雅礼集训"></a>雅礼集训</h1><h2 id="LOJ6029-「雅礼集训-2017-Day1」市场"><a href="#LOJ6029-「雅礼集训-2017-Day1」市场" class="headerlink" title="LOJ6029. 「雅礼集训 2017 Day1」市场"></a>LOJ6029. 「雅礼集训 2017 Day1」市场</h2><p>当线段树上的点$max[pos]-min[pos]&lt; d$就会变成减法，而$\sum a_i+d$，只会改变两个$max-min$。即我最多需要除$qlog(q\times 10^4)$。<br>需要一个支持最大值，最小值，区间和的线段树即可。</p><h2 id="LOJ6030-「雅礼集训-2017-Day1」矩阵"><a href="#LOJ6030-「雅礼集训-2017-Day1」矩阵" class="headerlink" title="LOJ6030. 「雅礼集训 2017 Day1」矩阵"></a>LOJ6030. 「雅礼集训 2017 Day1」矩阵</h2><p>先构造一行都是#,然后填充竖即可。（注意需要注意已经$ok$的竖，以及填充此行只需要有这行的竖，或者<strong>花费一次构造这个竖</strong></p><h2 id="LOJ6031-「雅礼集训-2017-Day1」字符串"><a href="#LOJ6031-「雅礼集训-2017-Day1」字符串" class="headerlink" title="LOJ6031. 「雅礼集训 2017 Day1」字符串"></a>LOJ6031. 「雅礼集训 2017 Day1」字符串</h2><p>$qk\leq 10^5$</p><ul><li><p>$k\leq 300$，暴力跳所有子串，然后暴力二分询问$mp[l][r]，在[a,b]$中有几个,可以离线做到$O(qk^2)$，在线就是$O(qk^2\log n)$</p></li><li><p>$q\leq300$,从$1$走子串保证后缀那种，每走到$r$，需有所有的$l$,这个时候倍增往上跳寻找$siz$最大。$O(qm\log n)$</p></li></ul><h2 id="LOJ6032-「雅礼集训-2017-Day2」水箱"><a href="#LOJ6032-「雅礼集训-2017-Day2」水箱" class="headerlink" title="LOJ6032. 「雅礼集训 2017 Day2」水箱"></a>LOJ6032. 「雅礼集训 2017 Day2」水箱</h2><p>按照高度排序，（注意这里需要先合并再处理那些条件),$ans[x]$表示$x$个块的答案，$f[x]$表示目前为止有水需求的数量。</p><ul><li>考虑合并，合并答案即可。</li><li>考虑有水，则$f[find(x)]$++,更新答案$ans[x]$</li><li>考虑无水，则直接更新$ans[x]$</li></ul><h2 id="LOJ6033-「雅礼集训-2017-Day2」棋盘游戏"><a href="#LOJ6033-「雅礼集训-2017-Day2」棋盘游戏" class="headerlink" title="LOJ6033. 「雅礼集训 2017 Day2」棋盘游戏"></a>LOJ6033. 「雅礼集训 2017 Day2」棋盘游戏</h2><p>二分图博弈，即找到那些点是非必须点。即删除了之后对最大匹配没影响。考虑一个非匹配点𝑥，假如它连向了一个匹配点𝑦，那么它就能替换掉当前当前和这个匹配点匹配的点𝑧，而这时𝑧也可以进行同样的操作。</p><p>首先根据时间戳的匈牙利算法可以找到所有可能的匹配点，然后找非匹配点。</p><p>于是我们从每个非匹配𝑥出发进行𝑑𝑓𝑠，途经的和𝑥同一集合的点都满足要求。</p><h2 id="LOJ6034-「雅礼集训-2017-Day2」线段游戏"><a href="#LOJ6034-「雅礼集训-2017-Day2」线段游戏" class="headerlink" title="LOJ6034. 「雅礼集训 2017 Day2」线段游戏"></a>LOJ6034. 「雅礼集训 2017 Day2」线段游戏</h2><p>李超线段树模版题。</p><h2 id="LOJ6035-「雅礼集训-2017-Day4」洗衣服"><a href="#LOJ6035-「雅礼集训-2017-Day4」洗衣服" class="headerlink" title="LOJ6035. 「雅礼集训 2017 Day4」洗衣服"></a>LOJ6035. 「雅礼集训 2017 Day4」洗衣服</h2><p>考虑只洗衣服，则用优先队列维护当前最小洗衣时间。就可以得到洗$k$间衣服需要的最短时间。同样处理烘干衣服的时间。</p><p>考虑到所有衣服都被烘干后烘干机全部是空的，可以把这个过程倒过来，这样子就和洗衣服一样。即当$i$衣服洗完后，选如果当第$p_i$烘干的则时间</p><script type="math/tex; mode=display">\max(a_1+b_{p_1},a_2+b_{p_2}....a_n+b_{p_n})</script><p>顺序和大于等于乱序和大于等于逆序和,求个逆序和即可。</p><h2 id="LOJ6036-「雅礼集训-2017-Day4」编码"><a href="#LOJ6036-「雅礼集训-2017-Day4」编码" class="headerlink" title="LOJ6036. 「雅礼集训 2017 Day4」编码"></a>LOJ6036. 「雅礼集训 2017 Day4」编码</h2><p>可以得到一个$O(n^2)$的2-SAT。<br>考虑如何优化</p><p>首先按照长度排序，就可以减少不必要的分类讨论。</p><p>如果有遍历到前缀，那么连接两个点表示不能同时成立。</p><p>在最后不能把这个情况直接压入终止节点，会导致某个节点太多点。考虑每次新建点，$new$不能与$old$同时成立，但需要和$tmp$同时成立。</p><hr><h1 id="Codeforces"><a href="#Codeforces" class="headerlink" title="Codeforces"></a>Codeforces</h1><h2 id="CF1358F-Tasty-Cookie"><a href="#CF1358F-Tasty-Cookie" class="headerlink" title="CF1358F Tasty Cookie"></a>CF1358F Tasty Cookie</h2><ul><li>翻转$a$数列</li><li>将$a$数列变成他的前缀和</li></ul><p>前缀和不断增大得很快。$n\geq 3$模拟即可，你问我咋模拟，$std$,满足单调增就差分，不满足就倒置，否则就$-1$。</p><p>$n=2$,就特别麻烦。</p><ul><li>根据上题，我们需要把本来差分的部分快速差分，</li><li>如果快速差分过程中出现$a$数组，两两特判。</li><li>以上情况都没有并且被差分到某个数$=0$,$-1$</li></ul><p>之后就是看清题意写整齐</p><h2 id="CF1367F2-Flying-Sort-Hard-Version"><a href="#CF1367F2-Flying-Sort-Hard-Version" class="headerlink" title="CF1367F2 Flying Sort (Hard Version)"></a>CF1367F2 Flying Sort (Hard Version)</h2><p>我们可以发现，中间的数字是不能插进去的，所以这组数是在排序后仍相邻的数，则要找到最长的子序列。</p><p>对于相同数字的考究。</p><ul><li>如果一个数当第一位以及最后一位，数量是可以任意。</li><li>否则必须全部数字加进去。</li></ul><p>先离散化一下。<br>我们可以这样$dp$,$dp[i]$，表示$[1,i]$最长的不严格增序列</p><ul><li>把$a[i]-1$当中间的数字，则$dp[i]=dp[l[a[i]-1]+cnt[a[i]-1]$</li><li>把$a[i]-1$当第一的数字，则$dp[i]=cnt[a[i]-1]+1$</li><li>把$a[i]$当最后一位的数字，则$dp[i]=dp[pre[a[i]]]+1$</li></ul><h2 id="CF1368E-Ski-Accidents"><a href="#CF1368E-Ski-Accidents" class="headerlink" title="CF1368E Ski Accidents"></a>CF1368E Ski Accidents</h2><p>有 $n$ 个顶点，以及 $m$条有向边，所有有向边$(u,v)$ 均满足 $u&lt;v$ ，且所有顶点的出度都不超过 $2$ ，要求从中删去不超过 $\frac{4}{7}$个顶点，使得图中不存在长度超过$1$ 的路径。</p><p>如果是完全二叉树显然可以的$4/7$。考虑反向建边，如果找到长度为 $2$的路径的顶点时，将顶点 $i$ 删掉即可,并且由于题目所给$u&lt;v$，就不会有后效性了。</p><h2 id="CF1374E2-Reading-Books-hard-version"><a href="#CF1374E2-Reading-Books-hard-version" class="headerlink" title="CF1374E2 Reading Books (hard version)"></a>CF1374E2 Reading Books (hard version)</h2><p>思路很明显，先离散化离线，后面做权值线段树第$k$大。别把线段树写错了。</p><h2 id="CF1380G-Circular-Dungeon"><a href="#CF1380G-Circular-Dungeon" class="headerlink" title="CF1380G Circular Dungeon"></a>CF1380G Circular Dungeon</h2><p>自己做出来的，按照宝箱大小去分配遇到$k$个之前的价值。这里可以提前预处理，前缀和即可。注意下无法$(n-i)\mod i \not = 0$即可。</p><h2 id="CF1384D-GameGame"><a href="#CF1384D-GameGame" class="headerlink" title="CF1384D. GameGame"></a>CF1384D. GameGame</h2><p>对于每位来说如果异或位$0$,则这位没影响。</p><p>考虑最高位异或不为$0$,必定在此有决战，且必定有奇数个$1$。观察下可得如果都是$1$,则$cnt\mod 4=1$。或者$cnt\mod 4=2,(n-cnt)\mod 2=1$，拿到奇数个$1$之后有$0$拿。</p><h2 id="CF1387B1-Village-Minimum"><a href="#CF1387B1-Village-Minimum" class="headerlink" title="CF1387B1 Village (Minimum)"></a>CF1387B1 Village (Minimum)</h2><p>简单的树形$dp$。</p><h2 id="CF1387B2-Village-Maximum"><a href="#CF1387B2-Village-Maximum" class="headerlink" title="CF1387B2 Village (Maximum)"></a>CF1387B2 Village (Maximum)</h2><p>答案显而易见$\sum min(n - siz[i], siz[i])$。</p><p>看怎么合理分配。$min(n - siz[i], siz[i])\leq n/2$，也就是路径必须经过重心</p><p>则答案一定产生在重心的子树里，$siz[i]\leq n/2$,也一定是重心的每个子树里的点互相匹配。</p><p>这个序列的第$i$项和第$i+\lfloor\frac{n}{2}\rfloor$，匹配，注意$n\&amp;1$，有个点会保持不变，其实此时交换不会发生变化，随便找个点互换即可。</p><h2 id="CF1399E2-Weights-Division-hard-version"><a href="#CF1399E2-Weights-Division-hard-version" class="headerlink" title="CF1399E2 Weights Division (hard version)"></a>CF1399E2 Weights Division (hard version)</h2><p>分类花费硬币的价值每个边权计算$/2$给予的价值。可以提前$n\log$处理，反正除我之前一定要除我之前的。</p><p>就变成花费硬币$1$，所以直接枚举一个的种类使用的数量，再二分或者单调队列另一个。</p><h2 id="CF1354C2-Not-So-Simple-Polygon-Embedding"><a href="#CF1354C2-Not-So-Simple-Polygon-Embedding" class="headerlink" title="CF1354C2. Not So Simple Polygon Embedding"></a>CF1354C2. Not So Simple Polygon Embedding</h2><p>求$n$为奇数，$n$为偶数</p><ul><li>可以变成扩大变成偶数，偶数就是非常简单。</li><li>选择$\frac{pi}{2n}$，<strong>不要被六边形迷惑计算</strong>。</li></ul><h2 id="CF1354F-Summoning-Minions"><a href="#CF1354F-Summoning-Minions" class="headerlink" title="CF1354F. Summoning Minions"></a>CF1354F. Summoning Minions</h2><p>解释一下为啥是一定是前$k-1$张放下，然后$n-k$张放了就拿走，最后一张再放下。</p><p>首先无论怎么放终究是$\sum a_i+(k-1)\sum b_i+\sum (j-1)b_j$。</p><p>这样肯定是最优的，然后其实就是枚举所有最后留在桌子上的$C_n^k$张权值就定了。一定不会错过最优解，然后知道了就简单的二维$dp$。</p><h2 id="CF1354G-Find-a-Gift"><a href="#CF1354G-Find-a-Gift" class="headerlink" title="CF1354G. Find a Gift"></a>CF1354G. Find a Gift</h2><p>注意$k\leq \frac{n}{2}$，就可以随机化确定$1$是否为礼物了。只要出现小的一定是礼物。显然随机化$k$,如果是礼物一定会出现$2$。否则是石头是不会出现$2$的。</p><p>然后就可以通过一次次倍增确定$[1,2^k]$是否为石子， 也可以发现$(2^k,<br>2^{k+1}]$，然后既然我知道有可以对比的任何小于区间的石头,就可以轻松用二分找到最左端的礼物在哪了。</p><h2 id="CF1421E-Swedish-Heroes"><a href="#CF1421E-Swedish-Heroes" class="headerlink" title="CF1421E. Swedish Heroes"></a>CF1421E. Swedish Heroes</h2><p>找到规律一定是正负交替，并且发现只需要$(n+\sum [p_i=-1])\mod 3=1$。并且不能为$+-+-+$这样显然不可能。设$m=\sum [p_i=-1]$,$dp[n][m][last][flag]$,$last=$最后一个$a_i$的正负，是否当前为$+-+-$</p><h2 id="CF1353F-Decreasing-Heights"><a href="#CF1353F-Decreasing-Heights" class="headerlink" title="CF1353F. Decreasing Heights"></a>CF1353F. Decreasing Heights</h2><p>一定有元素不变，直接枚举不变的$O(n^4)dp$</p><h2 id="CF1353E-K-periodic-Garland"><a href="#CF1353E-K-periodic-Garland" class="headerlink" title="CF1353E. K-periodic Garland"></a>CF1353E. K-periodic Garland</h2><p>看错题意+失误，类似于求子段最大和一样即可。注意$dp$可以重头开始，也可以接后面的。</p><h2 id="CF1427E-Xum"><a href="#CF1427E-Xum" class="headerlink" title="CF1427E . Xum"></a>CF1427E . Xum</h2><p>通过给定的$a$,$a$为奇数，操作$\oplus, +$构造出一个$1$,显然$ax-by=1$即可。构造一个互质的$y$即可，暴力枚举$(a\times(2k+1)\oplus a)$，然后注意范围$ax\leq 10^{12}$，$x\times t$这个好构造。注意控制大小。</p><h2 id="CF1344D-Resume-Review"><a href="#CF1344D-Resume-Review" class="headerlink" title="CF1344D.Résumé Review"></a>CF1344D.Résumé Review</h2><p>暴力很好想，把$a_i-3x^2+3x-1$，放到优先队列里面一个一个取。</p><p>而这里巧妙枚举了最后结束的$\Delta f(i,x)$，可以判断每个最多可以取多少。（这里再用二分）。</p><p>然后细节就需要，因为可能有好几个相同的值，所以二分时候往大的方向取答案，即找到满足条件的尽可能小的值，然后由于可能多了使用次数，找到$=ans$,—。</p><h2 id="CF1344C-Quantifier-Question"><a href="#CF1344C-Quantifier-Question" class="headerlink" title="CF1344C Quantifier Question"></a>CF1344C Quantifier Question</h2><p>题意很恶心，注意$x$成立是有顺序的，显然有环不可能。然后所有存在一定可能，然后发现如果出现一个任意，递推到我的和我递推的都要变成存在，又因为$a&lt;b,b&lt;c,a&lt;c$,具有传递性，就是说跑这个有向图跑到的点都要变成存在（别忘记跑反图。然后我们发现只要被任意一个图跑到的节点，他的值也确定了，我的反图和正图那些也不能任意了，要做一样的操作。</p><h2 id="CF1363F-Rotating-Substrings"><a href="#CF1363F-Rotating-Substrings" class="headerlink" title="CF1363F Rotating Substrings"></a>CF1363F Rotating Substrings</h2><p>给定两个长度为 $n$ 的字符串 $s$，$t$。定义一次操作为选择 $s$ 的一个子串 $s_{l, l +1, \dots, r}$<br>​<br> ，然后将之修改为 $s_{r, l, l + 1, l + 2, \dots, r - 1 }$s<br>请求助使 $s$ 与 $t$ 相等的最小操作次数。无解输出 $-1$。</p><p>$S$的前$i$个字符和$T$的前$j$个字符匹配的最小花费</p><p>每一个操作可以让一个字符提到前面的任何位置，并不能提到到后面，最少的操作次数是$n$ - 两个字符串的最长公共子序列。</p><p>但是对于$acbd,adbc$。匹配到第三个字符的时候，显然不能把$c$放到后面去。这个时候在做最长公共子序列。我们需要加上一个条件，$s$的每个字母后缀数量必须比$t$多即可。</p><h2 id="CF1408E-Avoid-Rainbow-Cycles"><a href="#CF1408E-Avoid-Rainbow-Cycles" class="headerlink" title="CF1408E Avoid Rainbow Cycles"></a>CF1408E Avoid Rainbow Cycles</h2><p>如果我保留某个元素，那么这个集合就会和所有有这个元素的点连边。我们把集合当成一个点，那么当两个集合同时选择一个$x$，$x$连集合$A$,集合$B$连$x$,$A-B$，即最后要搞一个最大生成树即可。</p><h2 id="CF1408F-Two-Different"><a href="#CF1408F-Two-Different" class="headerlink" title="CF1408F Two Different"></a>CF1408F Two Different</h2><p>模拟时，显然$2^n$的长度暴力模拟，就会全部变成一个。然后对剩下的贪心分配。</p><p>但是直接正做一遍，反做一遍就好了。(我是傻逼)</p><h2 id="CF1422F-Boring-Queries"><a href="#CF1422F-Boring-Queries" class="headerlink" title="CF1422F Boring Queries"></a>CF1422F Boring Queries</h2><p>在线区间$lcm$</p><p>  解1</p><ul><li><p>对于小于等$\sqrt{2\cdot 10^5}$的质因子，直接各开一个线段树暴力维护，需要动态以及常数优化</p></li><li><p>对于大于 $\sqrt{2\cdot 10^5}$<br>的质因子，每个元素至多有一个。这有点像维护区间不同颜色个数，$\sum [last_x&lt;l]$只不过每个颜色还带了权值（强制在线）</p></li><li><p>版本$r$这个线段树维护的是点$x$，维护的是$last[t]=x$,的$t$的所有乘积。</p><p>解2</p></li></ul><p>根据解$1$去做预处理第 $i$版本的线段树时，将 $i$ 位置的权值乘上 $a_i$的大质因子，为了防止二次计算，并将$a_i$上次出现的位置除掉该质因子。</p><ul><li>版本$r$这个线段树维护的是位置$x$,在$[1,r]$上的乘积。</li></ul><h2 id="CF1437G-Death-DBMS"><a href="#CF1437G-Death-DBMS" class="headerlink" title="CF1437G - Death DBMS"></a>CF1437G - Death DBMS</h2><p>$AC$自动机上树链剖分最大值，或者标记永久化线段树维护子树点的最大值。</p><h2 id="CF1436F-Sum-Over-Subsets"><a href="#CF1436F-Sum-Over-Subsets" class="headerlink" title="CF1436F. Sum Over Subsets"></a>CF1436F. Sum Over Subsets</h2><p>用$jiangly$的话说看到$\gcd=1$,一定想到莫比乌斯容斥这种东西。</p><p>然后想想没有限制咋做。</p><ul><li>$a_i\times a_i$产生贡献。选择一个$(k-1)$是被踢掉的，然后随便选$2^{k-2}$</li><li>$a_i\times a_j$产生贡献。（是有顺序的那种），$2^{k-3}(k-2)[a_i,a_j\in A]+^{k-3}(k-2)[a_j\in A,a_i\in B]$。</li></ul><p>维护一下两个乘积的$\sum$即可。</p><h2 id="CF1443F-Identify-the-Operations"><a href="#CF1443F-Identify-the-Operations" class="headerlink" title="CF1443F - Identify the Operations"></a>CF1443F - Identify the Operations</h2><p>先考虑如何处理不合法的情况。每次删观察是否两边都是不需要的数。</p><p>正解其实很简单，观察拿出某个数之后，此时这个数就成了不必要的数。如果下次想拿被移走的数，其实间接在拿$pos_{b_i}$，并且一定拿的到，然后模拟一下就没了。</p><h2 id="CF1443E-Long-Permutation"><a href="#CF1443E-Long-Permutation" class="headerlink" title="CF1443E - Long Permutation"></a>CF1443E - Long Permutation</h2><p>大水题，逆康托展开得维护后$14$个数就好了。</p><ul><li>提醒我要准备他两板子了。两者都可以做到$n\log n$。</li></ul><h2 id="CF19D"><a href="#CF19D" class="headerlink" title="CF19D"></a>CF19D</h2><p>这题告诉我们线段树上区间二分时间复杂度不大。</p><h2 id="CF204E-Little-Elephant-and-Strings"><a href="#CF204E-Little-Elephant-and-Strings" class="headerlink" title="CF204E Little Elephant and Strings"></a>CF204E Little Elephant and Strings</h2><p>锁定字符串的每个$r$,就可以知道这个后缀是否存在$k$个重复。</p><p>然后标记下，某个结点可以贡献的就是结点到根最大有标记的$len$，瞎几把维护即可。</p><h2 id="CF793C-Mice-problem"><a href="#CF793C-Mice-problem" class="headerlink" title="CF793C Mice problem"></a>CF793C Mice problem</h2><p>阴间题。</p><p>我们只要把每一个老鼠在矩形里的时间段算出来然后取交集，若交集非空则输出交集中的任意点即可。<br>但是有很多恶心的点。</p><ul><li>出现与边的线段一样的直线，永远不能交在矩阵内。</li><li>如果最后交集在一个时间点，也永远不能在矩阵内。</li><li>如果有不动点要特殊判断。</li></ul><h2 id="CF1285E-Delete-a-Segment"><a href="#CF1285E-Delete-a-Segment" class="headerlink" title="CF1285E Delete a Segment"></a>CF1285E Delete a Segment</h2><p>你要求出 正好删去一条线段后，并集 最多包括多少条线段。</p><ul><li><p>如果不删，就把所有线段排个序加入，然后判如果加入的左端点小于当前最大右端点则，出现了一个新的线段。考虑$dp[i][r][2]$显然空间不够，但是发现删一条边，对枚举到一个点的$r$产生$2$个状态。直接暴力$map$保持即可。</p></li><li><p>考虑计算去掉每条线段的贡献，显然如果出现$[[\ ],[\ ]]$这种情况这条线段的贡献是+2的，推广到一般形式，如果在括号匹配中遇到$set$里只有一个括号$[$显然去掉我是可以让之后的括号与之前括号分离。但是要记住加入一个括号他自己这个并集也会消失，然后用$set$维护即可（主要$set$好删除）</p></li></ul><h2 id="CF1451E-Bitwise-Queries"><a href="#CF1451E-Bitwise-Queries" class="headerlink" title="CF1451E Bitwise Queries"></a>CF1451E Bitwise Queries</h2><p>其实就是探究如何在$4$次询问找到$a,b,c$</p><p>首先记住$a+b=a\oplus b+2(a\&amp;b)$</p><p>观察题目都是$[0,2^n)$。</p><p>假设有重复那就很简单。</p><p>如果没有重复</p><ul><li><p>可以白票一个询问，一定存在$a_i \oplus a_j=2^n$,并且此时$a_i \&amp;  a_j=2^n$</p></li><li><p>或者直接确定根据异或1的和异或2的推导出即可。</p></li></ul><h2 id="CF1452E-Two-Editorials"><a href="#CF1452E-Two-Editorials" class="headerlink" title="CF1452E Two Editorials"></a>CF1452E Two Editorials</h2><p>二维差分细节题，只是场上摸鱼了。这里只是告诉自己别摸鱼</p><hr><h1 id="洛谷"><a href="#洛谷" class="headerlink" title="洛谷"></a>洛谷</h1><h2 id="P4103-HEOI2014-大工程"><a href="#P4103-HEOI2014-大工程" class="headerlink" title="P4103 [HEOI2014]大工程"></a>P4103 [HEOI2014]大工程</h2><p>记录下最长边，最小边，次小边，次大边即可,虚树模版题。</p><h2 id="P5504-JSOI2011-柠檬"><a href="#P5504-JSOI2011-柠檬" class="headerlink" title="P5504 [JSOI2011]柠檬"></a>P5504 [JSOI2011]柠檬</h2><p>一番证明就可以发现最优的两端一定是相同数，如果左右端点贝壳大小不相等的话，必然有一个端点对答案没有贡献。干嘛不直接分开呢？</p><p>上凸包维护对于每个$a_i$。然后斜率优化即可单调栈（PS:好像没啥麻烦的，甚至直接二分上凸包也可以）。</p><hr><h1 id="Atcoder"><a href="#Atcoder" class="headerlink" title="Atcoder"></a>Atcoder</h1><h2 id="AtCoder-Grand-Contest-048"><a href="#AtCoder-Grand-Contest-048" class="headerlink" title="AtCoder Grand Contest 048"></a>AtCoder Grand Contest 048</h2><h2 id="ACL-Beginner-Contest"><a href="#ACL-Beginner-Contest" class="headerlink" title="ACL Beginner Contest"></a>ACL Beginner Contest</h2><h3 id="F-Heights-and-Pairs"><a href="#F-Heights-and-Pairs" class="headerlink" title="F - Heights and Pairs"></a>F - Heights and Pairs</h3><p>容斥是显然的。$f(i)$表示保证$i$对相同的答案。$g(i)$表示随便选$i$人成对的数量。$z(i)$表示选$i$对情侣的方法。</p><p>对于每种$h_i$我们可以计算出选出$i$对的方法,变成多项式就是$(k_0x^0+k_1x_1+k_2x^2…)$，启发式$NTT$即可。</p><p>$g(i)=g(i-2)\times C_{i-2}^2/(i/2)$</p><p>$f(i)=g(2n-2i)z(i)$</p><p>$ans=f(0)-f(1)+f(2)-f(3)…$</p><p>当然想要想的更快，二项式反演就不用思考了。（显然我要复习下）</p><hr><h1 id="牛客"><a href="#牛客" class="headerlink" title="牛客"></a>牛客</h1><h2 id="ICPC小米邀请赛2"><a href="#ICPC小米邀请赛2" class="headerlink" title="ICPC小米邀请赛2"></a>ICPC小米邀请赛2</h2><h3 id="A-2020"><a href="#A-2020" class="headerlink" title="A.2020"></a>A.2020</h3><p>赛时没做，考虑二分，先安排前$k$个再安排后$k$个，就没了。</p><h3 id="I-Subsequence-Pair"><a href="#I-Subsequence-Pair" class="headerlink" title="I.Subsequence Pair"></a>I.Subsequence Pair</h3><p>脑子进水题，想到$lcs$然后，问马老师：说不需要$LCS$。</p><p>其实就是$lcs$裸题。</p><ul><li>$\max(dp_{i,j}+m-j)$,公共一样直接贪心染$t$取最长。</li><li>$\max(dp_{i-1,j-1}+m-j-1+n-j-1)$，如果发现$s_i&lt;t_j$,发现取完之后就随便取了。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;鸽子的题解太多了。只好直接写。&lt;/p&gt;
&lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#gym&quot;&gt;GYM&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#2019-ccpc-哈尔滨&quot;&gt;2019-CCPC-哈尔滨&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#b-binary-numbers&quot;&gt;B. Binary Numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#e-exchanging-gifts&quot;&gt;E. Exchanging Gifts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#i-interesting-permutation&quot;&gt;I. Interesting Permutation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#l-lru-algorithm&quot;&gt;L. LRU Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#300iq-contest-1&quot;&gt;300iq Contest 1&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#bbest-subsequence&quot;&gt;B.Best Subsequence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ccool-pairs&quot;&gt;C.Cool Pairs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#d-dates&quot;&gt;D. Dates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#f-free-edges&quot;&gt;F. Free Edges&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#k-knowledge&quot;&gt;K. Knowledge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#icpc-asia-east-continent-final&quot;&gt;ICPC Asia-East Continent Final&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#hking&quot;&gt;H.King&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#雅礼集训&quot;&gt;雅礼集训&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#loj6029-雅礼集训-2017-day1市场&quot;&gt;LOJ6029. 「雅礼集训 2017 Day1」市场&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#loj6030-雅礼集训-2017-day1矩阵&quot;&gt;LOJ6030. 「雅礼集训 2017 Day1」矩阵&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#loj6031-雅礼集训-2017-day1字符串&quot;&gt;LOJ6031. 「雅礼集训 2017 Day1」字符串&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#loj6032-雅礼集训-2017-day2水箱&quot;&gt;LOJ6032. 「雅礼集训 2017 Day2」水箱&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#loj6033-雅礼集训-2017-day2棋盘游戏&quot;&gt;LOJ6033. 「雅礼集训 2017 Day2」棋盘游戏&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#loj6034-雅礼集训-2017-day2线段游戏&quot;&gt;LOJ6034. 「雅礼集训 2017 Day2」线段游戏&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#loj6035-雅礼集训-2017-day4洗衣服&quot;&gt;LOJ6035. 「雅礼集训 2017 Day4」洗衣服&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#loj6036-雅礼集训-2017-day4编码&quot;&gt;LOJ6036. 「雅礼集训 2017 Day4」编码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#codeforces&quot;&gt;Codeforces&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#cf1358f-tasty-cookie&quot;&gt;CF1358F Tasty Cookie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cf1367f2-flying-sort-hard-version&quot;&gt;CF1367F2 Flying Sort (Hard Version)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cf1368e-ski-accidents&quot;&gt;CF1368E Ski Accidents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cf1374e2-reading-books-hard-version&quot;&gt;CF1374E2 Reading Books (hard version)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cf1380g-circular-dungeon&quot;&gt;CF1380G Circular Dungeon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cf1384d-gamegame&quot;&gt;CF1384D. GameGame&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cf1387b1-village-minimum&quot;&gt;CF1387B1 Village (Minimum)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cf1387b2-village-maximum&quot;&gt;CF1387B2 Village (Maximum)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cf1399e2-weights-division-hard-version&quot;&gt;CF1399E2 Weights Division (hard version)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cf1354c2-not-so-simple-polygon-embedding&quot;&gt;CF1354C2. Not So Simple Polygon Embedding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cf1354f-summoning-minions&quot;&gt;CF1354F. Summoning Minions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cf1354g-find-a-gift&quot;&gt;CF1354G. Find a Gift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cf1421e-swedish-heroes&quot;&gt;CF1421E. Swedish Heroes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cf1353f-decreasing-heights&quot;&gt;CF1353F. Decreasing Heights&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cf1353e-k-periodic-garland&quot;&gt;CF1353E. K-periodic Garland&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cf1427e--xum&quot;&gt;CF1427E . Xum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cf1344drésumé-review&quot;&gt;CF1344D.Résumé Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cf1344c-quantifier-question&quot;&gt;CF1344C Quantifier Question&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cf1363f-rotating-substrings&quot;&gt;CF1363F Rotating Substrings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cf1408e-avoid-rainbow-cycles&quot;&gt;CF1408E Avoid Rainbow Cycles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cf1408f-two-different&quot;&gt;CF1408F Two Different&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cf1422f-boring-queries&quot;&gt;CF1422F Boring Queries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cf1437g---death-dbms&quot;&gt;CF1437G - Death DBMS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cf1436f-sum-over-subsets&quot;&gt;CF1436F. Sum Over Subsets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cf1443f---identify-the-operations&quot;&gt;CF1443F - Identify the Operations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cf1443e---long-permutation&quot;&gt;CF1443E - Long Permutation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cf19d&quot;&gt;CF19D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cf204e-little-elephant-and-strings&quot;&gt;CF204E Little Elephant and Strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cf793c-mice-problem&quot;&gt;CF793C Mice problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cf1285e-delete-a-segment&quot;&gt;CF1285E Delete a Segment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cf1451e-bitwise-queries&quot;&gt;CF1451E Bitwise Queries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cf1452e-two-editorials&quot;&gt;CF1452E Two Editorials&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#洛谷&quot;&gt;洛谷&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#p4103-heoi2014大工程&quot;&gt;P4103 [HEOI2014]大工程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#p5504-jsoi2011柠檬&quot;&gt;P5504 [JSOI2011]柠檬&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#atcoder&quot;&gt;Atcoder&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#atcoder-grand-contest-048&quot;&gt;AtCoder Grand Contest 048&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#acl-beginner-contest&quot;&gt;ACL Beginner Contest&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#f---heights-and-pairs&quot;&gt;F - Heights and Pairs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#牛客&quot;&gt;牛客&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#icpc小米邀请赛2&quot;&gt;ICPC小米邀请赛2&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#a2020&quot;&gt;A.2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#isubsequence-pair&quot;&gt;I.Subsequence Pair&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
    
    </summary>
    
    
    
      <category term="训练记录" scheme="http://yoursite.com/tags/%E8%AE%AD%E7%BB%83%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>要失业了</title>
    <link href="http://yoursite.com/2020/12/31/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/12/31/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</id>
    <published>2020-12-31T02:47:00.000Z</published>
    <updated>2020-12-14T15:07:05.378Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h2 id="OSI"><a href="#OSI" class="headerlink" title="OSI"></a>OSI</h2><p>七层划分为</p><ul><li>应用层(HTTP，FTP，DNS) </li><li>表示层（JPEG，ASII）</li><li>会话层（RPC，NFS）</li><li>传输层（TCP，UDP）</li><li>网络层 (IP，ARP，ICMP)</li><li>数据链路层(MAC，VLAN，PPP)</li><li>物理层。</li></ul><p>五层划分为：应用层、传输层、网络层、数据链路层、物理层。</p><p>四层划分为：应用层、传输层、网络层、网络接口层。</p><h2 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP IP"></a>TCP IP</h2><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li>TCP是面向连接的，可靠性高，UDP是基于非连接的，可靠性低。</li><li>TCP三次握手延迟高，实时性较强。</li><li>在传输相同大小数据时，TCP首部开销大，报头更复杂，实际保护数据较少。 但TCP提供超市重传机制，保证不会出现丢包乱序。UDP有丢包。</li><li>TCP提供双全工通信，每条TCP的连接只能点到点。UDP支持一对多，多对一，多对多的交互通信。</li></ul><h3 id="TCP的可靠连接"><a href="#TCP的可靠连接" class="headerlink" title="TCP的可靠连接"></a>TCP的可靠连接</h3><ul><li>滑动窗口</li><li>选择确认</li><li>超时重传</li></ul><h4 id="校验和"><a href="#校验和" class="headerlink" title="校验和"></a>校验和</h4><p>TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。</p><h4 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h4><p>TCP 连接的每一方都有固定大小的缓冲空间，TCP的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议。 （TCP 利用滑动窗口实现流量控制）</p><h4 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h4><p>当网络拥塞时，减少数据的发送。</p><h4 id="停止等待协议"><a href="#停止等待协议" class="headerlink" title="停止等待协议"></a>停止等待协议</h4><p>也是为了实现可靠传输的，它的基本原理就是每发完一个分组就- 停止发送，等待对方确认。在收到确认后再发下一个分组。 超时重传： 当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。</p><h3 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h3><p>TCP的几个状态 (SYN, FIN, ACK, PSH, RST, URG)</p><ul><li>SYN表示建立连接，</li><li>FIN表示关闭连接，</li><li>ACK表示响应</li></ul><h4 id="TCP四次握手"><a href="#TCP四次握手" class="headerlink" title="TCP四次握手"></a>TCP四次握手</h4><h3 id="为什么连接的时候是三次握手，关闭的时候却是四次握手？"><a href="#为什么连接的时候是三次握手，关闭的时候却是四次握手？" class="headerlink" title="为什么连接的时候是三次握手，关闭的时候却是四次握手？"></a>为什么连接的时候是三次握手，关闭的时候却是四次握手？</h3><p>答：因为当Server端收到Client端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当Server端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉Client端，”你发的FIN报文我收到了”。只有等到我Server端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四步握手。</p><h3 id="为什么TIME-WAIT状态需要经过2MSL-最大报文段生存时间-才能返回到CLOSE状态？"><a href="#为什么TIME-WAIT状态需要经过2MSL-最大报文段生存时间-才能返回到CLOSE状态？" class="headerlink" title="为什么TIME_WAIT状态需要经过2MSL(最大报文段生存时间)才能返回到CLOSE状态？"></a>为什么TIME_WAIT状态需要经过2MSL(最大报文段生存时间)才能返回到CLOSE状态？</h3><p>答：虽然按道理，四个报文都发送完毕，我们可以直接进入CLOSE状态了，但是我们必须假象网络是不可靠的，有可以最后一个ACK丢失。所以TIME_WAIT状态就是用来重发可能丢失的ACK报文。在Client发送出最后的ACK回复，但该ACK可能丢失。Server如果没有收到ACK，将不断重复发送FIN片段。所以Client不能立即关闭，它必须确认Server接收到了该ACK。Client会在发送出ACK之后进入到TIME_WAIT状态。Client会设置一个计时器，等待2MSL的时间。如果在该时间内再次收到FIN，那么Client会重发ACK并再次等待2MSL。所谓的2MSL是两倍的MSL(Maximum Segment Lifetime)。MSL指一个片段在网络中最大的存活时间，2MSL就是一个发送和一个回复所需的最大时间。如果直到2MSL，Client都没有再次收到FIN，那么Client推断ACK已经被成功接收，则结束TCP连接。</p><h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><h3 id="报文构成"><a href="#报文构成" class="headerlink" title="报文构成"></a>报文构成</h3><ul><li>请求方法  </li><li>请求url</li><li>HTTP版本和协议 </li><li>报文头部</li><li>报文体</li></ul><h4 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h4><ul><li>状态行（HTTP版本 状态码 状态码原因）响应头部</li><li>响应内容</li></ul><h3 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h3><ul><li>1开头：信息状态码</li><li>2开头：成功状态码</li><li>3开头：重定向状态码</li><li>4开头：客户端错误状态码</li><li>5开头：服务端错误状态码</li></ul><h3 id="http-和-https-的区别"><a href="#http-和-https-的区别" class="headerlink" title="http 和 https 的区别"></a>http 和 https 的区别</h3><ul><li>https协议需要申请证书</li><li>http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。</li><li>http端口(80),https端口(443)。</li><li>http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议更加安全</li></ul><h4 id="https-优点-缺点"><a href="#https-优点-缺点" class="headerlink" title="https 优点 缺点"></a>https 优点 缺点</h4><ul><li>安全</li><li>可以认证用户和服务器，确保数据发送倒正确的用户上。</li><li>握手延迟高</li><li>部署成本高</li></ul><h3 id="GET和POST的区别"><a href="#GET和POST的区别" class="headerlink" title="GET和POST的区别"></a>GET和POST的区别</h3><ul><li>GET 通过URL 传递，POST放在request body</li><li>GET长度有限制</li><li>GET更不安全</li><li>GET只能进行URL编码，POST支持多种编码方式。</li><li>GET请求回浏览器主动Cache ，而POST 支持多组编码方式</li><li>GET 请求参数回完整保留在浏览历史记录里，POST不会被保留</li><li>本质都是TCP，链接</li><li>GET产生一个TCP数据包，POST产生两个数据包</li></ul><h2 id="IP-MAC地址"><a href="#IP-MAC地址" class="headerlink" title="IP MAC地址"></a>IP MAC地址</h2><ul><li>MAC是硬件地址,用来定位网络设备的位置的，主要有数据链路层负责。而IP地址是IP协议提供的统一地址格式，为互联网上每个网络和每一台主机分配一个逻辑地址以此来屏蔽物理地址的差异。</li></ul><h3 id="TCP-IP-数据链路交互过程。"><a href="#TCP-IP-数据链路交互过程。" class="headerlink" title="TCP/IP 数据链路交互过程。"></a>TCP/IP 数据链路交互过程。</h3><p>网络层等数据链蹭用mac地址作为通信目标，数据包达到网络等准备往数据链路层层发送的时候，首先会去自己的ARP缓存标，寻找目标IP的目标地址，就将IP的mac底池封装倒链路层数据保的包头。如果缓存没找找到，就会发起广播，所有收到广播的机器看这个IP是不是自己的，则以单ba的形式将自己MAC地址回复给请求的机器。</p><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><h3 id="与mongodb-数据库"><a href="#与mongodb-数据库" class="headerlink" title="与mongodb 数据库"></a>与mongodb 数据库</h3><ul><li>内存管理机制上，redis 全部存在内存，定期写入磁盘，当内存不够选择指定的LRU算法删除数据。MongoDB数据存在内存，由Linux 系统map实习，内存不够将热点放入内存其他存在磁盘。</li><li>支持的数据结构 HASH SET LIST</li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li>字符串</li><li>列表</li><li>哈希</li><li>集合</li><li>有序集合</li></ul><h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><h2 id="Static"><a href="#Static" class="headerlink" title="Static"></a>Static</h2><h3 id="静态函数"><a href="#静态函数" class="headerlink" title="静态函数"></a>静态函数</h3><p>只能在本$CPP$里面使用。</p><h3 id="类的静态成员"><a href="#类的静态成员" class="headerlink" title="类的静态成员"></a>类的静态成员</h3><p>多个对象数据共享，安全</p><h2 id="cast转换"><a href="#cast转换" class="headerlink" title="cast转换"></a>cast转换</h2><ul><li>const_cast 将const 转为非 const</li><li>static_cast，隐式转换，用于多态向上转化</li></ul><h2 id="dynamic-cast"><a href="#dynamic-cast" class="headerlink" title="dynamic_cast"></a>dynamic_cast</h2><p>动态类型转换。用于虚函数的类</p><h2 id="reinterpret-cast"><a href="#reinterpret-cast" class="headerlink" title="reinterpret_cast"></a>reinterpret_cast</h2><p>啥都可以转换</p><h2 id="指针与引用"><a href="#指针与引用" class="headerlink" title="指针与引用"></a>指针与引用</h2><ul><li>指针有自己的空间大小是4</li><li>可以有const 指针</li><li>多级指针</li><li>++运算符</li><li>返回动态内存分类的对象或者内存必须使用指针</li></ul><h2 id="智能执政"><a href="#智能执政" class="headerlink" title="智能执政"></a>智能执政</h2><ul><li>auto_ptr,share_ptr,weak_ptr，unique_ptr</li></ul><p>智能指针的作用是管理一个指针，因为存在以下这种情况：申请的空间在函数结束是忘记释放，造成内存泄漏。使用智能指针可以很大程度上避免这个问题。因为智能指针就是个类，超出了类的作用域，类会自动析构函数，析构函数就会自动释放资源。所有智能指针的就算自动释放内存。</p><h2 id="静态函数与虚函数的区别"><a href="#静态函数与虚函数的区别" class="headerlink" title="静态函数与虚函数的区别"></a>静态函数与虚函数的区别</h2><p>静态函数在编译的时候就已经缺德运行时机，虚函数在运行的时候动态绑定，调用回增加一次内存开销。</p><h2 id="重载-重写"><a href="#重载-重写" class="headerlink" title="重载 重写"></a>重载 重写</h2><ul><li>两个函数名一样，参数不一样</li><li>子类继承父类，父类种是虚函数</li></ul><h2 id="虚函数和多态"><a href="#虚函数和多态" class="headerlink" title="虚函数和多态"></a>虚函数和多态</h2><p>多态的实现分成静态多态和动态多态</p><ul><li>静态主要是重载，编译的时候已经确定</li><li>动态是用虚函数机制实现，在运行期间动态绑定。</li></ul><p>例子：一个父类类型的指针指向一个子类对象的时候，使用父类指针去调用子类种重写了的父类中的虚函数，会调用子类重写过后的函数在父类种声明为加了virtual关键子的函数，子类种重写时候不需要加virtual也是虚函数</p><p>虚函数的实现：在有虚函数的类中，类的最开始部分是一个虚函数表的指针，这个指针指向一个虚函数标，表中放了虚函数的地址，实际的虚函数在代码段种。当子类继承了父类的时候也会继承其虚函数表，当子类重写父类中的虚函数的时候，会将继承倒虚函数的地址替换为小红鞋写的函数地址，使用虚函数会增加访问内存开销，降低效率。</p><h2 id="new-delete-malloc-free-的区别"><a href="#new-delete-malloc-free-的区别" class="headerlink" title="new/delete malloc/free 的区别"></a>new/delete malloc/free 的区别</h2><p>后者必须指明申请内存空间大小，后者对于类，不会调用构造函数 和析构函数</p><h2 id="虚函数彪具体是怎么实现运行时多态的？"><a href="#虚函数彪具体是怎么实现运行时多态的？" class="headerlink" title="虚函数彪具体是怎么实现运行时多态的？"></a>虚函数彪具体是怎么实现运行时多态的？</h2><p>子类若重写父类虚函数，虚函数表中，函数地址会被替换，对于存在虚函数二点类的对象，在VS种，对象的对象模型的头部存放指向虚函数表的指针，通过该机制实现多态。</p><h2 id="C-如何处理内存泄漏？"><a href="#C-如何处理内存泄漏？" class="headerlink" title="C++如何处理内存泄漏？"></a>C++如何处理内存泄漏？</h2><p>varglind，mtrace</p><h2 id="C-11"><a href="#C-11" class="headerlink" title="C++ 11"></a>C++ 11</h2><h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><h2 id="进程与线程的概念"><a href="#进程与线程的概念" class="headerlink" title="进程与线程的概念"></a>进程与线程的概念</h2><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><ul><li>进程是对运行时程序的封装，是系统进行资源调度和分配的基本单位，实现了操作系统的并发</li></ul><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><ul><li>是进程的子任务，是CPU调度和分派的基本单位。用于保证程序的实时性，实现了进程内部的并发。</li><li>线程是操作系统可识别的最小执行和调度单位。每个线程都肚子占用一个虚拟处理器，独自的寄存器组，指令计数器和处理器状态。</li><li>每个线程完成不同的任务，但是共享同一地址空间的。（动态内存，映射文件，目标代码），打开的文件列表和其他内核资源</li></ul><h3 id="区别-1"><a href="#区别-1" class="headerlink" title="区别"></a>区别</h3><ul><li>一个线程只能属于一个进程，一个进程多个线程，依赖关系。</li><li>进程在执行过程中拥有独立的内存单元，而多个线程共享进程的内存。</li><li>资源分配给进程，同一个进程的所有线程共享该进程的所有资源。同一进程中</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;计算机网络&quot;&gt;&lt;a href=&quot;#计算机网络&quot; class=&quot;headerlink&quot; title=&quot;计算机网络&quot;&gt;&lt;/a&gt;计算机网络&lt;/h1&gt;&lt;h2 id=&quot;OSI&quot;&gt;&lt;a href=&quot;#OSI&quot; class=&quot;headerlink&quot; title=&quot;OSI&quot;&gt;&lt;/
      
    
    </summary>
    
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>AT4132 [ARC097C] Sorted and Sorted</title>
    <link href="http://yoursite.com/2020/12/06/ARC097C/"/>
    <id>http://yoursite.com/2020/12/06/ARC097C/</id>
    <published>2020-12-06T02:47:00.000Z</published>
    <updated>2020-12-06T04:09:12.203Z</updated>
    
    <content type="html"><![CDATA[<p>有 $2N$个球排成一列，其中有$N$个黑球与 $N$ 个白球。把 $1$ 到 $N$ 这 $N$个数字分别写到 $N$ 个黑球上；白球亦然。左起第 $i$ 个球上的写的数字是 $a_i$，颜色是 $c_i$。</p><p> $B$ 是黑球，为 $W$ 是白球。</p><p>定义一次操作为交换两个相邻的球。你需要求出最少的操作使得序列中</p><a id="more"></a><p>考虑一个数的交换次数就是他的逆序对，但是这里并没有确定比他小的数。无法直接计算可得</p><p>那么显然可以设$dp[i][j]$表示把前$i$个白球放好，前$j$个黑球，那么加入我放$i$这个白球，那么$i-1$个白球以及$j$个黑球就是比他小的，这样就可以计算出逆序对了。同理黑球也是。</p><ul><li>$i-1$个白球以及$j$个黑球就是比他小的可以预处理就解决了。</li></ul><details>  <summary>代码</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    vector&lt;pair&lt;char, int&gt;&gt; a(2 * n + 1);</span><br><span class="line">    vector&lt;int&gt; pw(n + 1), pb(n + 1);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i].first &gt;&gt; a[i].second;</span><br><span class="line">        <span class="keyword">if</span> (a[i].first == <span class="string">'W'</span>)</span><br><span class="line">            pw[a[i].second] = i;</span><br><span class="line">        <span class="keyword">if</span> (a[i].first == <span class="string">'B'</span>)</span><br><span class="line">            pb[a[i].second] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">cw</span><span class="params">(<span class="number">2</span> * n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n + <span class="number">1</span>))</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">cb</span><span class="params">(<span class="number">2</span> * n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n + <span class="number">1</span>))</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cw[i][j] = cw[i - <span class="number">1</span>][j] + (a[i - <span class="number">1</span>].second &gt; j &amp;&amp; a[i - <span class="number">1</span>].first == <span class="string">'W'</span>);</span><br><span class="line">            cb[i][j] = cb[i - <span class="number">1</span>][j] + (a[i - <span class="number">1</span>].second &gt; j &amp;&amp; a[i - <span class="number">1</span>].first == <span class="string">'B'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n + <span class="number">1</span>, <span class="number">1e9</span>))</span></span>;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = pw[i], y = pb[j];</span><br><span class="line">            <span class="keyword">if</span> (i)</span><br><span class="line">                dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i - <span class="number">1</span>][j] + cw[x][i] + cb[x][j]);</span><br><span class="line">            <span class="keyword">if</span> (j)</span><br><span class="line">                dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i][j - <span class="number">1</span>] + cw[y][i] + cb[y][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[n][n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有 $2N$个球排成一列，其中有$N$个黑球与 $N$ 个白球。把 $1$ 到 $N$ 这 $N$个数字分别写到 $N$ 个黑球上；白球亦然。左起第 $i$ 个球上的写的数字是 $a_i$，颜色是 $c_i$。&lt;/p&gt;
&lt;p&gt; $B$ 是黑球，为 $W$ 是白球。&lt;/p&gt;
&lt;p&gt;定义一次操作为交换两个相邻的球。你需要求出最少的操作使得序列中&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="dp" scheme="http://yoursite.com/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>CF603E - Pastoral Oddities</title>
    <link href="http://yoursite.com/2020/12/06/CF603E/"/>
    <id>http://yoursite.com/2020/12/06/CF603E/</id>
    <published>2020-12-06T02:47:00.000Z</published>
    <updated>2020-12-06T04:09:11.847Z</updated>
    
    <content type="html"><![CDATA[<ul><li>给定一张 $n$个点的无向图，初始没有边。</li><li>依次加入$m$条带权的边，每次加入后询问是否存在一个边集，满足每个点的度数均为奇数。</li><li>若存在，则还需要最小化边集中的最大边权。</li><li>$n \le 10^5,m\leq 3\times 10^5 $</li></ul><a id="more"></a><p>考虑静态图，显然首先满足联通块点数为偶数。</p><p>考虑当前图也必须联通块是偶数点，（因为去边之后分裂成联通也要满足偶数点)。</p><p>最小化边集中的最大边权，考虑维护最小生成树。</p><p>如果纯静态，我们可以从叶子节点类似递推选择尽量少的边。这样显然是可以有解.</p><p>但是这个时候我们仍然没有选出最优解。</p><p>瞎$JB$乱画发现，删掉的边都是分裂成$奇+奇$的，我们不断地尝试删除当前森林中边权最大的边，联通块就会分裂，如果产生分裂成$奇+奇$，表示这个边不能删，这里的操作用大根堆以及懒惰记号表示。</p><p>然后用$LCT$子树维护一下奇数的联通块有多少。</p><details>  <summary>代码</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v, w;</span><br><span class="line">    Edge()&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LCT</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls son[pos][0]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs son[pos][1]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> fa[N], root, tcnt;</span><br><span class="line">    <span class="keyword">int</span> son[N][<span class="number">2</span>];</span><br><span class="line">    pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mx[N], val[N];</span><br><span class="line">    <span class="keyword">int</span> exsiz[N], si[N], siz[N];</span><br><span class="line">    <span class="keyword">int</span> rev[N];</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        mx[pos] = <span class="built_in">max</span>(val[pos], <span class="built_in">max</span>(mx[ls], mx[rs]));</span><br><span class="line">        siz[pos] = siz[ls] + siz[rs] + exsiz[pos] + si[pos];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isroot</span><span class="params">(<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pos != son[fa[pos]][<span class="number">0</span>] &amp;&amp; pos != son[fa[pos]][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addrev</span><span class="params">(<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        rev[pos] ^= <span class="number">1</span>;</span><br><span class="line">        swap(son[pos][<span class="number">0</span>], son[pos][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rev[pos])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (son[pos][<span class="number">1</span>])</span><br><span class="line">                addrev(son[pos][<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span> (son[pos][<span class="number">0</span>])</span><br><span class="line">                addrev(son[pos][<span class="number">0</span>]);</span><br><span class="line">            rev[pos] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isson</span><span class="params">(<span class="keyword">int</span> pos)</span> </span>&#123; <span class="keyword">return</span> pos == son[fa[pos]][<span class="number">1</span>]; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">conect</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> d, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        son[x][d] = y;</span><br><span class="line">        fa[y] = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rorate</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> y = fa[x], z = fa[y], dx = isson(x), dy = isson(y);</span><br><span class="line"></span><br><span class="line">        fa[x] = z;</span><br><span class="line">        <span class="keyword">if</span> (!isroot(y))</span><br><span class="line">            son[z][dy] = x;</span><br><span class="line">        <span class="comment">//conect(z, dy, x);</span></span><br><span class="line">        conect(y, dx, son[x][dx ^ <span class="number">1</span>]);</span><br><span class="line">        conect(x, dx ^ <span class="number">1</span>, y);</span><br><span class="line">        pushup(y), pushup(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> st[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> top;</span><br><span class="line">        st[top = <span class="number">1</span>] = x;</span><br><span class="line">        <span class="keyword">int</span> u = x;</span><br><span class="line">        <span class="keyword">while</span> (!isroot(u))</span><br><span class="line">            u = fa[u], st[++top] = u;</span><br><span class="line">        <span class="keyword">while</span> (top)</span><br><span class="line">            pushdown(st[top--]);</span><br><span class="line">        <span class="keyword">while</span> (!isroot(x))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> y = fa[x];</span><br><span class="line">            <span class="keyword">if</span> (isroot(y))</span><br><span class="line">            &#123;</span><br><span class="line">                rorate(x);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (isson(x) == isson(y))</span><br><span class="line">                rorate(y), rorate(x);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                rorate(x), rorate(x);</span><br><span class="line">        &#125;</span><br><span class="line">        pushup(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; x; i = x, x = fa[x])</span><br><span class="line">        &#123;</span><br><span class="line">            splay(x), exsiz[x] -= siz[i], exsiz[x] += siz[son[x][<span class="number">1</span>]], son[x][<span class="number">1</span>] = i, pushup(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeroot</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        access(x), splay(x), addrev(x); <span class="comment">// access 之后将没有右子树。然后把x变成根，把下面都翻转，这样x就是最小的元素了。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findroot</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        access(x), splay(x);</span><br><span class="line">        <span class="keyword">while</span> (son[x][<span class="number">0</span>])</span><br><span class="line">            pushdown(x), x = son[x][<span class="number">0</span>];</span><br><span class="line">        splay(x);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        makeroot(x);</span><br><span class="line">        access(y);</span><br><span class="line">        splay(y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        split(x, y);</span><br><span class="line">        cnt -= siz[x] &amp; <span class="number">1</span>;</span><br><span class="line">        cnt -= siz[y] &amp; <span class="number">1</span>;</span><br><span class="line">        fa[x] = y;</span><br><span class="line">        exsiz[y] += siz[x];</span><br><span class="line">        pushup(y);</span><br><span class="line">        cnt += siz[y] &amp; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        split(x, y);</span><br><span class="line">        fa[x] = <span class="number">0</span>;</span><br><span class="line">        son[y][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        cnt -= siz[y] &amp; <span class="number">1</span>;</span><br><span class="line">        pushup(y);</span><br><span class="line">        cnt += siz[x] &amp; <span class="number">1</span>;</span><br><span class="line">        cnt += siz[y] &amp; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="built_in">vector</span>&lt;Edge&gt; tmp)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            si[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">            val[i + n] = mx[i + n] = &#123;tmp[i].w, i&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="built_in">vector</span>&lt;Edge&gt; tmp)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cnt = n;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">vis</span><span class="params">(m + <span class="number">1</span>)</span></span>;</span><br><span class="line">        priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">        <span class="keyword">auto</span> add = [&amp;](<span class="keyword">int</span> i) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = tmp[i].u, v = tmp[i].v, w = tmp[i].w;</span><br><span class="line">            <span class="keyword">bool</span> flag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (findroot(u) == findroot(v))</span><br><span class="line">            &#123;</span><br><span class="line">                split(u, v);</span><br><span class="line">                <span class="keyword">auto</span> o = mx[v];</span><br><span class="line">                <span class="keyword">if</span> (o.first &gt; w)</span><br><span class="line">                &#123;</span><br><span class="line">                    cut(n + o.second, tmp[o.second].u);</span><br><span class="line">                    cut(n + o.second, tmp[o.second].v);</span><br><span class="line">                    vis[o.second] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    flag = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag)</span><br><span class="line">            &#123;</span><br><span class="line">                link(i + n, u), link(i + n, v);</span><br><span class="line">                q.push(&#123;tmp[i].w, i&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//  cout &lt;&lt; cnt &lt;&lt; "!!!" &lt;&lt; endl;</span></span><br><span class="line">            <span class="keyword">if</span> (cnt)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> o = q.top().second;</span><br><span class="line">                q.pop();</span><br><span class="line">                <span class="keyword">if</span> (vis[o])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                cut(tmp[o].u, o + n);</span><br><span class="line">                cut(tmp[o].v, o + n);</span><br><span class="line">                <span class="comment">// cout &lt;&lt; o &lt;&lt; " " &lt;&lt; cnt &lt;&lt; endl;</span></span><br><span class="line">                <span class="keyword">if</span> (cnt)</span><br><span class="line">                &#123;</span><br><span class="line">                    link(tmp[o].u, o + n), link(tmp[o].v, o + n);</span><br><span class="line">                    q.push(&#123;tmp[o].w, o&#125;);</span><br><span class="line">                    <span class="keyword">return</span> tmp[o].w;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; add(i) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;Edge&gt; <span class="title">e</span><span class="params">(m + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; e[i].u &gt;&gt; e[i].v &gt;&gt; e[i].w;</span><br><span class="line">    t.init(n, m, e);</span><br><span class="line">    t.solve(n, m, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </details>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;给定一张 $n$个点的无向图，初始没有边。&lt;/li&gt;
&lt;li&gt;依次加入$m$条带权的边，每次加入后询问是否存在一个边集，满足每个点的度数均为奇数。&lt;/li&gt;
&lt;li&gt;若存在，则还需要最小化边集中的最大边权。&lt;/li&gt;
&lt;li&gt;$n \le 10^5,m\leq 3\times 10^5 $&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="LCT" scheme="http://yoursite.com/tags/LCT/"/>
    
  </entry>
  
  <entry>
    <title>CF1139D Steps to One</title>
    <link href="http://yoursite.com/2020/11/25/CF1139D/"/>
    <id>http://yoursite.com/2020/11/25/CF1139D/</id>
    <published>2020-11-25T02:47:00.000Z</published>
    <updated>2020-12-06T05:33:04.903Z</updated>
    
    <content type="html"><![CDATA[<p>给一个数列，每次随机选一个 $1$ 到 $m$之间的数加在数列末尾，数列中所有数的 $\gcd=1$ 时停止，求期望长度。</p><a id="more"></a><p>可以先把第一个加的数字确定。</p><p>$f[i]$表示从当前$\gcd=i$,变到$1$需要的期望步数。<br>$f[1]=0$</p><p>$f[i]=1+\frac{f[\gcd(i,j)]}{m}$</p><script type="math/tex; mode=display">   mf[i]=m+\sum_{x|i}f(x)\sum_{j=1}^m [\gcd(i,j)=x]\\    mf[i]=m+\sum_{x|i}f(x)\sum_{j=1}^m [\gcd(i,j)=x]\\     mf[i]=m+\sum_{x|i}f(x)\sum_{j=1}^{\frac{m}{i}} [\gcd(\frac{i}{x},j)=1]\\     mf[i]=m+\sum_{x|i}f(x)\sum_{d|\frac{i}{x}} \mu(d)\frac{m}{id}\\     (m-\frac{m}{i})f[i]=m+\sum_{x|i}f(x)\sum_{d|\frac{i}{x}} \mu(d)\frac{m}{id}[i \not=x]\\</script><p>分析下复杂度$\sum_{i=1}^m\sum_{j=1}^{\frac{m}{i}}D(j)=\sum_{i=1}^m\sum_{d=1}^{\frac{m}{i}}\frac{\frac{m}{i}}{d}=\sum_{i=1}^m\frac{m}{i}\log m=O(m\log^2 m)$</p><details>  <summary>代码</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inc</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> (x + y &gt;= mod) ? (x + y - mod) : (x + y); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> (x - y &lt; <span class="number">0</span>) ? (x - y + mod) : (x - y); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> x, <span class="keyword">int</span> mo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &amp; <span class="number">1</span>)</span><br><span class="line">            res = <span class="number">1l</span>l * a * res % mo;</span><br><span class="line">        a = <span class="number">1l</span>l * a * a % mo;</span><br><span class="line">        x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pcnt, pr[N], npr[N];</span><br><span class="line"><span class="keyword">int</span> mu[N], usum[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Prime_init</span><span class="params">(<span class="keyword">int</span> X)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    npr[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= X; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!npr[i])</span><br><span class="line">            pr[++pcnt] = i, mu[i] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= pcnt &amp;&amp; pr[j] * i &lt;= X; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            npr[pr[j] * i] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i % pr[j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                mu[pr[j] * i] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                mu[pr[j] * i] = mu[i] * (<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">g</span><span class="params">(m + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= m; j += i)</span><br><span class="line">            g[j].push_back(i);</span><br><span class="line">    Prime_init(m);</span><br><span class="line">    <span class="keyword">auto</span> calc = [&amp;](<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> d : g[b])</span><br><span class="line">        &#123;</span><br><span class="line">            res += mu[d] * (a / d);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; a &lt;&lt; " " &lt;&lt; b &lt;&lt; " " &lt;&lt; res &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">z</span><span class="params">(m + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j; i &lt;= m; i = j + <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        j = m / (m / i);</span><br><span class="line">        z[m / i].resize(m / i + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= m / i; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            z[m / i][k] = calc(m / i, k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">f</span><span class="params">(m + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> d : g[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (d == i)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            res = inc(res, <span class="number">1l</span>l * f[d] * z[m / d][i / d] % mod);</span><br><span class="line">        &#125;</span><br><span class="line">        f[i] = <span class="number">1l</span>l * (res + m) * qpow(m - m / i, mod - <span class="number">2</span>, mod) % mod;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; f[i] &lt;&lt; endl;</span></span><br><span class="line">        ans = inc(ans, f[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">1l</span>l * (ans + m) * qpow(m, mod - <span class="number">2</span>, mod) % mod &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给一个数列，每次随机选一个 $1$ 到 $m$之间的数加在数列末尾，数列中所有数的 $\gcd=1$ 时停止，求期望长度。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="莫比乌斯反演" scheme="http://yoursite.com/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
  </entry>
  
  <entry>
    <title>CF702F T-Shirts</title>
    <link href="http://yoursite.com/2020/11/20/CF702F/"/>
    <id>http://yoursite.com/2020/11/20/CF702F/</id>
    <published>2020-11-20T02:47:00.000Z</published>
    <updated>2020-12-06T04:55:28.332Z</updated>
    
    <content type="html"><![CDATA[<p>有 $n$ 种T恤，每种有价格 $c_i$和品质 $q_i$ 。</p><p>有 $m$ 个人要买 $T$ 恤，第 $i$ 个人有$v_i$元，每人每次都会买一件能买得起的 $q_i$最大的$T$恤。一个人只能买一种T恤一件，所有人之间都是独立的。</p><p>问最后每个人买了多少件 $T$ 恤？如果有多个 $q_i$ 最大的T恤，会从价格低的开始买。</p><a id="more"></a><p>考虑朴素暴力枚举人$O(nm)$无法优化。</p><p>考虑枚举衣服，先按品质排序，然后再价格为第二关键字。朴素考虑将所有$v_i\geq c_i$都$+1$，并且$v_i=v_i-c$。</p><p>这种区间修改就想到了$FHQ$,考虑$v_i&gt;2c$的只要打上标记就好，相对位置不会变，即在平衡树上位置不会变，但是考虑$c\leq v_i\leq 2c$,要改变，这里可以暴力。</p><ul><li>$c\leq v_i\leq 2c$,$nv_i\leq v_i/2$。对于一个价格来说最多暴力改变$\log n$</li></ul><p>最后复杂度就可$O(n\log^2n)$</p><details>  <summary>代码</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)</span><br><span class="line">        x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">std</span>::mt19937 <span class="title">rnd</span><span class="params">(<span class="built_in">std</span>::chrono::steady_clock::now().time_since_epoch().count())</span></span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FHQ</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ls[N], rs[N], siz[N], key[N], val[N];</span><br><span class="line">    <span class="keyword">int</span> sum[N];</span><br><span class="line">    <span class="keyword">int</span> tag[N];</span><br><span class="line">    <span class="keyword">int</span> de[N];</span><br><span class="line">    <span class="keyword">int</span> id[N];</span><br><span class="line">    <span class="keyword">int</span> tcnt;</span><br><span class="line">    <span class="keyword">int</span> root;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Newnode</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        siz[++tcnt] = <span class="number">1</span>;</span><br><span class="line">        val[tcnt] = x;</span><br><span class="line">        id[tcnt] = i;</span><br><span class="line">        key[tcnt] = rnd(); <span class="comment">//精髓所在</span></span><br><span class="line">        ls[tcnt] = rs[tcnt] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> tcnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addtag</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> w, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sum[pos] += w;</span><br><span class="line">        tag[pos] += w;</span><br><span class="line">        val[pos] -= c;</span><br><span class="line">        de[pos] += c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tag[pos])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (ls[pos])</span><br><span class="line">                addtag(ls[pos], tag[pos], <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (rs[pos])</span><br><span class="line">                addtag(rs[pos], tag[pos], <span class="number">0</span>);</span><br><span class="line">            tag[pos] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (de[pos])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (ls[pos])</span><br><span class="line">                addtag(ls[pos], <span class="number">0</span>, de[pos]);</span><br><span class="line">            <span class="keyword">if</span> (rs[pos])</span><br><span class="line">                addtag(rs[pos], <span class="number">0</span>, de[pos]);</span><br><span class="line">            de[pos] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//siz[pos] = siz[ls[pos]] + siz[rs[pos]] + 1;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> v, <span class="keyword">int</span> &amp;ll, <span class="keyword">int</span> &amp;rr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!pos)</span><br><span class="line">        &#123;</span><br><span class="line">            ll = <span class="number">0</span>, rr = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pushdown(pos);</span><br><span class="line">        <span class="keyword">if</span> (val[pos] &lt;= v)</span><br><span class="line">        &#123;</span><br><span class="line">            ll = pos;</span><br><span class="line">            split(rs[pos], v, rs[pos], rr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            rr = pos;</span><br><span class="line">            split(ls[pos], v, ll, ls[pos]);</span><br><span class="line">        &#125;</span><br><span class="line">        pushup(pos);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!l || !r)</span><br><span class="line">            <span class="keyword">return</span> l + r;</span><br><span class="line">        pushdown(l), pushdown(r);</span><br><span class="line">        ;</span><br><span class="line">        <span class="keyword">if</span> (key[l] &lt; key[r])</span><br><span class="line">        &#123;</span><br><span class="line">            rs[l] = merge(rs[l], r);</span><br><span class="line">            pushup(l);</span><br><span class="line">            <span class="keyword">return</span> l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ls[r] = merge(l, ls[r]);</span><br><span class="line">            pushup(r);</span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = Newnode(v, i);</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line"></span><br><span class="line">        split(root, v, x, y);</span><br><span class="line"></span><br><span class="line">        root = merge(merge(x, tmp), y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> _insert(<span class="keyword">int</span> &amp;rt, <span class="keyword">int</span> pos)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line"></span><br><span class="line">        split(rt, val[pos], x, y);</span><br><span class="line"></span><br><span class="line">        rt = merge(merge(x, pos), y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delet</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x, y, z, tmp;</span><br><span class="line">        split(root, v, x, z);</span><br><span class="line">        split(tmp = x, v - <span class="number">1</span>, x, y);</span><br><span class="line">        root = merge(merge(x, merge(ls[y], rs[y])), z);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; t;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> c, q;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pos)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    tmp.push_back(pos);</span><br><span class="line">    t.pushdown(pos);</span><br><span class="line">    dfs(t.ls[pos]);</span><br><span class="line">    dfs(t.rs[pos]);</span><br><span class="line">    t.ls[pos] = <span class="number">0</span>;</span><br><span class="line">    t.rs[pos] = <span class="number">0</span>;</span><br><span class="line">    t.key[pos] = rnd();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">read</span>();</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;node&gt; <span class="title">p</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p[i].c = <span class="built_in">read</span>(), p[i].q = <span class="built_in">read</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        t.insert(<span class="built_in">read</span>(), i);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), [](node a, node b) &#123; <span class="keyword">return</span> a.q == b.q ? a.c &lt; b.c : a.q &gt; b.q; &#125;);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> now : p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x, y, z;</span><br><span class="line">        <span class="keyword">int</span> c = now.c;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; t.val[1] &lt;&lt; endl;</span></span><br><span class="line">        t.split(t.root, c - <span class="number">1</span>, x, y);</span><br><span class="line">        t.split(y, <span class="number">2</span> * c, y, z);</span><br><span class="line">        t.addtag(z, <span class="number">1</span>, c);</span><br><span class="line">        t.addtag(y, <span class="number">1</span>, c);</span><br><span class="line">        tmp.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="comment">//cout &lt;&lt; c &lt;&lt; " " &lt;&lt; y &lt;&lt; endl;</span></span><br><span class="line">        dfs(y);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : tmp)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; t.val[i] &lt;&lt; " " &lt;&lt; i &lt;&lt; " " &lt;&lt; x &lt;&lt; endl;</span></span><br><span class="line">            t._insert(x, i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        t.root = t.merge(x, z);</span><br><span class="line">    &#125;</span><br><span class="line">    tmp.<span class="built_in">clear</span>();</span><br><span class="line">    dfs(t.root);</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">ans</span><span class="params">(m + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i : tmp)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[t.id[i]] = t.sum[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, ans[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有 $n$ 种T恤，每种有价格 $c_i$和品质 $q_i$ 。&lt;/p&gt;
&lt;p&gt;有 $m$ 个人要买 $T$ 恤，第 $i$ 个人有$v_i$元，每人每次都会买一件能买得起的 $q_i$最大的$T$恤。一个人只能买一种T恤一件，所有人之间都是独立的。&lt;/p&gt;
&lt;p&gt;问最后每个人买了多少件 $T$ 恤？如果有多个 $q_i$ 最大的T恤，会从价格低的开始买。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="平衡树" scheme="http://yoursite.com/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>SP11470 TTM - To the moon</title>
    <link href="http://yoursite.com/2020/11/01/SP11470/"/>
    <id>http://yoursite.com/2020/11/01/SP11470/</id>
    <published>2020-11-01T02:47:00.000Z</published>
    <updated>2020-11-04T05:10:09.187Z</updated>
    
    <content type="html"><![CDATA[<p>可持续化线段树的区间加减。</p><a id="more"></a><p>如果用<strong>lazy</strong>标记的化，发现两个版本的线段树共用的节点不能修改值。</p><p>这时候标记永久化就上场了。</p><p>标记永久化既不需要下传标记，也不需要通过子节点更新自己。</p><ul><li>对于更新，更新一路上的<strong>值</strong>。然后在最底层完全覆盖的节点上打上标记。</li><li>对于查询，更新一路的<strong>标记</strong>,最后加上最底层的值。</li></ul><p>注意多思考细节就好了。</p><details>  <summary>代码</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SustainedTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> scnt;</span><br><span class="line">    ll sum[N &lt;&lt; <span class="number">5</span>], tag[N &lt;&lt; <span class="number">5</span>];</span><br><span class="line">    <span class="keyword">int</span> ls[N &lt;&lt; <span class="number">5</span>], rs[N &lt;&lt; <span class="number">5</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        pos = ++scnt;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">        &#123;</span><br><span class="line">            sum[pos] = a[l];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(ls[pos], l, mid), build(rs[pos], mid + <span class="number">1</span>, r);</span><br><span class="line">        sum[pos] = sum[ls[pos]] + sum[rs[pos]];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;pos, <span class="keyword">int</span> pre, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> v, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        pos = ++scnt;</span><br><span class="line">        sum[pos] = sum[pre], tag[pos] = tag[pre], ls[pos] = ls[pre], rs[pos] = rs[pre];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr)</span><br><span class="line">        &#123;</span><br><span class="line">            tag[pos] += v;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sum[pos] += <span class="number">1l</span>l * v * (<span class="built_in">min</span>(qr, r) - <span class="built_in">max</span>(ql, l) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= mid)</span><br><span class="line">            update(ls[pos], ls[pre], ql, qr, v, l, mid);</span><br><span class="line">        <span class="keyword">if</span> (qr &gt; mid)</span><br><span class="line">            update(rs[pos], rs[pre], ql, qr, v, mid + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> l, <span class="keyword">int</span> r, ll &amp;res)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        res += <span class="number">1l</span>l * tag[pos] * (<span class="built_in">min</span>(qr, r) - <span class="built_in">max</span>(ql, l) + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            res += sum[pos];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= mid)</span><br><span class="line">            query(ls[pos], ql, qr, l, mid, res);</span><br><span class="line">        <span class="keyword">if</span> (qr &gt; mid)</span><br><span class="line">            query(rs[pos], ql, qr, mid + <span class="number">1</span>, r, res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)</span><br><span class="line">        x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rt[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">read</span>(), m = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        a[i] = <span class="built_in">read</span>();</span><br><span class="line">    t.build(rt[<span class="number">0</span>], <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> s[<span class="number">5</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'B'</span>)</span><br><span class="line">            now = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'C'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> l = <span class="built_in">read</span>(), r = <span class="built_in">read</span>(), d = <span class="built_in">read</span>();</span><br><span class="line">            t.update(rt[now + <span class="number">1</span>], rt[now], l, r, d, <span class="number">1</span>, n);</span><br><span class="line">            now++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'Q'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> l = <span class="built_in">read</span>(), r = <span class="built_in">read</span>();</span><br><span class="line">            ll res = <span class="number">0</span>;</span><br><span class="line">            t.query(rt[now], l, r, <span class="number">1</span>, n, res);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'H'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> l = <span class="built_in">read</span>(), r = <span class="built_in">read</span>(), z = <span class="built_in">read</span>();</span><br><span class="line">            ll res = <span class="number">0</span>;</span><br><span class="line">            t.query(rt[z], l, r, <span class="number">1</span>, n, res);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;可持续化线段树的区间加减。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="标记永久化" scheme="http://yoursite.com/tags/%E6%A0%87%E8%AE%B0%E6%B0%B8%E4%B9%85%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>CF1430F Realistic Gameplay</title>
    <link href="http://yoursite.com/2020/10/31/CF1430F/"/>
    <id>http://yoursite.com/2020/10/31/CF1430F/</id>
    <published>2020-10-31T02:47:00.000Z</published>
    <updated>2020-11-04T05:54:53.851Z</updated>
    
    <content type="html"><![CDATA[<p>有$n$波怪物，你有一把枪，枪的弹夹量为$k$，第$i,[l_i,r_i]$波怪物数量为$a_i$，使用子弹不费时间，但是你每次换弹都需要将弹夹（包括里面的子弹）扔掉，在尽量保证通关的情况下，需要的最多的子弹数为多少。</p><a id="more"></a><p>有几点需要明确:</p><ul><li>如果怪物之间有多出的时间，那么我可以选择换弹来达到最优的状态。</li><li>对于一波怪物你最多可以打出=$起始子弹+k(r[i]-l[i])$。</li><li>最优一定是一次不换弹，我们只需要减少换弹次数即可。</li><li>因为后面如果特别紧，这个时候就必须换，这样也可让后面更轻松。</li></ul><p>我们就可以预处理出每波进场需要的最少的子弹。考虑连在一起的怪物波，直接从后往前$dp$即可。(把后一次需要的子弹当成多出的怪物)。</p><p>然后就是贪心的要换子弹，就可以换子弹。</p><ul><li>当我带着$tmp$子弹进场。在我不浪费子弹并且可以杀完所有怪物的情况下，我最后剩余的子弹应该是$(k - (a[i] - tmp) \mod k) \mod k$</li></ul><p>然后贪心的模拟一遍即可。（连续部分可以选择合并起来模拟，也可以不合并）</p><details>  <summary>代码</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)</span><br><span class="line">        x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">read</span>(), k = <span class="built_in">read</span>();</span><br><span class="line">    vector&lt;ll&gt; l(n + 1), r(n + 1), a(n + 1), f(n + 1);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        l[i] = <span class="built_in">read</span>(), r[i] = <span class="built_in">read</span>(), a[i] = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (r[i] == l[i + <span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            f[i] = <span class="built_in">max</span>(<span class="number">0l</span>l, f[i + <span class="number">1</span>] + a[i] - (r[i] - l[i]) * k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            f[i] = <span class="built_in">max</span>(<span class="number">0l</span>l, a[i] - (r[i] - l[i]) * k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (f[i] &gt; k)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ll tmp = k, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans += a[i];</span><br><span class="line">        <span class="keyword">if</span> (f[i] &gt; tmp)</span><br><span class="line">        &#123;</span><br><span class="line">            ans += tmp;</span><br><span class="line">            tmp = k;</span><br><span class="line">        &#125;</span><br><span class="line">        tmp = (k - (a[i] - tmp) % k) % k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有$n$波怪物，你有一把枪，枪的弹夹量为$k$，第$i,[l_i,r_i]$波怪物数量为$a_i$，使用子弹不费时间，但是你每次换弹都需要将弹夹（包括里面的子弹）扔掉，在尽量保证通关的情况下，需要的最多的子弹数为多少。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="思维" scheme="http://yoursite.com/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>2019 ICPC南昌 J.Summon</title>
    <link href="http://yoursite.com/2020/10/30/ICPCNCJ/"/>
    <id>http://yoursite.com/2020/10/30/ICPCNCJ/</id>
    <published>2020-10-30T02:47:00.000Z</published>
    <updated>2020-11-04T05:21:54.709Z</updated>
    
    <content type="html"><![CDATA[<p>在环上涂颜色，不能出现给定颜色的顺时针顺序。（长度为=4)。<br><a id="more"></a></p><script type="math/tex; mode=display">\frac{1}{|G|}\sum_{f\in G}m^{m(f)}</script><p>变换一下就是</p><script type="math/tex; mode=display">    \frac{1}{n}\sum_{d|n}\phi(\frac{n}{d})f(d)</script><p>然后$f(d)$就表示，长度$d$的环符合 要求有几个（不用考虑选择）<br>刚开始觉得这题，用快速幂挺炫酷的，发现就是套路。转化成从某个状态走$d$步到某个状态的步数种类。</p><p>跟$POJ2888$一摸一样。</p><p>变成四进制。然后矩阵快速幂没了。</p><ul><li>注意预处理可以转移的进制。</li><li>常数优化。</li></ul><details>  <summary>代码</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Z = <span class="number">64</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> row, col;</span><br><span class="line">    <span class="keyword">int</span> s[Z][Z];</span><br><span class="line">    Matrix()</span><br><span class="line">    &#123; <span class="comment">//无参数构造函数</span></span><br><span class="line">        row = col = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> x = <span class="number">0</span>) : row(n), col(m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">                s[i][j] = x;</span><br><span class="line">    &#125; <span class="comment">//重载构造函数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printp</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">//输出一个矩阵</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j++)</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; s[i][j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// void transpose()</span></span><br><span class="line">    <span class="comment">// &#123; //矩阵的转置</span></span><br><span class="line">    <span class="comment">//     Matrix y(col, row);</span></span><br><span class="line">    <span class="comment">//     for (int i = 1; i &lt;= row; i++)</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         for (int j = 1; j &lt;= col; j++)</span></span><br><span class="line">    <span class="comment">//             y.s[j][i] = s[i][j];</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//     *this = y;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">identity</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">//将该矩阵改成单位矩阵</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">            s[i][i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Matrix operator+(Matrix x)</span></span><br><span class="line">    <span class="comment">// &#123; //重载+</span></span><br><span class="line">    <span class="comment">//     Matrix y(row, col);</span></span><br><span class="line">    <span class="comment">//     for (int i = 0; i &lt;row; i++)</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         for (int j = 0; j &lt; col; j++)</span></span><br><span class="line">    <span class="comment">//             y.s[i][j] += s[i][j] + x.s[i][j], y.s[i][j] %= mod;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//     return y;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    Matrix <span class="keyword">operator</span>*(Matrix x)</span><br><span class="line">    &#123; <span class="comment">//重载*</span></span><br><span class="line">        <span class="function">Matrix <span class="title">y</span><span class="params">(row, x.col)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; x.col; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; col; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!s[i][k] || !x.s[k][j])</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    y.s[i][j] = (y.s[i][j] + <span class="number">1l</span>l * s[i][k] * x.s[k][j] % mod) % mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span>*=(Matrix x)</span><br><span class="line">    &#123; <span class="comment">//重载*=</span></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> = *<span class="keyword">this</span> * x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; z[<span class="number">40</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> x, <span class="keyword">int</span> mo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &amp; <span class="number">1</span>)</span><br><span class="line">            res = <span class="number">1l</span>l * res * a % mod;</span><br><span class="line">        a = <span class="number">1l</span>l * a * a % mod;</span><br><span class="line">        x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Matrix <span class="title">res</span><span class="params">(z[<span class="number">0</span>].row, z[<span class="number">0</span>].col)</span></span>;</span><br><span class="line">    res.identity();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; (<span class="number">1</span> &lt;&lt; i) &lt;= x; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="number">1</span> &lt;&lt; i) &amp; x)</span><br><span class="line">        &#123;</span><br><span class="line">            res = res * z[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Polya</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">mult</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1l</span>l * x * y % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//  dt.printp();</span></span><br><span class="line">        Matrix res = qpow(x);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++)</span><br><span class="line">            ans = (ans + res.s[i][i]) % mod;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> p[N], e[N];</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> now, <span class="keyword">int</span> phi, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; cnt)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = (ans + mult(phi % mod, calc(n / now))) % mod;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(x + <span class="number">1</span>, now, phi, n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= e[x]; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            phi *= (p[x] - (i == <span class="number">1</span>));</span><br><span class="line">            now *= p[x];</span><br><span class="line">            dfs(x + <span class="number">1</span>, now, phi, n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> tmp = n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                p[++cnt] = i;</span><br><span class="line">                e[cnt] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (n % i == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    n /= i;</span><br><span class="line">                    e[cnt]++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span> (n &gt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            p[++cnt] = n;</span><br><span class="line">            e[cnt] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, tmp);</span><br><span class="line">        <span class="comment">//cout &lt;&lt; ans &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1l</span>l * ans * qpow(tmp % mod, mod - <span class="number">2</span>, mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// namespace Polya</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)</span><br><span class="line">        x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">read</span>(), m = <span class="built_in">read</span>();</span><br><span class="line">    <span class="function">Matrix <span class="title">tmp</span><span class="params">(<span class="number">64</span>, <span class="number">64</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">64</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (((j &lt;&lt; <span class="number">2</span>) &amp; <span class="number">63</span>) == ((i &gt;&gt; <span class="number">2</span>) &lt;&lt; <span class="number">2</span>))</span><br><span class="line">                tmp.s[i][j] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            a[j] = <span class="built_in">read</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        tmp.s[a[<span class="number">0</span>] + (a[<span class="number">1</span>] &lt;&lt; <span class="number">2</span>) + (a[<span class="number">2</span>] &lt;&lt; <span class="number">4</span>)][a[<span class="number">1</span>] + (a[<span class="number">2</span>] &lt;&lt; <span class="number">2</span>) + (a[<span class="number">3</span>] &lt;&lt; <span class="number">4</span>)] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    z[<span class="number">0</span>] = tmp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; i) &lt;= n; i++)</span><br><span class="line">        z[i] = z[i - <span class="number">1</span>] * z[i - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; Polya::solve(n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在环上涂颜色，不能出现给定颜色的顺时针顺序。（长度为=4)。&lt;br&gt;
    
    </summary>
    
    
    
      <category term="置换群" scheme="http://yoursite.com/tags/%E7%BD%AE%E6%8D%A2%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>P3307 [SDOI2013]项链</title>
    <link href="http://yoursite.com/2020/10/30/P3307/"/>
    <id>http://yoursite.com/2020/10/30/P3307/</id>
    <published>2020-10-30T02:47:00.000Z</published>
    <updated>2020-11-04T05:10:09.563Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>珠子=正三菱柱,三个面上面的数字$x$,必须满足$x\in [1,a]$，且珠子上面的数字的最大公约数要恰好为1。三棱柱可以选择翻转.</p></li><li><p>相邻的两个珠子必须不同。</p></li><li><p>两串项链如果能够经过旋转变成一样的，那么这两串项链就是相同的</p></li></ul><p>$n&lt;=10^{14}，a&lt;=10^7，T&lt;=10$<br><a id="more"></a></p><p>好题！</p><p>首先算珠子种类，$s3$表示$3$个$\gcd=1$的个数，同理$s2,s1$。</p><p>$Burnside引理$</p><script type="math/tex; mode=display">    res=\frac{1}{3+3}(s3+3s2+2s1)</script><hr><p>然后之后$Polya$里的$m=res$</p><script type="math/tex; mode=display"> \frac{1}{n}\sum_{d|n}\varphi(\frac{n}{d})f(d)</script><p>这里矩阵快速幂就太大了。</p><ul><li><p>如果$i-1$与$1$不同则$f(i)=f(i-1)(m-2)$</p></li><li><p>如果$i-1$与$1$相同则$i-2$与$1$不同。 $f(i)=f(i-2)(m-1)$</p></li></ul><p>$x^2-(m-1)x-(m-2)=(x+1)(x-(m-1))=0$</p><p>$f(i)=a(-1)^i+b(m-1)^i,f(1)=0,f(2)=m(m-1)$</p><p>$f(1)$由于$1$与$1$相邻。所以为$0$。</p><script type="math/tex; mode=display">f(i)=(m-1)^i+(-1)^i(m-1)</script><hr><p>然后$dfs$一遍搜因数并且一遍处理欧拉函数。</p><p>BZOJ上的数据经过加强， n 可能是 $10^9+7$ 的倍数（没有逆元），而最后要除以 $n$ ，所以需要一些特殊的技巧。</p><ul><li>$MOD=(1e9+7)^2$</li><li>此时要用快速乘</li><li>答案等于在模 $10^9+7$ 意义下 $\frac{sum}{1e9+7}$ 除以 $\frac{n}{1e9+7}$ 的结果。</li><li>需要$exgcd$求$6$在$(1e9+7)^2$的逆元。</li></ul><details>  <summary>代码</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;ll, ll&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="keyword">const</span> ll N = <span class="number">1e7</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> ll MOD = <span class="number">1000000007l</span>l;</span><br><span class="line"><span class="keyword">const</span> ll Inv61 = <span class="number">166666668l</span>l;</span><br><span class="line"><span class="keyword">const</span> ll Inv62 = <span class="number">833333345000000041l</span>l;</span><br><span class="line"></span><br><span class="line">ll mod;</span><br><span class="line">ll Inv6;</span><br><span class="line">ll O;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">mult</span><span class="params">(ll x, ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!O)</span><br><span class="line">        <span class="keyword">return</span> x * y % mod;</span><br><span class="line">    <span class="keyword">return</span> (x * y - (ll)((<span class="keyword">long</span> <span class="keyword">double</span>)x / mod * y) * mod + mod) % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pcnt, pr[N], npr[N];</span><br><span class="line"><span class="keyword">int</span> mu[N], usum[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Prime_init</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    npr[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!npr[i])</span><br><span class="line">            pr[++pcnt] = i, mu[i] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (ll j = <span class="number">1</span>; j &lt;= pcnt &amp;&amp; pr[j] * i &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            npr[pr[j] * i] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i % pr[j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                mu[pr[j] * i] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                mu[pr[j] * i] = mu[i] * (<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        usum[i] = usum[i - <span class="number">1</span>] + mu[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll k;</span><br><span class="line">ll p[<span class="number">100</span>], e[<span class="number">100</span>];</span><br><span class="line">ll cnt;</span><br><span class="line">ll ans;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a, ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &amp; <span class="number">1</span>)</span><br><span class="line">            res = mult(res, a);</span><br><span class="line">        a = mult(a, a);</span><br><span class="line">        x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (qpow(k - <span class="number">1</span>, x) + mult((x &amp; <span class="number">1</span> ? mod - <span class="number">1</span> : <span class="number">1</span>), (k - <span class="number">1</span>))) % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ll x, ll now, ll phi, ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; cnt)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = (ans + mult(phi % mod, calc(n / now))) % mod;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; phi &lt;&lt; " " &lt;&lt; calc(n / now) &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(x + <span class="number">1</span>, now, phi, n);</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= e[x]; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        phi *= (p[x] - (i == <span class="number">1</span>));</span><br><span class="line">        now *= p[x];</span><br><span class="line">        dfs(x + <span class="number">1</span>, now, phi, n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    ll tmp = n;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">2</span>; i * i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ll o = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n % i == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                n /= i;</span><br><span class="line">                o++;</span><br><span class="line">            &#125;</span><br><span class="line">            p[++cnt] = i;</span><br><span class="line">            e[cnt] = o;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p[++cnt] = n;</span><br><span class="line">        e[cnt] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    k = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>, j; i &lt;= n; i = j + <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        j = n / (n / i);</span><br><span class="line">        k = (k + mult(mult(mult(n / i, n / i), n / i + <span class="number">3</span>), (usum[j] - usum[i - <span class="number">1</span>] + mod) % mod)) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    k = mult(Inv6, k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    Prime_init(<span class="number">1e7</span>);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        ll n, a;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; a;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        O = n % MOD ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (O)</span><br><span class="line">            mod = MOD * MOD, Inv6 = Inv62;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            mod = MOD, Inv6 = Inv61;</span><br><span class="line"></span><br><span class="line">        init(a);</span><br><span class="line">        solve(n);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (O)</span><br><span class="line">            ans = mult(ans / MOD, qpow(n / MOD, MOD - <span class="number">2</span>)) % MOD;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ans = mult(ans, qpow(n % MOD, MOD - <span class="number">2</span>));</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </details>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;珠子=正三菱柱,三个面上面的数字$x$,必须满足$x\in [1,a]$，且珠子上面的数字的最大公约数要恰好为1。三棱柱可以选择翻转.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;相邻的两个珠子必须不同。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;两串项链如果能够经过旋转变成一样的，那么这两串项链就是相同的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$n&amp;lt;=10^{14}，a&amp;lt;=10^7，T&amp;lt;=10$&lt;br&gt;
    
    </summary>
    
    
    
      <category term="置换群" scheme="http://yoursite.com/tags/%E7%BD%AE%E6%8D%A2%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>CF455D.Serega and Fun</title>
    <link href="http://yoursite.com/2020/10/28/CF455D/"/>
    <id>http://yoursite.com/2020/10/28/CF455D/</id>
    <published>2020-10-28T02:47:00.000Z</published>
    <updated>2020-11-28T07:44:29.121Z</updated>
    
    <content type="html"><![CDATA[<p>给你一个序列，在线地支持两个操作：</p><ul><li><p>将一个区间循环移位。</p></li><li><p>查询一个区间中某个数出现的次数。</p></li></ul><a id="more"></a><p>两个方法</p><ul><li>分块 维护块内元素出现次数，修改和更新用双向队列都很显然。$O((n+m)\sqrt{n})=1700ms$</li><li>平衡树，第一个操作很好解决，对于第二个操作，首先我们只能维护$t_i$这个数字平衡树出现的相对位置，而<strong>不能维护绝对位置</strong>。但是我们可以通过一开始构造原序列的平衡树的映射，就可以知道某个值在原序列第几个位置，这里需要$O(\log n)$。我想知道$[1,r]$之间$i$出现了几次，平衡树上通过这个查询二分即可。总复杂度$O(n+m\log^2 n)=300ms$</li></ul><details>  <summary>平衡树</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)</span><br><span class="line">        x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">std</span>::mt19937 <span class="title">rnd</span><span class="params">(<span class="built_in">std</span>::chrono::steady_clock::now().time_since_epoch().count())</span></span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FHQ</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ls[N], rs[N];</span><br><span class="line">    <span class="keyword">int</span> siz[N], key[N], val[N];</span><br><span class="line">    <span class="keyword">int</span> fa[N];</span><br><span class="line">    <span class="keyword">int</span> cor[N];</span><br><span class="line">    <span class="comment">// ll sum[N];</span></span><br><span class="line">    <span class="keyword">int</span> tcnt;</span><br><span class="line">    <span class="keyword">int</span> root;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Newnode</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        siz[++tcnt] = <span class="number">1</span>;</span><br><span class="line">        val[tcnt] = x;</span><br><span class="line">        key[tcnt] = rnd(); <span class="comment">//精髓所在</span></span><br><span class="line"></span><br><span class="line">        fa[tcnt] = tcnt;</span><br><span class="line">        ls[tcnt] = rs[tcnt] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> tcnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        siz[pos] = siz[ls[pos]] + siz[rs[pos]] + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// sum[pos] = sum[ls[pos]] + sum[rs[pos]] + val[pos];</span></span><br><span class="line">        ls[pos] ? (fa[ls[pos]] = pos) : <span class="number">0</span>;</span><br><span class="line">        rs[pos] ? (fa[rs[pos]] = pos) : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> v, <span class="keyword">int</span> &amp;ll, <span class="keyword">int</span> &amp;rr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!pos)</span><br><span class="line">        &#123;</span><br><span class="line">            ll = <span class="number">0</span>, rr = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (siz[ls[pos]] + <span class="number">1</span> &lt;= v)</span><br><span class="line">        &#123;</span><br><span class="line">            ll = pos;</span><br><span class="line">            split(rs[pos], v - siz[ls[pos]] - <span class="number">1</span>, rs[pos], rr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            rr = pos;</span><br><span class="line">            split(ls[pos], v, ll, ls[pos]);</span><br><span class="line">        &#125;</span><br><span class="line">        fa[ll] = ll, fa[rr] = rr; <span class="comment">//保证头节点</span></span><br><span class="line">        pushup(pos);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!l || !r)</span><br><span class="line">            <span class="keyword">return</span> l + r;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (key[l] &lt; key[r])</span><br><span class="line">        &#123;</span><br><span class="line">            rs[l] = merge(rs[l], r);</span><br><span class="line">            pushup(l);</span><br><span class="line">            <span class="keyword">return</span> l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            ls[r] = merge(l, ls[r]);</span><br><span class="line">            pushup(r);</span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// int find(int x)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     return fa[x] == x ? x : find(fa[x]);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;rt, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pos = Newnode(x);</span><br><span class="line">        rt = merge(rt, pos);</span><br><span class="line">        <span class="keyword">return</span> pos;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">kth</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = siz[ls[x]] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (fa[x] != x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (rs[fa[x]] == x)</span><br><span class="line">            &#123;</span><br><span class="line">                res += siz[ls[fa[x]]] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            x = fa[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rt[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> o = rt[k];</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (o)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (t.kth(t.cor[o]) &lt;= r)</span><br><span class="line">        &#123;</span><br><span class="line">            res += t.siz[t.ls[o]] + <span class="number">1</span>;</span><br><span class="line">            o = t.rs[o];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            o = t.ls[o];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> calc(k, r) - calc(k, l - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, c, d;</span><br><span class="line">    t.split(rt[<span class="number">0</span>], l - <span class="number">1</span>, a, b);</span><br><span class="line">    t.split(b, r - l + <span class="number">1</span>, b, d);</span><br><span class="line">    t.split(b, r - l, b, c);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> k = t.val[c];</span><br><span class="line">    rt[<span class="number">0</span>] = t.merge(a, t.merge(c, t.merge(b, d)));</span><br><span class="line">    <span class="keyword">int</span> ls = calc(k, l - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> rs = calc(k, r);</span><br><span class="line">    <span class="comment">//cout &lt;&lt; k &lt;&lt; " " &lt;&lt; ls &lt;&lt; " " &lt;&lt; rs &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">    t.split(rt[k], ls, a, b);</span><br><span class="line">    t.split(b, rs - ls, b, d);</span><br><span class="line">    t.split(b, rs - ls - <span class="number">1</span>, b, c);</span><br><span class="line"></span><br><span class="line">    rt[k] = t.merge(a, t.merge(c, t.merge(b, d)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("1", "r", stdin);</span></span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">int</span> x = t.insert(rt[<span class="number">0</span>], a[i]);</span><br><span class="line">        <span class="keyword">int</span> y = t.insert(rt[a[i]], a[i]);</span><br><span class="line">        t.cor[x] = y;</span><br><span class="line">        t.cor[y] = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> lst = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> q = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">while</span> (q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> op = <span class="built_in">read</span>(), l = <span class="built_in">read</span>(), r = <span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            l = (l + lst - <span class="number">1</span>) % n + <span class="number">1</span>, r = (r + lst - <span class="number">1</span>) % n + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; op &lt;&lt; " " &lt;&lt; l &lt;&lt; " " &lt;&lt; r &lt;&lt; " " &lt;&lt; endl;</span></span><br><span class="line">            <span class="keyword">if</span> (l &gt; r)</span><br><span class="line">                swap(l, r);</span><br><span class="line">            <span class="keyword">if</span> (l == r)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            update(l, r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> k = <span class="built_in">read</span>();</span><br><span class="line">            l = (l + lst - <span class="number">1</span>) % n + <span class="number">1</span>, r = (r + lst - <span class="number">1</span>) % n + <span class="number">1</span>, k = (k + lst - <span class="number">1</span>) % n + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; op &lt;&lt; " " &lt;&lt; l &lt;&lt; " " &lt;&lt; r &lt;&lt; " "</span></span><br><span class="line">            <span class="comment">//      &lt;&lt; " " &lt;&lt; k &lt;&lt; endl;</span></span><br><span class="line">            <span class="keyword">if</span> (l &gt; r)</span><br><span class="line">                swap(l, r);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, lst = query(l, r, k));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </details><details>  <summary>分块</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;ll, int&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">400</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)</span><br><span class="line">        x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Bo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> block, tot, bl[N], br[N], fa[N];</span><br><span class="line">    <span class="keyword">int</span> cnt[M][N];</span><br><span class="line">    <span class="keyword">int</span> a[N];</span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; q[M];</span><br><span class="line">    ll tag[N];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">replace</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cnt[x][y] += w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        block = <span class="built_in">sqrt</span>(n);</span><br><span class="line">        tot = n / block + (n % block != <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; i++)</span><br><span class="line">            bl[i] = (i - <span class="number">1</span>) * block + <span class="number">1</span>, br[i] = i * block;</span><br><span class="line"></span><br><span class="line">        br[tot] = n;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            fa[i] = (i - <span class="number">1</span>) / (block) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = bl[i]; j &lt;= br[i]; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                q[i].push_back(a[j]);</span><br><span class="line">                replace(i, a[j], <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> lx, <span class="keyword">int</span> rx, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; le, ri;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= l - bl[lx]; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            le.push(q[lx].front());</span><br><span class="line">            q[lx].pop_front();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= br[rx] - r; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ri.push(q[rx].back());</span><br><span class="line">            q[rx].pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> u = q[rx].back();</span><br><span class="line">        replace(rx, u, <span class="number">-1</span>);</span><br><span class="line">        q[rx].pop_back();</span><br><span class="line">        replace(lx, u, <span class="number">1</span>);</span><br><span class="line">        q[lx].push_front(u);</span><br><span class="line">        <span class="keyword">while</span> (!le.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            q[lx].push_front(le.top());</span><br><span class="line">            le.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!ri.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            q[rx].push_back(ri.top());</span><br><span class="line">            ri.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> lx, <span class="keyword">int</span> rx, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; le, ri;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= l - bl[lx]; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            le.push(q[lx].front());</span><br><span class="line">            q[lx].pop_front();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= br[rx] - r; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ri.push(q[rx].back());</span><br><span class="line">            q[rx].pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x : q[lx])</span><br><span class="line">            <span class="keyword">if</span> (x == k)</span><br><span class="line">                res++;</span><br><span class="line">        <span class="keyword">if</span> (lx != rx)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x : q[rx])</span><br><span class="line">                <span class="keyword">if</span> (x == k)</span><br><span class="line">                    res++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!le.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            q[lx].push_front(le.top());</span><br><span class="line">            le.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!ri.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            q[rx].push_back(ri.top());</span><br><span class="line">            ri.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (fa[l] == fa[r])</span><br><span class="line">        &#123;</span><br><span class="line">            work(fa[l], fa[l], l, r);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> lx = fa[l], rx = fa[r];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = lx; i &lt; rx; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = q[i].back();</span><br><span class="line">            q[i].pop_back();</span><br><span class="line">            replace(i, x, <span class="number">-1</span>);</span><br><span class="line">            q[i + <span class="number">1</span>].push_front(x);</span><br><span class="line">            replace(i + <span class="number">1</span>, x, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        work(lx, rx, l, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (fa[l] == fa[r])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> calc(fa[l], fa[l], l, r, k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> lx = fa[l], rx = fa[r];</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = lx + <span class="number">1</span>; i &lt; rx; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            res += cnt[i][k];</span><br><span class="line">        &#125;</span><br><span class="line">        res += calc(lx, rx, l, r, k);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen("1", "r", stdin);</span></span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        t.a[i] = <span class="built_in">read</span>();</span><br><span class="line">    t.build(n);</span><br><span class="line">    <span class="keyword">int</span> q = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">int</span> lst = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> op = <span class="built_in">read</span>(), l = <span class="built_in">read</span>(), r = <span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            l = (l + lst - <span class="number">1</span>) % n + <span class="number">1</span>, r = (r + lst - <span class="number">1</span>) % n + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; op &lt;&lt; " " &lt;&lt; l &lt;&lt; " " &lt;&lt; r &lt;&lt; " " &lt;&lt; endl;</span></span><br><span class="line">            <span class="keyword">if</span> (l &gt; r)</span><br><span class="line">                swap(l, r);</span><br><span class="line">            <span class="keyword">if</span> (l == r)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            t.update(l, r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> k = <span class="built_in">read</span>();</span><br><span class="line">            l = (l + lst - <span class="number">1</span>) % n + <span class="number">1</span>, r = (r + lst - <span class="number">1</span>) % n + <span class="number">1</span>, k = (k + lst - <span class="number">1</span>) % n + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; op &lt;&lt; " " &lt;&lt; l &lt;&lt; " " &lt;&lt; r &lt;&lt; " "</span></span><br><span class="line">            <span class="comment">//      &lt;&lt; " " &lt;&lt; k &lt;&lt; endl;</span></span><br><span class="line">            <span class="keyword">if</span> (l &gt; r)</span><br><span class="line">                swap(l, r);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, lst = t.query(l, r, k));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给你一个序列，在线地支持两个操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;将一个区间循环移位。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查询一个区间中某个数出现的次数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="平衡树" scheme="http://yoursite.com/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>CF1437F. Emotional Fishermen</title>
    <link href="http://yoursite.com/2020/10/25/CF1437F/"/>
    <id>http://yoursite.com/2020/10/25/CF1437F/</id>
    <published>2020-10-25T02:47:00.000Z</published>
    <updated>2020-10-31T03:11:47.197Z</updated>
    
    <content type="html"><![CDATA[<p>将元素重新排列，询问不出现$y\leq 2x\leq 4y$, $y$=之前最大值。</p><a id="more"></a><p>显排个序，假设确定一个最大元素的时候，$\leq \frac{a_i}{2}$已经可以随便选择了，因为范围$[L,R]$只会往左边移动。</p><p>$dp[i]$表示选择$a_i$的方案数。</p><p>转移的时候<br>$dp[i]=\sum dp[j]\times A_{n - 2 - mx[j]}^{mx[i] - mx[j] - 1}$</p><p>$mx[i]$表示最大的$j$满足$2\times a[j]\leq a[i]$</p><p>思考这个$DP$,当$dp[j]$,有$mx[j]+1$个元素已经排好的时候，将$a_i$放在$a_j$的下一个位置。那么剩下就是$(n-2-mx[j])$个位置，随机放置$mx[i] - mx[j] - 1$。</p><p>由于这样$dp$,前缀最大值的顺序是一定，就可以保证不重不漏了。</p><details>  <summary>代码</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> math</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">inc</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> (x + y &gt;= mod) ? (x + y - mod) : (x + y); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> (x - y &lt; <span class="number">0</span>) ? (x - y + mod) : (x - y); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b == <span class="number">0</span> ? a : gcd(b, a % b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> x, <span class="keyword">int</span> mo)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (x &amp; <span class="number">1</span>)</span><br><span class="line">                res = <span class="number">1l</span>l * res * a % mod;</span><br><span class="line">            a = <span class="number">1l</span>l * a * a % mod;</span><br><span class="line">            x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> Fac[N], invFac[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Finit</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        invFac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            Fac[i] = <span class="number">1l</span>l * Fac[i - <span class="number">1</span>] * i % mod;</span><br><span class="line">        invFac[n] = qpow(Fac[n], mod - <span class="number">2</span>, mod);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">            invFac[i] = <span class="number">1l</span>l * invFac[i + <span class="number">1</span>] * (i + <span class="number">1</span>) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; m || m &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)(<span class="number">1l</span>l * Fac[n] * invFac[m] % mod * invFac[n - m] % mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// if (m == 0)</span></span><br><span class="line">        <span class="comment">//     return 1;</span></span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">0</span> || m &lt; <span class="number">0</span> || m &gt; n)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">1l</span>l * Fac[n] * invFac[n - m] % mod);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// namespace math</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> math;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)</span><br><span class="line">        x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">read</span>();</span><br><span class="line">    Finit(n);</span><br><span class="line">    vector&lt;int&gt; a(n + 1), mx(n + 1, n + 1), dp(n + 1);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        a[i] = <span class="built_in">read</span>();</span><br><span class="line">    sort(<span class="number">1</span> + a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">2</span> * a[j] &lt;= a[i])</span><br><span class="line">                mx[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mx[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">2</span> * a[j] &lt;= a[i])</span><br><span class="line">                dp[i] = inc(dp[i], <span class="number">1l</span>l * dp[j] * A(n - <span class="number">2</span> - mx[j], mx[i] - mx[j] - <span class="number">1</span>) % mod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (mx[n] == n - <span class="number">1</span> ? dp[n] : <span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将元素重新排列，询问不出现$y\leq 2x\leq 4y$, $y$=之前最大值。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="dp" scheme="http://yoursite.com/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>CF1436E Complicated Computations</title>
    <link href="http://yoursite.com/2020/10/25/CF1436E/"/>
    <id>http://yoursite.com/2020/10/25/CF1436E/</id>
    <published>2020-10-25T02:47:00.000Z</published>
    <updated>2020-10-31T03:11:46.871Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个$n$个元素的数列 $a$，求 $a$ 所有非空子序列的 $MEX$ 所构成的数列的 $MEX$。<br><a id="more"></a><br>首先对于$[1,n]$的数列来说出现的$mex$为$x$。</p><p>之后所有区间出现的$mex\leq x$，并且都是$mex&lt; x,mex=a_t$。（如果出现别的数又小，那么一定$=x$。</p><p>只需要判断$a_i$，是否是区间$mex$，显然$(pre[i],i]$，所有$a_j<a_i$最大的下标的最小值$>pre[i]$即可。这个线段树或者树状数组即可。</p><ul><li>首先需要判断整体的$mex$</li><li>由于不可描述原因$1$需要特判。</li></ul><details>  <summary>代码</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)</span><br><span class="line">        x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Fenwick</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">    Fenwick(<span class="keyword">int</span> c)</span><br><span class="line">    &#123;</span><br><span class="line">        n = c - <span class="number">1</span>;</span><br><span class="line">        a.resize(n + <span class="number">1</span>, n);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= n; i += i &amp; -i)</span><br><span class="line">            <span class="keyword">if</span> (v &lt; a[i])</span><br><span class="line">                a[i] = v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i; i &amp;= i - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> (a[i] &lt; res)</span><br><span class="line">                res = a[i];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">read</span>();</span><br><span class="line">    <span class="function">Fenwick <span class="title">t</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    vector&lt;int&gt; a(n + 2), pre(n + 2), lst(n + 2), vis(n + 3);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">if</span> (a[i] != <span class="number">1</span>)</span><br><span class="line">            vis[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        lst[i] = pre[a[i]];</span><br><span class="line">        pre[a[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        t.update(i, pre[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n + <span class="number">1</span>; i++)</span><br><span class="line">        <span class="keyword">if</span> (t.query(i - <span class="number">1</span>) &gt; pre[i])</span><br><span class="line">            vis[i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] != <span class="number">1</span> &amp;&amp; t.query(a[i] - <span class="number">1</span>) &gt; lst[i])</span><br><span class="line">        &#123;</span><br><span class="line">            vis[a[i]] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        t.update(a[i], lst[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + <span class="number">2</span>; i++)</span><br><span class="line">        <span class="keyword">if</span> (!vis[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个$n$个元素的数列 $a$，求 $a$ 所有非空子序列的 $MEX$ 所构成的数列的 $MEX$。&lt;br&gt;
    
    </summary>
    
    
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>CF1038F Wrap Around</title>
    <link href="http://yoursite.com/2020/10/25/CF1038F/"/>
    <id>http://yoursite.com/2020/10/25/CF1038F/</id>
    <published>2020-10-25T02:47:00.000Z</published>
    <updated>2020-11-28T07:44:35.218Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个字符串$S$，只包含$’0’$和$’1’$两个字符，求有多少长度为$n$的字符串$T$，满足以$T$为循环节的无限循环字符串包含$S$。 注意，哪怕在循环后相同，写出来不同的字符串$T$仍算不同的字符串$T$。例如$10$和$01$算不同的字符串$T$。</p><a id="more"></a><p>正着要考虑循环好几次，就很麻烦。</p><p>正难则反，我们需要的不包含，只需要头尾相连不包含即可不包含。</p><p>枚举前缀已经匹配到了$S$的前$[0,|S|),suf$,$dp[k][i][j]$表示从已经构造到地$k$个单词，并且从已经有的前缀匹配到$j$,原本匹配到了$i$。最后我要保证匹配到原本匹配到了$suf$即后缀有$suf$,答案是$\sum_{i} dp[n][suf][i]$。</p><ul><li>这里问题就是正难则反。不能匹配放到AC自动机上就是不跑最后那个点，又因为是循环，我们为了保证连起来不搞到，所以就需要限制前后缀，不然难以统计。</li></ul><details>  <summary>代码</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">40</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_AC = <span class="number">2e3</span>;</span><br><span class="line"></span><br><span class="line">ll dp[N][N][N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ACAM</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> scnt;</span><br><span class="line">    <span class="keyword">int</span> nxt[N_AC][<span class="number">2</span>], fail[N_AC];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> root;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Newnode</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pos = ++scnt;</span><br><span class="line">        fail[pos] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(nxt[pos], <span class="number">0</span>, <span class="keyword">sizeof</span>(nxt[pos]));</span><br><span class="line">        <span class="keyword">return</span> pos;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> *t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(t);</span><br><span class="line">        <span class="keyword">int</span> tmp = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> id = t[i] - <span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">if</span> (!nxt[tmp][id])</span><br><span class="line">                nxt[tmp][id] = Newnode();</span><br><span class="line">            tmp = nxt[tmp][id];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = nxt[root][i];</span><br><span class="line">            <span class="keyword">if</span> (tmp)</span><br><span class="line">            &#123;</span><br><span class="line">                q.push(tmp);</span><br><span class="line">                fail[tmp] = root;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = nxt[x][i];</span><br><span class="line">                <span class="keyword">if</span> (tmp)</span><br><span class="line">                &#123;</span><br><span class="line">                    q.push(tmp);</span><br><span class="line">                    fail[tmp] = nxt[fail[x]][i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    nxt[x][i] = nxt[fail[x]][i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll ans = <span class="number">1l</span>l &lt;&lt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; scnt; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">            dp[<span class="number">0</span>][<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; scnt; x++)</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; scnt; y++)</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; k++)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">int</span> a = nxt[x][k], b = nxt[y][k];</span><br><span class="line">                            <span class="keyword">if</span> (a == scnt || b == scnt)</span><br><span class="line">                                <span class="keyword">continue</span>;</span><br><span class="line">                            dp[j + <span class="number">1</span>][a][b] += dp[j][x][y];</span><br><span class="line">                        &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; scnt; j++)</span><br><span class="line">                ans -= dp[n][i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">    t.insert(s);</span><br><span class="line">    t.build();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; t.solve(n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个字符串$S$，只包含$’0’$和$’1’$两个字符，求有多少长度为$n$的字符串$T$，满足以$T$为循环节的无限循环字符串包含$S$。 注意，哪怕在循环后相同，写出来不同的字符串$T$仍算不同的字符串$T$。例如$10$和$01$算不同的字符串$T$。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="AC自动机" scheme="http://yoursite.com/tags/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>CF1065E Side Transmutations</title>
    <link href="http://yoursite.com/2020/10/24/CF1065E/"/>
    <id>http://yoursite.com/2020/10/24/CF1065E/</id>
    <published>2020-10-24T02:47:00.000Z</published>
    <updated>2020-11-01T16:18:14.725Z</updated>
    
    <content type="html"><![CDATA[<p>给个字符串可以$b_i$的前后缀倒置并交换，如果相同表示本质一样。询问有多少本质不同的串。</p><a id="more"></a><p>差分一下发现可以组成$2^m$种变换的方法。</p><p>根据Burnside引理，等价类的个数等于所有置换不动点个数的平均值</p><script type="math/tex; mode=display">ans= \frac{1}{∣G∣}\sum_{g∈G} A_g</script><p>比如$1,3,5$，其实就是$[0,1],[2.3],[4,5]$这三个的组合。</p><p>对于总长度为$len$的变换，应该是$A^{n-len}$,$len$部分对应的每一位不变。</p><p>答案就是$\frac{1}{2^m}\sum A^n(\frac{1}{A^{len_1}}+\frac{1}{A^{len_2}}…)$</p><p>括号直接套路生成函数$\prod (1+\frac{1}{A^{d_i}})$</p><p><details><br>  <summary>代码</summary></p><p>```c++</p><h1 id="include"><a href="#include" class="headerlink" title="include "></a>include <bits/stdc++.h></h1><p>using namespace std;<br>typedef long long ll;</p><h1 id="define-pii-pair"><a href="#define-pii-pair" class="headerlink" title="define pii pair"></a>define pii pair<int, int></h1><h1 id="define-mk-make-pair"><a href="#define-mk-make-pair" class="headerlink" title="define mk make_pair"></a>define mk make_pair</h1><p>const int N = 1e6 + 10;<br>const int mod = 998244353;<br>namespace math<br>{<br>    int inc(int x, int y) { return (x + y &gt;= mod) ? (x + y - mod) : (x + y); }<br>    int del(int x, int y) { return (x - y &lt; 0) ? (x - y + mod) : (x - y); }<br>    int gcd(int a, int b)<br>    {<br>        return b == 0 ? a : gcd(b, a % b);<br>    }<br>    int qpow(int a, int x, int mo)<br>    {<br>        int res = 1;<br>        while (x)<br>        {<br>            if (x &amp; 1)<br>                res = 1ll <em> res </em> a % mod;<br>            a = 1ll <em> a </em> a % mod;<br>            x &gt;&gt;= 1;<br>        }<br>        return res;<br>    }<br>    int Fac[N], invFac[N];<br>    void Finit(int n)<br>    {<br>        Fac[0] = 1;<br>        invFac[0] = 1;<br>        for (int i = 1; i &lt;= n; i++)<br>            Fac[i] = 1ll <em> Fac[i - 1] </em> i % mod;<br>        invFac[n] = qpow(Fac[n], mod - 2, mod);<br>        for (int i = n - 1; i &gt;= 1; i—)<br>            invFac[i] = 1ll <em> invFac[i + 1] </em> (i + 1) % mod;<br>    }<br>    int C(int n, int m)<br>    {<br>        if (m == 0)<br>            return 1;<br>        if (n &lt; m || m &lt; 0)<br>            return 0;</p><pre><code>    return (int)(1ll * Fac[n] * invFac[m] % mod * invFac[n - m] % mod);}</code></pre><p>} // namespace math</p><p>using namespace math;</p><p>int read()<br>{<br>    int x = 0, f = 1;<br>    char c = getchar();<br>    while (c &lt; ‘0’ || c &gt; ‘9’)<br>    {<br>        if (c == ‘-‘)<br>            f = -1;<br>        c = getchar();<br>    }<br>    while (c &gt;= ‘0’ &amp;&amp; c &lt;= ‘9’)<br>        x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + c - ‘0’, c = getchar();<br>    return x * f;<br>}<br>int main()<br>{</p><pre><code>int n = read(), m = read(), A = read();int invA = qpow(A, mod - 2, mod);int inv2 = qpow(2, mod - 2, mod);int res = 1;vector&lt;int&gt; a(m + 1);for (int i = 1; i &lt;= m; i++)    a[i] = read();for (int i = 1; i &lt;= m; i++){    res = 1ll * res * (1 + qpow(invA, a[i] - a[i - 1], mod)) % mod;}cout    &lt;&lt; 1ll * res * qpow(inv2, m, mod) % mod * qpow(A, n, mod) % mod &lt;&lt; endl;</code></pre><p>}</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给个字符串可以$b_i$的前后缀倒置并交换，如果相同表示本质一样。询问有多少本质不同的串。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="置换群" scheme="http://yoursite.com/tags/%E7%BD%AE%E6%8D%A2%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>2019ICPC南京现场赛 I. Washing clothes （贪心）</title>
    <link href="http://yoursite.com/2020/10/20/Nanjing2019I/"/>
    <id>http://yoursite.com/2020/10/20/Nanjing2019I/</id>
    <published>2020-10-20T02:47:00.000Z</published>
    <updated>2020-10-21T06:42:36.653Z</updated>
    
    <content type="html"><![CDATA[<p>$n&lt;=10^6$个人洗衣服，第$i$个人的到达时间为$(0\leq t\leq 10^9)$，</p><p>有一台洗衣机，同时只能洗一件衣服，花费的时间为$x$，</p><p>每个人都可以手洗衣服，多个人可以同时手洗衣服，花费的时间为$y$，</p><p>对于$x\in[1,y]$的每个$x$，输出能让$n$个人都能洗完衣服所需花费的最小时间<br><a id="more"></a></p><p>找规律，可以知道一定是前一段时间手洗，后一段机器洗。</p><p>$ans_x=\min\sum_{i}^n \max (t_i+y,\max \sum(t_{j}+(n-j+1)x))$</p><p>如果这样维护就成了$O(n^2\log n)$</p><p>单独看一个$ans_x$，这个函数是个凸函数。一个增，一个减。</p><p>$ans_y$是最优解是$i=y$时，随着$x$减小，最优$i$在减小，此时建议画函数图可以清楚知道为啥。</p><details>  <summary>代码</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)</span><br><span class="line">        x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lcTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">    ll k[N], b[N];</span><br><span class="line">    <span class="keyword">int</span> tag[N &lt;&lt; <span class="number">2</span>], scnt;</span><br><span class="line">    <span class="keyword">int</span> MAX;</span><br><span class="line">    <span class="function">ll <span class="title">f</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x * k[id] + b[id];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        tag[pos] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">        &#123;</span><br><span class="line">            scnt = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(pos &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">        build(pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// void insertLine(int x0, int y0, int x1, int y1)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     if (x0 &gt; x1)</span></span><br><span class="line">    <span class="comment">//         swap(x0, x1), swap(y0, y1);</span></span><br><span class="line">    <span class="comment">//     if (x0 == x1 &amp;&amp; y0 &gt; y1)</span></span><br><span class="line">    <span class="comment">//         swap(y0, y1);</span></span><br><span class="line">    <span class="comment">//     ++scnt;</span></span><br><span class="line">    <span class="comment">//     if (x0 == x1)</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         k[scnt] = 0;</span></span><br><span class="line">    <span class="comment">//         b[scnt] = y1;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//     else</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         k[scnt] = 1.00 * (y1 - y0) / (x1 - x0);</span></span><br><span class="line">    <span class="comment">//         b[scnt] = (int)(y1) - (int)(x1)*k[scnt];</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//     update(scnt, x0, x1, 1, 1, N);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertKB</span><span class="params">(ll kt, ll bt)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ++scnt;</span><br><span class="line">        k[scnt] = kt;</span><br><span class="line">        b[scnt] = bt;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; x0 &lt;&lt; " " &lt;&lt; x1 &lt;&lt; "----" &lt;&lt; k[scnt] &lt;&lt; " " &lt;&lt; b[scnt] &lt;&lt; endl;</span></span><br><span class="line">        update(scnt, <span class="number">1</span>, MAX, <span class="number">1</span>, <span class="number">1</span>, MAX);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!tag[pos])</span><br><span class="line">            &#123;</span><br><span class="line">                tag[pos] = id;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ll vl = f(l, tag[pos]), vr = f(r, tag[pos]);</span><br><span class="line">            ll nl = f(l, id), nr = f(r, id);</span><br><span class="line">            <span class="keyword">if</span> (vl &gt;= nl &amp;&amp; vr &gt;= nr)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (vl &lt;= nl &amp;&amp; vr &lt;= nr)</span><br><span class="line">            &#123;</span><br><span class="line">                tag[pos] = id;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= mid)</span><br><span class="line">            update(id, ql, qr, pos &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">        <span class="keyword">if</span> (qr &gt; mid)</span><br><span class="line">            update(id, ql, qr, pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (tag[pos])</span><br><span class="line">            res = <span class="built_in">max</span>(res, f(x, tag[pos]));</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (x &lt;= mid)</span><br><span class="line">            res = <span class="built_in">max</span>(res, query(x, pos &lt;&lt; <span class="number">1</span>, l, mid));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            res = <span class="built_in">max</span>(res, query(x, pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r));</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, y;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;y) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;ll&gt; <span class="title">ti</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;ll&gt; <span class="title">ans</span><span class="params">(y + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            ti[i] = <span class="built_in">read</span>();</span><br><span class="line">        ti[<span class="number">0</span>] = -y;</span><br><span class="line">        sort(ti.<span class="built_in">begin</span>() + <span class="number">1</span>, ti.<span class="built_in">end</span>());</span><br><span class="line">        t.MAX = y;</span><br><span class="line"></span><br><span class="line">        t.build(<span class="number">1</span>, <span class="number">1</span>, y);</span><br><span class="line">        <span class="keyword">int</span> pos = n;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = y; x &gt;= <span class="number">1</span>; x--)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (pos &gt;= <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ll curval = <span class="built_in">max</span>(ti[pos] + y, t.query(x, <span class="number">1</span>, <span class="number">1</span>, y));</span><br><span class="line">                ll nxtval = <span class="built_in">max</span>(ti[pos - <span class="number">1</span>] + y, <span class="built_in">max</span>(t.query(x, <span class="number">1</span>, <span class="number">1</span>, y), ti[pos] + <span class="number">1l</span>l * x * (n - pos + <span class="number">1</span>)));</span><br><span class="line">                <span class="keyword">if</span> (nxtval &lt;= curval)</span><br><span class="line">                &#123;</span><br><span class="line">                    t.insertKB((n - pos + <span class="number">1</span>), ti[pos]);</span><br><span class="line">                    pos--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; pos &lt;&lt; endl;</span></span><br><span class="line">            ans[x] = <span class="built_in">max</span>(ti[pos] + y, t.query(x, <span class="number">1</span>, <span class="number">1</span>, y));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= y; i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld%s"</span>, ans[i], i == y ? <span class="string">"\n"</span> : <span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;$n&amp;lt;=10^6$个人洗衣服，第$i$个人的到达时间为$(0\leq t\leq 10^9)$，&lt;/p&gt;
&lt;p&gt;有一台洗衣机，同时只能洗一件衣服，花费的时间为$x$，&lt;/p&gt;
&lt;p&gt;每个人都可以手洗衣服，多个人可以同时手洗衣服，花费的时间为$y$，&lt;/p&gt;
&lt;p&gt;对于$x\in[1,y]$的每个$x$，输出能让$n$个人都能洗完衣服所需花费的最小时间&lt;br&gt;
    
    </summary>
    
    
    
      <category term="李超线段树" scheme="http://yoursite.com/tags/%E6%9D%8E%E8%B6%85%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>P2423 [HEOI2012]朋友圈</title>
    <link href="http://yoursite.com/2020/10/15/P2423/"/>
    <id>http://yoursite.com/2020/10/15/P2423/</id>
    <published>2020-10-15T02:47:00.000Z</published>
    <updated>2020-10-20T08:54:39.245Z</updated>
    
    <content type="html"><![CDATA[<p>A国：每个人都有一个友善值，当两个A国人的友善值 $a,b$，如果 $a\text{ xor}\text{ }b \bmod 2=1$，那么这两个人都是朋友，否则不是；</p><p>B国：每个人都有一个友善值，当两个B国人的友善值 $a,b$，如果 $a\text{ xor}\text{ }b \bmod 2=0$ 或者$a\text{ }or\text{ }b$ 化成二进制有奇数个 $1$，那么两个人是朋友，否则不是朋友。</p><p>求最大团，给$A,B$的关系。<br><a id="more"></a></p><p>$A$国显然$0,1,2$人。</p><p>然后考虑如何计算枚举到的$B$国的最大团。</p><p>可以看出$B$的补图就是一个分奇偶的二分图。</p><p>二分图的最大团=补图的最大独立集。，最大独立集=所有顶点数-最小顶点覆盖，</p><p>跑个最大流即可。或者时间戳匈牙利。各种剪枝加一加很快的。</p><details>  <summary>代码</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, w, nxt;</span><br><span class="line">    Edge() &#123;&#125;</span><br><span class="line">    Edge(<span class="keyword">int</span> v, <span class="keyword">int</span> c, <span class="keyword">int</span> t) : to(v), w(c), nxt(t) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> EN = <span class="number">2e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> EM = <span class="number">2e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dinic</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">    Edge e[EM &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> head[EN], scnt, d[EN], cur[EN];</span><br><span class="line">    pii pre[EN];</span><br><span class="line">    <span class="keyword">int</span> maxn;</span><br><span class="line">    Dinic() &#123; scnt = <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        e[++scnt] = Edge(v, w, head[u]);</span><br><span class="line">        head[u] = scnt;</span><br><span class="line">        e[++scnt] = Edge(u, <span class="number">0</span>, head[v]);</span><br><span class="line">        head[v] = scnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        maxn = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// memset(head, 0, sizeof(head));</span></span><br><span class="line">        <span class="comment">// memset(d, 0, sizeof(d));</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= maxn; i++)</span><br><span class="line">            head[i] = d[i] = cur[i] = <span class="number">0</span>, pre[i] = mk(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        scnt = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= maxn; i++)</span><br><span class="line">            d[i] = <span class="number">0</span>;</span><br><span class="line">        q.push(s);</span><br><span class="line">        d[s] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i; i = e[i].nxt)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> to = e[i].to;</span><br><span class="line">                <span class="keyword">if</span> (!d[to] &amp;&amp; e[i].w)</span><br><span class="line">                &#123;</span><br><span class="line">                    d[to] = d[x] + <span class="number">1</span>;</span><br><span class="line">                    q.push(to);</span><br><span class="line">                    <span class="keyword">if</span> (to == t)</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> t, <span class="keyword">int</span> flow)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == t)</span><br><span class="line">            <span class="keyword">return</span> flow;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = cur[x]; i; i = e[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            cur[x] = i;</span><br><span class="line">            <span class="keyword">int</span> to = e[i].to;</span><br><span class="line">            <span class="keyword">if</span> (d[to] == d[x] + <span class="number">1</span> &amp;&amp; e[i].w)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> dis = dfs(to, t, <span class="built_in">min</span>(flow, e[i].w));</span><br><span class="line">                <span class="keyword">if</span> (dis)</span><br><span class="line">                &#123;</span><br><span class="line">                    e[i].w -= dis;</span><br><span class="line">                    e[i ^ <span class="number">1</span>].w += dis;</span><br><span class="line">                    flow -= dis;</span><br><span class="line">                    res += dis;</span><br><span class="line">                    <span class="keyword">if</span> (!flow)</span><br><span class="line">                        <span class="keyword">return</span> res;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Maxflow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (bfs(s, t))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">memcpy</span>(cur, head, <span class="keyword">sizeof</span>(head));</span><br><span class="line">            ans += dfs(s, t, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; dc;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)</span><br><span class="line">        x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a[N], b[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> vis[N], id[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; e;</span><br><span class="line"><span class="keyword">int</span> A, B, M, ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= B; i++)</span><br><span class="line">        vis[i] = id[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> o : g[x])</span><br><span class="line">        vis[o]++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> o : g[y])</span><br><span class="line">        vis[o]++;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= B; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[i] == z)</span><br><span class="line">            id[i] = ++cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; x &lt;&lt; " " &lt;&lt; y &lt;&lt; " " &lt;&lt; cnt &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">if</span> (cnt + z &lt;= ans)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> s = ++cnt, t = ++cnt;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; cnt &lt;&lt; endl;</span></span><br><span class="line">    dc.init(cnt);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x : p[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> (id[x])</span><br><span class="line">            dc.addEdge(s, id[x], <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x : p[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">if</span> (id[x])</span><br><span class="line">            dc.addEdge(id[x], t, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (pii now : e)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x = now.first, y = now.second;</span><br><span class="line">        <span class="keyword">if</span> (id[x] == <span class="number">0</span> || id[y] == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        dc.addEdge(id[x], id[y], <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ans = <span class="built_in">max</span>(ans, cnt - <span class="number">2</span> - dc.Maxflow(s, t) + z);</span><br><span class="line">    dc.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        A = <span class="built_in">read</span>(), B = <span class="built_in">read</span>(), M = <span class="built_in">read</span>();</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        p[<span class="number">0</span>].<span class="built_in">clear</span>(), p[<span class="number">1</span>].<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= A; i++)</span><br><span class="line">            a[i] = <span class="built_in">read</span>(), g[i].<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= B; i++)</span><br><span class="line">            b[i] = <span class="built_in">read</span>(), p[b[i] &amp; <span class="number">1</span>].push_back(i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = <span class="built_in">read</span>(), y = <span class="built_in">read</span>();</span><br><span class="line">            g[x].push_back(y);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : p[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j : p[<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!((__builtin_popcount((b[i] | b[j]))) &amp; <span class="number">1</span>))</span><br><span class="line">                    e.push_back(mk(i, j));</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">//solve(1, 2, 2);</span></span><br><span class="line">        solve(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= A; i++)</span><br><span class="line">            solve(i, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= A; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= A; j++)</span><br><span class="line">                <span class="keyword">if</span> ((a[i] ^ a[j]) &amp; <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line"></span><br><span class="line">                    solve(i, j, <span class="number">2</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A国：每个人都有一个友善值，当两个A国人的友善值 $a,b$，如果 $a\text{ xor}\text{ }b \bmod 2=1$，那么这两个人都是朋友，否则不是；&lt;/p&gt;
&lt;p&gt;B国：每个人都有一个友善值，当两个B国人的友善值 $a,b$，如果 $a\text{ xor}\text{ }b \bmod 2=0$ 或者$a\text{ }or\text{ }b$ 化成二进制有奇数个 $1$，那么两个人是朋友，否则不是朋友。&lt;/p&gt;
&lt;p&gt;求最大团，给$A,B$的关系。&lt;br&gt;
    
    </summary>
    
    
    
      <category term="二分图" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
  </entry>
  
</feed>
