<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NaCNer</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-27T14:39:27.596Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>HCN</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>板子</title>
    <link href="http://yoursite.com/2022/01/01/%E6%9D%BF%E5%AD%90/"/>
    <id>http://yoursite.com/2022/01/01/%E6%9D%BF%E5%AD%90/</id>
    <published>2022-01-01T02:47:00.000Z</published>
    <updated>2020-08-27T14:39:27.596Z</updated>
    
    <content type="html"><![CDATA[<p>整理</p><p><a href="&quot;https://codeforces.ml/profile/WaluntOvO&quot;"><img src="http://cfrating.ihcr.top/?user=WaluntOvO" alt=""></a></p><p><a href="&quot;https://codeforces.ml/profile/NaCNerer&quot;"><img src="http://cfrating.ihcr.top/?user=NaCNerer" alt=""></a></p><a id="more"></a><p>[TOP]</p><h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><h2 id="unordered-map"><a href="#unordered-map" class="headerlink" title="unordered_map"></a>unordered_map</h2><h2 id="快速-mod"><a href="#快速-mod" class="headerlink" title="快速$mod$"></a>快速$mod$</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inc</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> (x + y &gt;= mod) ? (x + y - mod) : (x + y); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> (x - y &lt; <span class="number">0</span>) ? (x - y + mod) : (x - y); &#125;</span><br><span class="line"><span class="function">ll <span class="title">mult</span><span class="params">(ll a, ll b, <span class="keyword">const</span> ll &amp;mo)</span></span>&#123;a %= mo, b %= mo;<span class="keyword">return</span> (a * b - (ll)(((lb)a * b + <span class="number">0.5</span>) / mo) * mo) % mo;&#125;</span><br></pre></td></tr></table></figure><h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> x, <span class="keyword">int</span> mo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &amp; <span class="number">1</span>)</span><br><span class="line">            res = <span class="number">1l</span>l * res * a % mo;</span><br><span class="line">        a = <span class="number">1l</span>l * a * a % mo;</span><br><span class="line">        x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速乘"><a href="#快速乘" class="headerlink" title="快速乘"></a>快速乘</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">ksc</span><span class="params">(ll x,ll y,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x*y-(ll)((<span class="keyword">long</span> <span class="keyword">double</span>)x/mod*y)*mod+mod)%mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="大数模版"><a href="#大数模版" class="headerlink" title="大数模版"></a>大数模版</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BigInteger</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> BASE = <span class="number">100000000</span>; <span class="comment">//和WIDTH保持一致</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> WIDTH = <span class="number">8</span>;        <span class="comment">//八位一存储,如修改记得修改输出中的%08d</span></span><br><span class="line">    <span class="keyword">bool</span> sign;                         <span class="comment">//符号, 0表示负数</span></span><br><span class="line">    <span class="keyword">size_t</span> length;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; num; <span class="comment">//反序存</span></span><br><span class="line">                          <span class="comment">//构造函数</span></span><br><span class="line">    BigInteger(<span class="keyword">long</span> <span class="keyword">long</span> x = <span class="number">0</span>) &#123; *<span class="keyword">this</span> = x; &#125;</span><br><span class="line">    BigInteger(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;x) &#123; *<span class="keyword">this</span> = x; &#125;</span><br><span class="line">    BigInteger(<span class="keyword">const</span> BigInteger &amp;x) &#123; *<span class="keyword">this</span> = x; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//剪掉前导0</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cutLeadingZero</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (num.back() == <span class="number">0</span> &amp;&amp; num.<span class="built_in">size</span>() != <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            num.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置数的长度</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setLength</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cutLeadingZero();</span><br><span class="line">        <span class="keyword">int</span> tmp = num.back();</span><br><span class="line">        <span class="keyword">if</span> (tmp == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            length = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            length = (num.<span class="built_in">size</span>() - <span class="number">1</span>) * WIDTH;</span><br><span class="line">            <span class="keyword">while</span> (tmp &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ++length;</span><br><span class="line">                tmp /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//赋值运算符</span></span><br><span class="line">    BigInteger &amp;<span class="keyword">operator</span>=(<span class="keyword">long</span> <span class="keyword">long</span> x)</span><br><span class="line">    &#123;</span><br><span class="line">        num.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= <span class="number">0</span>)</span><br><span class="line">            sign = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            sign = <span class="literal">false</span>;</span><br><span class="line">            x = -x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            num.emplace_back(x % BASE);</span><br><span class="line">            x /= BASE;</span><br><span class="line">        &#125; <span class="keyword">while</span> (x &gt; <span class="number">0</span>);</span><br><span class="line">        setLength();</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//赋值运算符</span></span><br><span class="line">    BigInteger &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;str)</span><br><span class="line">    &#123;</span><br><span class="line">        num.<span class="built_in">clear</span>();</span><br><span class="line">        sign = (str[<span class="number">0</span>] != <span class="string">'-'</span>); <span class="comment">//设置符号</span></span><br><span class="line">        <span class="keyword">int</span> x, len = (str.<span class="built_in">size</span>() - <span class="number">1</span> - (!sign)) / WIDTH + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> End = str.length() - i * WIDTH;</span><br><span class="line">            <span class="keyword">int</span> start = <span class="built_in">std</span>::<span class="built_in">max</span>((<span class="keyword">int</span>)(!sign), End - WIDTH); <span class="comment">//防止越界</span></span><br><span class="line">            <span class="built_in">sscanf</span>(str.substr(start, End - start).c_str(), <span class="string">"%d"</span>, &amp;x);</span><br><span class="line">            num.push_back(x);</span><br><span class="line">        &#125;</span><br><span class="line">        setLength();</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//赋值运算符</span></span><br><span class="line">    BigInteger &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> BigInteger &amp;tmp)</span><br><span class="line">    &#123;</span><br><span class="line">        num = tmp.num;</span><br><span class="line">        sign = tmp.sign;</span><br><span class="line">        length = tmp.length;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数的位数</span></span><br><span class="line">    <span class="function"><span class="keyword">size_t</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> length; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//*10^n 除法中用到</span></span><br><span class="line">    <span class="function">BigInteger <span class="title">e</span><span class="params">(<span class="keyword">size_t</span> n)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = n % WIDTH;</span><br><span class="line">        BigInteger ans;</span><br><span class="line">        ans.length = n + <span class="number">1</span>;</span><br><span class="line">        n /= WIDTH;</span><br><span class="line">        <span class="keyword">while</span> (ans.num.<span class="built_in">size</span>() &lt;= n)</span><br><span class="line">            ans.num.push_back(<span class="number">0</span>);</span><br><span class="line">        ans.num[n] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (tmp--)</span><br><span class="line">            ans.num[n] *= <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">return</span> ans * (*<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绝对值</span></span><br><span class="line">    <span class="function">BigInteger <span class="title">abs</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function">BigInteger <span class="title">ans</span><span class="params">(*<span class="keyword">this</span>)</span></span>;</span><br><span class="line">        ans.sign = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//正号</span></span><br><span class="line">    <span class="keyword">const</span> BigInteger &amp;<span class="keyword">operator</span>+() <span class="keyword">const</span> &#123; <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// + 运算符</span></span><br><span class="line">    BigInteger <span class="keyword">operator</span>+(<span class="keyword">const</span> BigInteger &amp;b) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!b.sign)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span> - (-b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!sign)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> b - (-*<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        BigInteger ans;</span><br><span class="line">        ans.num.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, g = <span class="number">0</span>;; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (g == <span class="number">0</span> &amp;&amp; i &gt;= num.<span class="built_in">size</span>() &amp;&amp; i &gt;= b.num.<span class="built_in">size</span>())</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">int</span> x = g;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; num.<span class="built_in">size</span>())</span><br><span class="line">                x += num[i];</span><br><span class="line">            <span class="keyword">if</span> (i &lt; b.num.<span class="built_in">size</span>())</span><br><span class="line">                x += b.num[i];</span><br><span class="line">            ans.num.push_back(x % BASE);</span><br><span class="line">            g = x / BASE;</span><br><span class="line">        &#125;</span><br><span class="line">        ans.setLength();</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//负号</span></span><br><span class="line">    BigInteger <span class="keyword">operator</span>-() <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">BigInteger <span class="title">ans</span><span class="params">(*<span class="keyword">this</span>)</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (ans != <span class="number">0</span>)</span><br><span class="line">            ans.sign = !ans.sign;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// - 运算符</span></span><br><span class="line">    BigInteger <span class="keyword">operator</span>-(<span class="keyword">const</span> BigInteger &amp;b) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!b.sign)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span> + (-b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!sign)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> -((-*<span class="keyword">this</span>) + b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (*<span class="keyword">this</span> &lt; b)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> -(b - *<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        BigInteger ans;</span><br><span class="line">        ans.num.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, g = <span class="number">0</span>;; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (g == <span class="number">0</span> &amp;&amp; i &gt;= num.<span class="built_in">size</span>() &amp;&amp; i &gt;= b.num.<span class="built_in">size</span>())</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">int</span> x = g;</span><br><span class="line">            g = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; num.<span class="built_in">size</span>())</span><br><span class="line">                x += num[i];</span><br><span class="line">            <span class="keyword">if</span> (i &lt; b.num.<span class="built_in">size</span>())</span><br><span class="line">                x -= b.num[i];</span><br><span class="line">            <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                x += BASE;</span><br><span class="line">                g = <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans.num.push_back(x);</span><br><span class="line">        &#125;</span><br><span class="line">        ans.setLength();</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// * 运算符</span></span><br><span class="line">    BigInteger <span class="keyword">operator</span>*(<span class="keyword">const</span> BigInteger &amp;b) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> lena = num.<span class="built_in">size</span>(), lenb = b.num.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; ansLL;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lena + lenb; i++)</span><br><span class="line">            ansLL.push_back(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lena; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; lenb; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                ansLL[i + j] += (<span class="keyword">long</span> <span class="keyword">long</span>)num[i] * (<span class="keyword">long</span> <span class="keyword">long</span>)b.num[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (ansLL.back() == <span class="number">0</span> &amp;&amp; ansLL.<span class="built_in">size</span>() != <span class="number">1</span>)</span><br><span class="line">            ansLL.pop_back();</span><br><span class="line">        <span class="keyword">int</span> len = ansLL.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> g = <span class="number">0</span>, tmp;</span><br><span class="line">        BigInteger ans;</span><br><span class="line">        ans.sign = (ansLL.<span class="built_in">size</span>() == <span class="number">1</span> &amp;&amp; ansLL[<span class="number">0</span>] == <span class="number">0</span>) || (sign == b.sign);</span><br><span class="line">        ans.num.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp = ansLL[i];</span><br><span class="line">            ans.num.emplace_back((tmp + g) % BASE);</span><br><span class="line">            g = (tmp + g) / BASE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (g &gt; <span class="number">0</span>)</span><br><span class="line">            ans.num.emplace_back(g);</span><br><span class="line">        ans.setLength();</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// / 运算符 (大数除小数)</span></span><br><span class="line">    BigInteger <span class="keyword">operator</span>/(<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> &amp;b) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        BigInteger c;</span><br><span class="line">        c.num.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            c.num.push_back(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> g = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = num.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            c.num[i] = <span class="keyword">int</span>((num[i] + g * BASE) / b);</span><br><span class="line">            g = num[i] + g * BASE - c.num[i] * b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = num.<span class="built_in">size</span>() - <span class="number">1</span>; c.num[i] == <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            c.num.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// /运算符 (大数除大数)</span></span><br><span class="line">    BigInteger <span class="keyword">operator</span>/(<span class="keyword">const</span> BigInteger &amp;b) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">BigInteger <span class="title">aa</span><span class="params">((*<span class="keyword">this</span>).<span class="built_in">abs</span>())</span></span>;</span><br><span class="line">        <span class="function">BigInteger <span class="title">bb</span><span class="params">(b.<span class="built_in">abs</span>())</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (aa &lt; bb)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span> *str = <span class="keyword">new</span> <span class="keyword">char</span>[aa.<span class="built_in">size</span>() + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">memset</span>(str, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">char</span>) * (aa.<span class="built_in">size</span>() + <span class="number">1</span>));</span><br><span class="line">        BigInteger tmp;</span><br><span class="line">        <span class="keyword">int</span> lena = aa.length, lenb = bb.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= lena - lenb; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp = bb.e(lena - lenb - i);</span><br><span class="line">            <span class="keyword">while</span> (aa &gt;= tmp)</span><br><span class="line">            &#123;</span><br><span class="line">                ++str[i];</span><br><span class="line">                aa = aa - tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            str[i] += <span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">BigInteger <span class="title">ans</span><span class="params">(str)</span></span>;</span><br><span class="line">        <span class="keyword">delete</span>[] str;</span><br><span class="line">        ans.sign = (ans == <span class="number">0</span> || sign == b.sign);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// % 运算符 (大数取模小数)</span></span><br><span class="line">    BigInteger <span class="keyword">operator</span>%(<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> &amp;b) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = num.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            ans = (ans * BASE + num[i]) % b;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// %运算符 (大数取模大数)</span></span><br><span class="line">    BigInteger <span class="keyword">operator</span>%(<span class="keyword">const</span> BigInteger &amp;b) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> - *<span class="keyword">this</span> / b * b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BigInteger &amp;<span class="keyword">operator</span>++()</span><br><span class="line">    &#123;</span><br><span class="line">        *<span class="keyword">this</span> = *<span class="keyword">this</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125; <span class="comment">// ++ 运算符</span></span><br><span class="line">    BigInteger &amp;<span class="keyword">operator</span>--()</span><br><span class="line">    &#123;</span><br><span class="line">        *<span class="keyword">this</span> = *<span class="keyword">this</span> - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125; <span class="comment">// -- 运算符</span></span><br><span class="line">    BigInteger &amp;<span class="keyword">operator</span>+=(<span class="keyword">const</span> BigInteger &amp;b)</span><br><span class="line">    &#123;</span><br><span class="line">        *<span class="keyword">this</span> = *<span class="keyword">this</span> + b;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125; <span class="comment">// += 运算符</span></span><br><span class="line">    BigInteger &amp;<span class="keyword">operator</span>-=(<span class="keyword">const</span> BigInteger &amp;b)</span><br><span class="line">    &#123;</span><br><span class="line">        *<span class="keyword">this</span> = *<span class="keyword">this</span> - b;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125; <span class="comment">// -= 运算符</span></span><br><span class="line">    BigInteger &amp;<span class="keyword">operator</span>*=(<span class="keyword">const</span> BigInteger &amp;b)</span><br><span class="line">    &#123;</span><br><span class="line">        *<span class="keyword">this</span> = *<span class="keyword">this</span> * b;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125; <span class="comment">// *=运算符</span></span><br><span class="line">    BigInteger &amp;<span class="keyword">operator</span>/=(<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> &amp;b)</span><br><span class="line">    &#123;</span><br><span class="line">        *<span class="keyword">this</span> = *<span class="keyword">this</span> / b;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125; <span class="comment">// /=运算符</span></span><br><span class="line">    BigInteger &amp;<span class="keyword">operator</span>/=(<span class="keyword">const</span> BigInteger &amp;b)</span><br><span class="line">    &#123;</span><br><span class="line">        *<span class="keyword">this</span> = *<span class="keyword">this</span> / b;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125; <span class="comment">// /= 运算符</span></span><br><span class="line">    BigInteger &amp;<span class="keyword">operator</span>%=(<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> &amp;b)</span><br><span class="line">    &#123;</span><br><span class="line">        *<span class="keyword">this</span> = *<span class="keyword">this</span> % b;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125; <span class="comment">// %=运算符</span></span><br><span class="line">    BigInteger &amp;<span class="keyword">operator</span>%=(<span class="keyword">const</span> BigInteger &amp;b)</span><br><span class="line">    &#123;</span><br><span class="line">        *<span class="keyword">this</span> = *<span class="keyword">this</span> % b;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125; <span class="comment">// %=运算符</span></span><br><span class="line">      <span class="comment">// &lt; 运算符</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> BigInteger &amp;b) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (sign &amp;&amp; !b.sign)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="comment">//正负</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!sign &amp;&amp; b.sign)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="comment">//负正</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!sign &amp;&amp; !b.sign)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> -b &lt; -*<span class="keyword">this</span>;</span><br><span class="line">        &#125; <span class="comment">//负负</span></span><br><span class="line">        <span class="comment">//正正</span></span><br><span class="line">        <span class="keyword">if</span> (num.<span class="built_in">size</span>() != b.num.<span class="built_in">size</span>())</span><br><span class="line">            <span class="keyword">return</span> num.<span class="built_in">size</span>() &lt; b.num.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = num.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            <span class="keyword">if</span> (num[i] != b.num[i])</span><br><span class="line">                <span class="keyword">return</span> num[i] &lt; b.num[i];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(<span class="keyword">const</span> BigInteger &amp;b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> b &lt; *<span class="keyword">this</span>; &#125;                     <span class="comment">// &gt;  运算符</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;=(<span class="keyword">const</span> BigInteger &amp;b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> !(b &lt; *<span class="keyword">this</span>); &#125;                 <span class="comment">// &lt;= 运算符</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;=(<span class="keyword">const</span> BigInteger &amp;b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> !(*<span class="keyword">this</span> &lt; b); &#125;                 <span class="comment">// &gt;= 运算符</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> BigInteger &amp;b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> b &lt; *<span class="keyword">this</span> || *<span class="keyword">this</span> &lt; b; &#125;       <span class="comment">// != 运算符</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> BigInteger &amp;b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> !(b &lt; *<span class="keyword">this</span>) &amp;&amp; !(*<span class="keyword">this</span> &lt; b); &#125; <span class="comment">//==运算符</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>||(<span class="keyword">const</span> BigInteger &amp;b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> *<span class="keyword">this</span> != <span class="number">0</span> || b != <span class="number">0</span>; &#125; <span class="comment">// || 运算符</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&amp;&amp;(<span class="keyword">const</span> BigInteger &amp;b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> *<span class="keyword">this</span> != <span class="number">0</span> &amp;&amp; b != <span class="number">0</span>; &#125; <span class="comment">// &amp;&amp; 运算符</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>!() &#123; <span class="keyword">return</span> (<span class="keyword">bool</span>)(*<span class="keyword">this</span> == <span class="number">0</span>); &#125;                             <span class="comment">// ！ 运算符</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//重载&lt;&lt;使得可以直接输出大数</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="built_in">std</span>::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(<span class="built_in">std</span>::ostream &amp;out, <span class="keyword">const</span> BigInteger &amp;x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!x.sign)</span><br><span class="line">            out &lt;&lt; <span class="string">'-'</span>;</span><br><span class="line">        out &lt;&lt; x.num.back();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = x.num.<span class="built_in">size</span>() - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">char</span> buf[<span class="number">10</span>];</span><br><span class="line">            <span class="comment">//如WIDTH和BASR有变化,此处要修改为%0(WIDTH)d</span></span><br><span class="line">            <span class="built_in">sprintf</span>(buf, <span class="string">"%08d"</span>, x.num[i]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(buf); j++)</span><br><span class="line">                out &lt;&lt; buf[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重载&gt;&gt;使得可以直接输入大数</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="built_in">std</span>::istream &amp;<span class="keyword">operator</span>&gt;&gt;(<span class="built_in">std</span>::istream &amp;in, BigInteger &amp;x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">string</span> str;</span><br><span class="line">        in &gt;&gt; str;</span><br><span class="line">        <span class="keyword">size_t</span> len = str.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (str[<span class="number">0</span>] == <span class="string">'-'</span>)</span><br><span class="line">            start = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (str[start] == <span class="string">'\0'</span>)</span><br><span class="line">            <span class="keyword">return</span> in;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (str[i] &lt; <span class="string">'0'</span> || str[i] &gt; <span class="string">'9'</span>)</span><br><span class="line">                <span class="keyword">return</span> in;</span><br><span class="line">        &#125;</span><br><span class="line">        x.sign = !start;</span><br><span class="line">        x = str.c_str();</span><br><span class="line">        <span class="keyword">return</span> in;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">BigInteger <span class="title">pow</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        BigInteger ans = <span class="number">1</span>, base = *<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">while</span> (n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">                ans = ans * base;</span><br><span class="line">            base = base * base;</span><br><span class="line">            n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h1><h2 id="整数三分"><a href="#整数三分" class="headerlink" title="整数三分"></a>整数三分</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 凸函数</span></span><br><span class="line"><span class="keyword">int</span> l = <span class="number">1</span>, r = Max;</span><br><span class="line"><span class="keyword">while</span> (l != r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> x = (r - l + <span class="number">1</span>) / <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> mid1 = l + x - <span class="number">1</span>, mid2 = l + <span class="number">2</span> * x - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (mid1 == mid2)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> (f(mid1) &lt; f(mid2))</span><br><span class="line">        l = mid1 + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        r = mid2 - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="浮点数三分"><a href="#浮点数三分" class="headerlink" title="浮点数三分"></a>浮点数三分</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">while</span>(r - l &lt; EPS) &#123;</span><br><span class="line">    <span class="keyword">double</span> lmid = l + (r - l) / <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">double</span> rmid = r - (r - l) / <span class="number">3</span>;</span><br><span class="line">    lans = f(lmid),rans = f(rmid);</span><br><span class="line">    <span class="comment">// 求凹函数的极小值</span></span><br><span class="line">    <span class="keyword">if</span>(lans &lt;= rans) r = rmid;</span><br><span class="line">    <span class="keyword">else</span> l = lmid;</span><br><span class="line">    <span class="comment">// 求凸函数的极大值</span></span><br><span class="line">    <span class="keyword">if</span>(lans &gt;= rans) l = lmid;</span><br><span class="line">    <span class="keyword">else</span> r = rmid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出 l 或 r 都可</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; l &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h2 id="EXBSCG"><a href="#EXBSCG" class="headerlink" title="EXBSCG"></a>EXBSCG</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">exgcd</span><span class="params">(ll a, ll b, ll &amp;x, ll &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    ll gd = exgcd(b, a % b, y, x);</span><br><span class="line">    y -= a / b * x;</span><br><span class="line">    <span class="keyword">return</span> gd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a, ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b == <span class="number">0</span> ? a : gcd(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">inv</span><span class="params">(ll a, ll b)</span> <span class="comment">//逆元</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll x, y;</span><br><span class="line">    exgcd(a, b, x, y);</span><br><span class="line">    <span class="keyword">return</span> (x % b + b) % b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">BSGS</span><span class="params">(ll a, ll b, ll p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;ll, ll&gt; mp;</span><br><span class="line">    ll k = <span class="built_in">sqrt</span>(p) + <span class="number">1</span>;</span><br><span class="line">    ll tmp = b;</span><br><span class="line">    ll pa = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp = <span class="number">1l</span>l * tmp * a % p;</span><br><span class="line">        pa = <span class="number">1l</span>l * pa * a % p;</span><br><span class="line">        mp[tmp] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    ll now = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        now = <span class="number">1l</span>l * now * pa % p;</span><br><span class="line">        <span class="keyword">if</span> (mp[now])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> (i * k - mp[now] + <span class="number">2</span> * p) % p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">exBSGS</span><span class="params">(ll a, ll b, ll p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ll k = <span class="number">0</span>;</span><br><span class="line">    ll ad = <span class="number">1</span>, res;</span><br><span class="line">    <span class="keyword">while</span> (gcd(p, a) &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ll pr = gcd(p, a);</span><br><span class="line">        <span class="keyword">if</span> (b % pr)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        k++, p /= pr, b /= pr;</span><br><span class="line">        ad = (a / pr) * ad % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (res = BSGS(a, b * inv(ad, p) % p, p)) == <span class="number">-1</span> ? <span class="number">-1</span> : res + k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="矩阵快速幂"><a href="#矩阵快速幂" class="headerlink" title="矩阵快速幂"></a>矩阵快速幂</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ll a[M][M];</span><br><span class="line">    ll n, m;</span><br><span class="line">&#125; e;</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">mat_mul</span><span class="params">(Matrix x, Matrix y, ll P)</span> <span class="comment">//实现两个矩阵相乘，返回的还是一个矩阵。</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Matrix res; <span class="comment">//用来表示得到的新的矩阵；</span></span><br><span class="line">    <span class="built_in">memset</span>(res.a, <span class="number">0</span>, <span class="keyword">sizeof</span>(res.a));</span><br><span class="line">    res.n = x.n, res.m = y.m;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= res.n; i++)</span><br><span class="line">        <span class="keyword">for</span> (ll j = <span class="number">1</span>; j &lt;= res.m; j++)</span><br><span class="line">            <span class="keyword">for</span> (ll k = <span class="number">1</span>; k &lt;= x.m; k++)</span><br><span class="line">                res.a[i][j] = (res.a[i][j] + <span class="number">1l</span>l * x.a[i][k] * y.a[k][j] % P) % P;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">mqpow</span><span class="params">(Matrix x, ll y, ll P)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Matrix ans = e;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">            ans = mat_mul(ans, x, P);</span><br><span class="line">        x = mat_mul(x, x, P);</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中国剩余定理"><a href="#中国剩余定理" class="headerlink" title="中国剩余定理"></a>中国剩余定理</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a, ll b)</span> </span>&#123; <span class="keyword">return</span> b ? gcd(b, a % b) : a; &#125;</span><br><span class="line"><span class="function">ll <span class="title">mul</span><span class="params">(ll a, ll b, ll P)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = (a + a) % P)</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">            s = (s + a) % P;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">exgcd</span><span class="params">(ll a, ll b, ll &amp;x, ll &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    ll gd = exgcd(b, a % b, y, x);</span><br><span class="line">    y -= a / b * x;</span><br><span class="line">    <span class="keyword">return</span> gd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">CRT</span><span class="params">(<span class="keyword">int</span> *p, <span class="keyword">int</span> *a, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        res *= p[i];</span><br><span class="line">    <span class="comment">// cout &lt;&lt; res &lt;&lt; endl;</span></span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ll L = res / p[i];</span><br><span class="line">        ll x, y;</span><br><span class="line">        exgcd(L, p[i], x, y);</span><br><span class="line">        x = (x % p[i] + p[i]) % p[i];</span><br><span class="line">        ans = (ans + L * x % res * a[i] % res) % res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">EXCRT</span><span class="params">(ll *p, ll *a, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans = a[<span class="number">1</span>], lcm = p[<span class="number">1</span>], x, y;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">2</span>; i &lt;= len; i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        ll B = p[i], A = (a[i] - ans % B + B) % B;</span><br><span class="line">        ll gd = exgcd(lcm, B, x, y), bg = B / gd;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (A % gd)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        x = (x + bg) % bg;</span><br><span class="line">        x = mul(x, A / gd, bg);</span><br><span class="line">        ans += x * lcm;</span><br><span class="line">        lcm *= bg;</span><br><span class="line">        ans %= lcm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组合数模版"><a href="#组合数模版" class="headerlink" title="组合数模版"></a>组合数模版</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> math</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> x, <span class="keyword">int</span> mo)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (x &amp; <span class="number">1</span>)</span><br><span class="line">                res = <span class="number">1l</span>l * res * a % mod;</span><br><span class="line">            a = <span class="number">1l</span>l * a * a % mod;</span><br><span class="line">            x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> Fac[N], invFac[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Finit</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        invFac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            Fac[i] = <span class="number">1l</span>l * Fac[i - <span class="number">1</span>] * i % mod;</span><br><span class="line">        invFac[n] = qpow(Fac[n], mod - <span class="number">2</span>, mod);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">            invFac[i] = <span class="number">1l</span>l * invFac[i + <span class="number">1</span>] * (i + <span class="number">1</span>) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; m || m &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)(<span class="number">1l</span>l * Fac[n] * invFac[m] % mod * invFac[n - m] % mod);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// namespace math</span></span><br></pre></td></tr></table></figure><h2 id="欧拉降幂"><a href="#欧拉降幂" class="headerlink" title="欧拉降幂"></a>欧拉降幂</h2><script type="math/tex; mode=display">    a^b = \begin{cases}        a^{b\% \phi(p)} & gcd(a,p)=1 \\        a^{b} & gcd(a,p)!=1,b\leq\phi(p) \\        a^{b\% \phi(p)+\phi(p)} & gcd(a,p)!=1,b>\phi(p)\\    \end{cases}</script><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(m==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> pp=phi(m);</span><br><span class="line">    <span class="keyword">int</span> t=solve(a,b<span class="number">-1</span>,pp);</span><br><span class="line">    <span class="keyword">if</span>(t&lt;pp&amp;&amp;t) <span class="keyword">return</span> qpow(a,t,m);</span><br><span class="line">    <span class="keyword">return</span> qpow(a,t+pp,m);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线性基"><a href="#线性基" class="headerlink" title="$线性基$"></a>$线性基$</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinearBase</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ll p[MAXL];</span><br><span class="line">    <span class="keyword">int</span> pos[MAXL];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="keyword">sizeof</span>(p));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(ll x, <span class="keyword">int</span> po)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = MAXL - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (x &amp; (<span class="number">1l</span>l &lt;&lt; i))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!p[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    p[i] = x;</span><br><span class="line">                    pos[i] = po;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (po &gt; pos[i])</span><br><span class="line">                    swap(x, p[i]), swap(po, pos[i]);</span><br><span class="line">                x ^= p[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">query_max</span><span class="params">(ll x = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll res = x;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = MAXL - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            res = <span class="built_in">max</span>(res, res ^ p[i]);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ll <span class="title">query_min</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXL; i++)</span><br><span class="line">            <span class="keyword">if</span> (p[i])</span><br><span class="line">                <span class="keyword">return</span> p[i];</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rebuild</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = MAXL - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">                <span class="keyword">if</span> ((p[i] &gt;&gt; j) &amp; <span class="number">1</span>)</span><br><span class="line">                    p[i] ^= p[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mergeFrom</span><span class="params">(<span class="keyword">const</span> LinearBase &amp;other)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= MAXL; i++)</span><br><span class="line">            insert(other.p[i], <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">query_kth</span><span class="params">(ll k, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        rebuild();</span><br><span class="line">        <span class="built_in">vector</span>&lt;ll&gt;</span><br><span class="line">            pp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXL; ++i)</span><br><span class="line">            <span class="keyword">if</span> (p[i])</span><br><span class="line">                pp.push_back(p[i]);</span><br><span class="line">        <span class="keyword">if</span> (pp.<span class="built_in">size</span>() != n)</span><br><span class="line">            k--;</span><br><span class="line">        <span class="keyword">if</span> (k &gt; (<span class="number">1L</span>L &lt;&lt; pp.<span class="built_in">size</span>()) - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pp.<span class="built_in">size</span>(); ++i)</span><br><span class="line">            <span class="keyword">if</span> (k &amp; (<span class="number">1L</span>L &lt;&lt; i))</span><br><span class="line">            &#123;</span><br><span class="line">                ans ^= pp[i];</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; lb[N];</span><br></pre></td></tr></table></figure><h2 id="杜教筛"><a href="#杜教筛" class="headerlink" title="杜教筛"></a>杜教筛</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">7e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">bool</span> notprime[N];</span><br><span class="line">ll musum[N];</span><br><span class="line"><span class="keyword">int</span> prime[N], mu[N], cnt, head[MOD];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ll val;</span><br><span class="line">    ll key;</span><br><span class="line">    edge *nx;</span><br><span class="line">&#125; * ha[MOD];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(ll key, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge *Ha = <span class="keyword">new</span> edge;</span><br><span class="line">    *Ha = (edge)&#123;val, key, ha[key % MOD]&#125;;</span><br><span class="line">    ha[key % MOD] = Ha;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mublus</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!notprime[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; i &lt;&lt; endl;</span></span><br><span class="line">            prime[++cnt] = i;</span><br><span class="line">            mu[i] = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; prime[j] * i &lt; N; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            notprime[prime[j] * i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % prime[j])</span><br><span class="line">                mu[i * prime[j]] = -mu[i];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                mu[i * prime[j]] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++)</span><br><span class="line">        musum[i] = musum[i - <span class="number">1</span>] + mu[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">(ll k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k &lt; N)</span><br><span class="line">        <span class="keyword">return</span> musum[k];</span><br><span class="line">    <span class="keyword">int</span> x = k % MOD;</span><br><span class="line">    <span class="keyword">for</span> (edge *it = ha[x % MOD]; it; it = it-&gt;nx)</span><br><span class="line">        <span class="keyword">if</span> (it-&gt;key == k)</span><br><span class="line">            <span class="keyword">return</span> it-&gt;val;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">2</span>, j; i &lt;= k; i = j + <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        j = k / (k / i);</span><br><span class="line">        ans += (j - i + <span class="number">1</span>) * calc(k / i);</span><br><span class="line">    &#125;</span><br><span class="line">    ans = <span class="number">1</span> - ans;</span><br><span class="line">    insert(k, ans);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll a, b;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mublus();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, calc(b) - calc(a - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="多项式"><a href="#多项式" class="headerlink" title="多项式"></a>多项式</h1><h2 id="FFT"><a href="#FFT" class="headerlink" title="FFT"></a>FFT</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    Complex(<span class="keyword">double</span> _x = <span class="number">0.0</span>, <span class="keyword">double</span> _y = <span class="number">0.0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = _x;</span><br><span class="line">        y = _y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Complex <span class="keyword">operator</span>-(<span class="keyword">const</span> Complex &amp;b) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Complex(x - b.x, y - b.y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Complex <span class="keyword">operator</span>+(<span class="keyword">const</span> Complex &amp;b) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Complex(x + b.x, y + b.y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Complex <span class="keyword">operator</span>*(<span class="keyword">const</span> Complex &amp;b) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Complex(x * b.x - y * b.y, x * b.y + y * b.x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> rev[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FFT</span><span class="params">(Complex *A, <span class="keyword">int</span> n, <span class="keyword">int</span> inv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">if</span> (i &lt; rev[i])</span><br><span class="line">            swap(A[i], A[rev[i]]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l &lt; n; l &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">Complex <span class="title">temp</span><span class="params">(<span class="built_in">cos</span>(pi / l), inv * <span class="built_in">sin</span>(pi / l))</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += (l &lt;&lt; <span class="number">1</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function">Complex <span class="title">omega</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; l; j++, omega = omega * temp)</span><br><span class="line">            &#123;</span><br><span class="line">                Complex x = A[i + j], y = omega * A[i + j + l];</span><br><span class="line">                A[i + j] = x + y;</span><br><span class="line">                A[i + j + l] = x - y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (inv == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            A[i].x /= n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FFTX</span><span class="params">(Complex *a, <span class="keyword">int</span> n, Complex *b, <span class="keyword">int</span> m, Complex *ans)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ML = <span class="number">1</span>, <span class="built_in">bit</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ML &lt; n + m)</span><br><span class="line">        ML &lt;&lt;= <span class="number">1</span>, <span class="built_in">bit</span>++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ML; i++)</span><br><span class="line">        rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (<span class="built_in">bit</span> - <span class="number">1</span>));</span><br><span class="line">    FFT(a, ML, <span class="number">1</span>);</span><br><span class="line">    FFT(b, ML, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ML; i++)</span><br><span class="line">        ans[i] = a[i] * b[i];</span><br><span class="line">    FFT(ans, ML, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FWT"><a href="#FWT" class="headerlink" title="FWT"></a>FWT</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> x, <span class="keyword">int</span> mo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &amp; <span class="number">1</span>)</span><br><span class="line">            res = <span class="number">1l</span>l * res * a % mo;</span><br><span class="line">        x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a = <span class="number">1l</span>l * a * a % mo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inc</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> mo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y &lt; <span class="number">0</span>)</span><br><span class="line">        y += mo;</span><br><span class="line">    <span class="keyword">if</span> (x + y &gt;= mo)</span><br><span class="line">        x -= mo;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> Inv2;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FWT</span><span class="params">(<span class="keyword">int</span> *A, <span class="keyword">int</span> n, <span class="keyword">int</span> op, <span class="keyword">int</span> t)</span> <span class="comment">//t=1 or t=2 and t=3 xor</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, mid = i &gt;&gt; <span class="number">1</span>; j &lt; n; j += i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; mid; k++)</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (t == <span class="number">1</span>)</span><br><span class="line">                    A[j + mid + k] = inc(A[j + mid + k], A[j + k] * op, mod);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (t == <span class="number">2</span>)</span><br><span class="line">                    A[j + k] = inc(A[j + k], A[j + mid + k] * op, mod);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (t == <span class="number">3</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> x = A[j + k], y = A[j + mid + k];</span><br><span class="line">                    <span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line">                        A[j + k] = (x + y) % mod, A[j + mid + k] = (x - y + mod) % mod;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        A[j + k] = <span class="number">1l</span>l * Inv2 * (x + y) % mod, A[j + mid + k] = <span class="number">1l</span>l * Inv2 * (x - y + mod) % mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FWTX</span><span class="params">(<span class="keyword">int</span> *A, <span class="keyword">int</span> *B, <span class="keyword">int</span> n, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Inv2 = qpow(<span class="number">2</span>, mod - <span class="number">2</span>, mod);</span><br><span class="line">    FWT(A, n, <span class="number">1</span>, t), FWT(B, n, <span class="number">1</span>, t);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        A[i] = <span class="number">1l</span>l * A[i] * B[i] % mod;</span><br><span class="line">    FWT(A, n, <span class="number">-1</span>, t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原根"><a href="#原根" class="headerlink" title="原根"></a>原根</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> p, <span class="keyword">int</span> mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> base = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p &amp; <span class="number">1</span>)</span><br><span class="line">            base = <span class="number">1l</span>l * base * a % mod;</span><br><span class="line">        a = <span class="number">1l</span>l * a * a % mod;</span><br><span class="line">        p &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> base;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetG</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> q[MAXN];</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>, tp = x - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= tp; i++)</span><br><span class="line">    &#123; <span class="comment">//这里是i * i</span></span><br><span class="line">        <span class="keyword">if</span> (!(tp % i))</span><br><span class="line">        &#123;</span><br><span class="line">            q[++tot] = i;</span><br><span class="line">            <span class="keyword">while</span> (!(tp % i))</span><br><span class="line">                tp /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tp &gt; <span class="number">1</span>)</span><br><span class="line">        q[++tot] = tp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, j; i &lt;= x - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= tot; j++)</span><br><span class="line">            <span class="keyword">if</span> (fp(i, (x - <span class="number">1</span>) / q[j], x) == <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (j == tot + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> P;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;P);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, GetG(P));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="NTT"><a href="#NTT" class="headerlink" title="NTT"></a>NTT</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> x, <span class="keyword">int</span> mo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &amp; <span class="number">1</span>)</span><br><span class="line">            res = <span class="number">1l</span>l * res * a % mo;</span><br><span class="line">        x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a = <span class="number">1l</span>l * a * a % mo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> rev[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NTT</span><span class="params">(<span class="keyword">int</span> *A, <span class="keyword">int</span> n, <span class="keyword">int</span> inv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">if</span> (i &lt; rev[i])</span><br><span class="line">            swap(A[i], A[rev[i]]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l &lt; n; l &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tt = qpow(gi, (P - <span class="number">1</span>) / (l &lt;&lt; <span class="number">1</span>), P);</span><br><span class="line">        <span class="keyword">int</span> temp = (inv == <span class="number">1</span> ? tt : qpow(tt, P - <span class="number">2</span>, P));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += (l &lt;&lt; <span class="number">1</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> omega = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; l; j++, omega = <span class="number">1l</span>l * omega * temp % P)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> x = A[i + j], y = <span class="number">1l</span>l * omega * A[i + j + l] % P;</span><br><span class="line">                A[i + j] = inc(x, y, P);</span><br><span class="line">                A[i + j + l] = del(x, y, P);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> invv = qpow(n, P - <span class="number">2</span>, P);</span><br><span class="line">    <span class="keyword">if</span> (inv == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            A[i] = <span class="number">1l</span>l * A[i] * invv % P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NTTX</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> n, <span class="keyword">int</span> *b, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ML = <span class="number">1</span>, <span class="built_in">bit</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ML &lt; n + m)</span><br><span class="line">        ML &lt;&lt;= <span class="number">1</span>, <span class="built_in">bit</span>++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ML; i++)</span><br><span class="line">        rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (<span class="built_in">bit</span> - <span class="number">1</span>));</span><br><span class="line">    NTT(a, ML, <span class="number">1</span>);</span><br><span class="line">    NTT(b, ML, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ML; i++)</span><br><span class="line">        a[i] = <span class="number">1l</span>l * a[i] * b[i] % P;</span><br><span class="line">    NTT(a, ML, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MTT"><a href="#MTT" class="headerlink" title="MTT"></a>MTT</h2><h2 id="多项式求逆"><a href="#多项式求逆" class="headerlink" title="多项式求逆"></a>多项式求逆</h2><p>$a[0]!=0$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> Inv2;</span><br><span class="line"><span class="keyword">int</span> C[N], D[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Finv</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b[<span class="number">0</span>] = qpow(a[<span class="number">0</span>], P - <span class="number">2</span>, P);</span><br><span class="line">    <span class="keyword">int</span> len, ML;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">bit</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (len = <span class="number">1</span>; len &lt; (n &lt;&lt; <span class="number">1</span>); len &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ML = len &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">bit</span>++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">            C[i] = a[i], D[i] = b[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ML; i++)</span><br><span class="line">            rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (<span class="built_in">bit</span> - <span class="number">1</span>));</span><br><span class="line">        NTT(C, ML, <span class="number">1</span>), NTT(D, ML, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ML; i++)</span><br><span class="line">            b[i] = ((<span class="number">2l</span>l - <span class="number">1l</span>l * C[i] * D[i] % P) * D[i] % P + P) % P;</span><br><span class="line">        NTT(b, ML, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; ML; i++)</span><br><span class="line">            b[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        C[i] = D[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt; len; i++)</span><br><span class="line">        b[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多项式开根"><a href="#多项式开根" class="headerlink" title="多项式开根"></a>多项式开根</h2><p>$注意二次剩余$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> E[N], F[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sqrt</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Inv2 = qpow(<span class="number">2</span>, P - <span class="number">2</span>, P);</span><br><span class="line">    b[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">bit</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (len = <span class="number">1</span>; len &lt; (n &lt;&lt; <span class="number">1</span>); len &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ML = len &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">bit</span>++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">            E[i] = a[i];</span><br><span class="line">        Finv(b, F, len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ML; i++)</span><br><span class="line">            rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (<span class="built_in">bit</span> - <span class="number">1</span>));</span><br><span class="line">        NTT(E, ML, <span class="number">1</span>), NTT(F, ML, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ML; i++)</span><br><span class="line">            E[i] = <span class="number">1l</span>l * E[i] * F[i] % P;</span><br><span class="line">        NTT(E, ML, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">            b[i] = <span class="number">1L</span>L * (b[i] + E[i]) % P * Inv2 % P;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; ML; i++)</span><br><span class="line">            b[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        E[i] = F[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt; len; i++)</span><br><span class="line">        b[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多项式求-Ln"><a href="#多项式求-Ln" class="headerlink" title="多项式求$Ln$"></a>多项式求$Ln$</h2><p>$a[0]=1$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> aa[N], ia[N]; <span class="comment">// aa 表示a的导数，ia表示a的逆</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ln</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *res, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n &lt;&lt; <span class="number">1</span>; i++)</span><br><span class="line">        aa[i] = ia[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">        aa[i - <span class="number">1</span>] = <span class="number">1l</span>l * i * a[i] % P;</span><br><span class="line">    Finv(a, ia, n);</span><br><span class="line">    NTTX(aa, n, ia, n);</span><br><span class="line">    res[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">        res[i] = <span class="number">1l</span>l * aa[i - <span class="number">1</span>] * qpow(i, P - <span class="number">2</span>, P) % P;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多项式求-EXP"><a href="#多项式求-EXP" class="headerlink" title="多项式求$EXP$"></a>多项式求$EXP$</h2><p>$a[0]=0$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> G[N], H[N], M[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EXP</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Inv2 = qpow(<span class="number">2</span>, P - <span class="number">2</span>, P);</span><br><span class="line">    b[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">bit</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (len = <span class="number">1</span>; len &lt; (n &lt;&lt; <span class="number">1</span>); len &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ML = len &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">bit</span>++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len &lt;&lt; <span class="number">1</span>; i++)</span><br><span class="line">            H[i] = G[i] = M[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">            H[i] = a[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">            G[i] = b[i];</span><br><span class="line">        Ln(G, M, len); <span class="comment">// M(x)=lin(G)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ML; i++)</span><br><span class="line">            rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (<span class="built_in">bit</span> - <span class="number">1</span>));</span><br><span class="line">        NTT(G, ML, <span class="number">1</span>), NTT(H, ML, <span class="number">1</span>), NTT(M, ML, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ML; i++)</span><br><span class="line">            b[i] = <span class="number">1L</span>L * G[i] * (<span class="number">1l</span>l - M[i] + H[i] + P) % P;</span><br><span class="line">        NTT(b, ML, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; ML; i++)</span><br><span class="line">            b[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        G[i] = H[i] = M[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt; len; i++)</span><br><span class="line">        b[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多项式快速幂-a-0-1"><a href="#多项式快速幂-a-0-1" class="headerlink" title="多项式快速幂 $a_0=1$"></a>多项式快速幂 $a_0=1$</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> c[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Fpow</span><span class="params">(<span class="keyword">int</span> *f, <span class="keyword">int</span> k, <span class="keyword">int</span> n, <span class="keyword">int</span> *g)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Ln(f, c, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        c[i] = <span class="number">1l</span>l * c[i] * k % P;</span><br><span class="line">    EXP(c, g, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="子集卷积"><a href="#子集卷积" class="headerlink" title="子集卷积"></a>子集卷积</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> F[<span class="number">21</span>][N], G[<span class="number">21</span>][N];</span><br><span class="line"><span class="keyword">int</span> res[<span class="number">21</span>][N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FJU</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> n, <span class="keyword">int</span> *d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">1</span> &lt;&lt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        F[__builtin_popcount(i)][i] = a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        G[__builtin_popcount(i)][i] = b[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">        FWT(F[i], m, <span class="number">1</span>, <span class="number">1</span>), FWT(G[i], m, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt;= n; x++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= x; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">                res[x][j] = inc(res[x][j], <span class="number">1l</span>l * F[i][j] * G[x - i][j] % mod, mod);</span><br><span class="line">        FWT(res[x], m, <span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        d[i] = res[__builtin_popcount(i)][i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="treap"><a href="#treap" class="headerlink" title="treap"></a>treap</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls trp[pos].son[0]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs trp[pos].son[1]</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">500</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> son[<span class="number">2</span>], rd, val, cnt, sum;</span><br><span class="line">&#125; trp[N];</span><br><span class="line"><span class="keyword">int</span> tcnt = <span class="number">0</span>, root;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">newtrp</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos = ++tcnt;</span><br><span class="line">    trp[pos].cnt = trp[pos].sum = <span class="number">1</span>;</span><br><span class="line">    trp[pos].val = val;</span><br><span class="line">    trp[pos].rd = rand();</span><br><span class="line">    <span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    trp[pos].sum = trp[ls].sum + trp[rs].sum + trp[pos].cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> &amp;pos, <span class="keyword">int</span> d)</span> <span class="comment">//d=0左旋，d=1右旋</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = trp[pos].son[d];</span><br><span class="line">    trp[pos].son[d] = trp[k].son[d ^ <span class="number">1</span>];</span><br><span class="line">    trp[k].son[d ^ <span class="number">1</span>] = pos;</span><br><span class="line">    pushup(pos), pushup(k);</span><br><span class="line">    pos = k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;pos, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; 2333 &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">if</span> (!pos)</span><br><span class="line">    &#123;</span><br><span class="line">        pos = newtrp(val);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    trp[pos].sum++;</span><br><span class="line">    <span class="keyword">if</span> (trp[pos].val == val)</span><br><span class="line">    &#123;</span><br><span class="line">        trp[pos].cnt++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> d = trp[pos].val &lt; val;</span><br><span class="line">    insert(trp[pos].son[d], val);</span><br><span class="line">    <span class="keyword">if</span> (trp[pos].rd &gt; trp[trp[pos].son[d]].rd)</span><br><span class="line">        rotate(pos, d);</span><br><span class="line">    <span class="comment">//pushup(pos);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delect</span><span class="params">(<span class="keyword">int</span> &amp;pos, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pos)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (trp[pos].val == val)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (trp[pos].cnt &gt; <span class="number">1</span>)</span><br><span class="line">            trp[pos].cnt--,trp[pos].sum--;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (ls == <span class="number">0</span> || rs == <span class="number">0</span>)</span><br><span class="line">                pos = ls + rs;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> d = trp[ls].rd &gt; trp[rs].rd; <span class="comment">//把小的旋上来</span></span><br><span class="line">                rotate(pos, d), delect(pos, val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        trp[pos].sum--;</span><br><span class="line">        <span class="keyword">int</span> d = trp[pos].val &lt; val;</span><br><span class="line">        delect(trp[pos].son[d], val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getrank</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pos)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (trp[pos].val == val)</span><br><span class="line">        <span class="keyword">return</span> trp[ls].sum + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (trp[pos].val &lt; val)</span><br><span class="line">        <span class="keyword">return</span> trp[ls].sum + trp[pos].cnt + getrank(rs, val);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> getrank(ls, val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kth</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pos)</span><br><span class="line">        <span class="keyword">return</span> -inf;</span><br><span class="line">    <span class="keyword">if</span> (trp[ls].sum &gt;= k)</span><br><span class="line">        <span class="keyword">return</span> kth(ls, k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (k &gt;= trp[ls].sum + trp[pos].cnt + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> kth(rs, k - trp[ls].sum - trp[pos].cnt);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> trp[pos].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; pos &lt;&lt; " " &lt;&lt; trp[pos].val &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">if</span> (!pos)</span><br><span class="line">        <span class="keyword">return</span> -inf;</span><br><span class="line">    <span class="keyword">if</span> (trp[pos].val &gt;= val)</span><br><span class="line">        <span class="keyword">return</span> pre(ls, val);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(pre(rs, val), trp[pos].val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nxt</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pos)</span><br><span class="line">        <span class="keyword">return</span> inf;</span><br><span class="line">    <span class="keyword">if</span> (trp[pos].val &lt;= val)</span><br><span class="line">        <span class="keyword">return</span> nxt(rs, val);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(nxt(ls, val), trp[pos].val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">    root = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> p, x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;p, &amp;x);</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="number">1</span>)</span><br><span class="line">            insert(root, x);</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="number">2</span>)</span><br><span class="line">            delect(root, x);</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="number">3</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, getrank(root, x));</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="number">4</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, kth(root, x));</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="number">5</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, pre(root, x));</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="number">6</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, nxt(root, x));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Splay"><a href="#Splay" class="headerlink" title="Splay"></a>Splay</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls sp[pos].son[0]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs sp[pos].son[1]</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> fa[N], root, tcnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> son[<span class="number">2</span>], sum, cnt, val;</span><br><span class="line">&#125; sp[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sp[pos].sum = sp[pos].cnt + sp[ls].sum + sp[rs].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">conect</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> d, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sp[x].son[d] = y;</span><br><span class="line">    fa[y] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rorate</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y = fa[x], z = fa[y], d = (sp[y].son[<span class="number">1</span>] == x), dd = (sp[z].son[<span class="number">1</span>] == y);</span><br><span class="line">    conect(z, dd, x);</span><br><span class="line">    conect(y, d, sp[x].son[d ^ <span class="number">1</span>]);</span><br><span class="line">    conect(x, d ^ <span class="number">1</span>, y);</span><br><span class="line">    pushup(y), pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> goal)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (fa[x] != goal)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> y = fa[x], z = fa[y], d = (sp[y].son[<span class="number">1</span>] == x), dd = (sp[z].son[<span class="number">1</span>] == y);</span><br><span class="line">        <span class="keyword">if</span> (z != goal)</span><br><span class="line">            (d == dd) ? rorate(y) : rorate(x);</span><br><span class="line">        rorate(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (goal == <span class="number">0</span>)</span><br><span class="line">        root = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = root; <span class="comment">//rot为树根</span></span><br><span class="line">    <span class="keyword">if</span> (tmp == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">while</span> (sp[tmp].son[x &gt; sp[tmp].val] != <span class="number">0</span> &amp;&amp; x != sp[tmp].val)</span><br><span class="line">        tmp = sp[tmp].son[x &gt; sp[tmp].val];</span><br><span class="line">    splay(tmp, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; x &lt;&lt; " " &lt;&lt; root &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">int</span> tmp = root, ff = <span class="number">0</span>; <span class="comment">//rot为树根</span></span><br><span class="line">    <span class="comment">//cout &lt;&lt; sp[tmp].val &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">while</span> (tmp != <span class="number">0</span> &amp;&amp; x != sp[tmp].val)</span><br><span class="line">        ff = tmp, tmp = sp[tmp].son[x &gt; sp[tmp].val];</span><br><span class="line">    <span class="keyword">if</span> (x == sp[tmp].val)</span><br><span class="line">        sp[tmp].cnt++;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; 2333 &lt;&lt; endl;</span></span><br><span class="line">        tmp = ++tcnt;</span><br><span class="line">        <span class="keyword">if</span> (ff)</span><br><span class="line">            sp[ff].son[x &gt; sp[ff].val] = tmp;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            root = tcnt;</span><br><span class="line">        sp[tcnt].son[<span class="number">1</span>] = sp[tcnt].son[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        sp[tcnt].val = x;</span><br><span class="line">        fa[tcnt] = ff;</span><br><span class="line">        sp[tcnt].sum = sp[tcnt].cnt = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; 2333 &lt;&lt; endl;</span></span><br><span class="line">    splay(tmp, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">find</span>(x);</span><br><span class="line">    <span class="keyword">if</span> (x &gt; sp[root].val)</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    <span class="keyword">int</span> tmp = sp[root].son[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (!tmp)</span><br><span class="line">        <span class="keyword">return</span> -inf;</span><br><span class="line">    <span class="keyword">while</span> (sp[tmp].son[<span class="number">1</span>])</span><br><span class="line">        tmp = sp[tmp].son[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">nex</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">find</span>(x);</span><br><span class="line">    <span class="keyword">if</span> (x &lt; sp[root].val)</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    <span class="keyword">int</span> tmp = sp[root].son[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (!tmp)</span><br><span class="line">        <span class="keyword">return</span> inf;</span><br><span class="line">    <span class="keyword">while</span> (sp[tmp].son[<span class="number">0</span>])</span><br><span class="line">        tmp = sp[tmp].son[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delect</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sm = pre(x), bi = nex(x);</span><br><span class="line">    splay(sm, <span class="number">0</span>);</span><br><span class="line">    splay(bi, root);</span><br><span class="line">    <span class="keyword">int</span> tmp = sp[bi].son[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (sp[tmp].cnt &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sp[tmp].cnt--;</span><br><span class="line">        splay(tmp, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        sp[bi].son[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        pushup(root), pushup(bi);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kth</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos = root;</span><br><span class="line">    <span class="keyword">if</span> (sp[pos].sum &lt; k)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &lt;= sp[ls].sum)</span><br><span class="line">            pos = ls;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (k &lt;= sp[ls].sum + sp[pos].cnt)</span><br><span class="line">            <span class="keyword">return</span> sp[pos].val;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            k -= sp[ls].sum + sp[pos].cnt;</span><br><span class="line">            pos = rs;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">    root = <span class="number">0</span>;</span><br><span class="line">    insert(-inf);</span><br><span class="line">    insert(inf);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> p, x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;p, &amp;x);</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="number">1</span>)</span><br><span class="line">            insert(x);</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="number">2</span>)</span><br><span class="line">            delect(x);</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">find</span>(x);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sp[sp[root].son[<span class="number">0</span>]].sum);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (p == <span class="number">4</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, kth(x + <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="number">5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//insert(x);</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sp[pre(x)].val);</span><br><span class="line">            <span class="comment">//delect(x);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (p == <span class="number">6</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//insert(x);</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sp[nex(x)].val);</span><br><span class="line">            <span class="comment">//delect(x);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主席树"><a href="#主席树" class="headerlink" title="主席树"></a>主席树</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="区间线段树合并"><a href="#区间线段树合并" class="headerlink" title="区间线段树合并"></a>区间线段树合并</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">500000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, sum;</span><br><span class="line">    <span class="keyword">int</span> lmax, rmax, maxx;</span><br><span class="line">&#125; tree[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[num].lmax = flag;</span><br><span class="line">    tree[num].rmax = flag;</span><br><span class="line">    tree[num].maxx = flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[num].lmax = tree[num * <span class="number">2</span>].lmax;</span><br><span class="line">    tree[num].rmax = tree[num * <span class="number">2</span> + <span class="number">1</span>].rmax;</span><br><span class="line">    tree[num].maxx = <span class="built_in">max</span>(tree[num * <span class="number">2</span>].maxx, <span class="built_in">max</span>(tree[num * <span class="number">2</span> + <span class="number">1</span>].maxx, tree[num * <span class="number">2</span>].rmax + tree[num * <span class="number">2</span> + <span class="number">1</span>].lmax));</span><br><span class="line">    <span class="keyword">if</span> (tree[num * <span class="number">2</span>].lmax == tree[num * <span class="number">2</span>].r - tree[num * <span class="number">2</span>].l + <span class="number">1</span>)</span><br><span class="line">        tree[num].lmax += tree[num * <span class="number">2</span> + <span class="number">1</span>].lmax;</span><br><span class="line">    <span class="keyword">if</span> (tree[num * <span class="number">2</span> + <span class="number">1</span>].rmax == tree[num * <span class="number">2</span> + <span class="number">1</span>].r - tree[num * <span class="number">2</span> + <span class="number">1</span>].l + <span class="number">1</span>)</span><br><span class="line">        tree[num].rmax += tree[num * <span class="number">2</span>].rmax;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[num].l = l;</span><br><span class="line">    tree[num].r = r;</span><br><span class="line">    tree[num].lmax = tree[num].rmax = tree[num].maxx = r - l + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build(l, mid, num * <span class="number">2</span>);</span><br><span class="line">    build(mid + <span class="number">1</span>, r, num * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//push(num);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> <span class="built_in">find</span>, <span class="keyword">int</span> flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree[num].l == tree[num].r)</span><br><span class="line">    &#123;</span><br><span class="line">        change(num, flag);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (tree[num].l + tree[num].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">find</span> &lt;= mid)</span><br><span class="line">        add(num * <span class="number">2</span>, <span class="built_in">find</span>, flag);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        add(num * <span class="number">2</span> + <span class="number">1</span>, <span class="built_in">find</span>, flag);</span><br><span class="line">    push(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> <span class="built_in">find</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree[num].l == tree[num].r || tree[num].maxx == <span class="number">0</span> || tree[num].maxx == tree[num].r - tree[num].l + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> tree[num].maxx;</span><br><span class="line">    <span class="keyword">int</span> mid = (tree[num].l + tree[num].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">find</span> &lt;= mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span> &gt;= tree[num * <span class="number">2</span>].r - tree[num * <span class="number">2</span>].rmax + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> tree[num * <span class="number">2</span>].rmax + tree[num * <span class="number">2</span> + <span class="number">1</span>].lmax;</span><br><span class="line">        <span class="keyword">return</span> f(num * <span class="number">2</span>, <span class="built_in">find</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span> &lt;= tree[num * <span class="number">2</span> + <span class="number">1</span>].lmax + tree[num * <span class="number">2</span> + <span class="number">1</span>].l - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> tree[num * <span class="number">2</span> + <span class="number">1</span>].lmax + tree[num * <span class="number">2</span>].rmax;</span><br><span class="line">        <span class="keyword">return</span> f(num * <span class="number">2</span> + <span class="number">1</span>, <span class="built_in">find</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">int</span> A;</span><br><span class="line">    <span class="keyword">char</span> ch[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        build(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span> (!s.empty())</span><br><span class="line">            s.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; tree[1].maxx &lt;&lt; endl;</span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, ch);</span><br><span class="line">            <span class="keyword">if</span> (ch[<span class="number">0</span>] == <span class="string">'D'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;A);</span><br><span class="line">                s.push(A);</span><br><span class="line">                add(<span class="number">1</span>, A, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ch[<span class="number">0</span>] == <span class="string">'R'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!s.empty())</span><br><span class="line">                &#123;</span><br><span class="line">                    add(<span class="number">1</span>, s.top(), <span class="number">1</span>);</span><br><span class="line">                    s.pop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ch[<span class="number">0</span>] == <span class="string">'Q'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;A);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f(<span class="number">1</span>, A));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线段树合并-空间-O-n"><a href="#线段树合并-空间-O-n" class="headerlink" title="线段树合并(空间$O(n)$)"></a>线段树合并(空间$O(n)$)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> STN = <span class="number">4e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> sum[STN], scnt, tl[STN], tr[STN];</span><br><span class="line">    <span class="keyword">int</span> id[STN];</span><br><span class="line">    <span class="keyword">int</span> s[STN], top;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Newnode</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (top)</span><br><span class="line">            <span class="keyword">return</span> s[top--];</span><br><span class="line">        <span class="keyword">return</span> ++scnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sum[pos] = id[pos] = tl[pos] = tr[pos] = <span class="number">0</span>;</span><br><span class="line">        s[++top] = pos;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sum[pos] = <span class="built_in">max</span>(sum[ls], sum[rs]);</span><br><span class="line">        id[pos] = (sum[ls] &gt;= sum[rs]) ? id[ls] : id[rs];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> w, <span class="keyword">int</span> &amp;pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!pos)</span><br><span class="line">            pos = Newnode();</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr)</span><br><span class="line">        &#123;</span><br><span class="line">            sum[pos] += w;</span><br><span class="line">            id[pos] = l;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= mid)</span><br><span class="line">            update(ql, qr, w, ls, l, mid);</span><br><span class="line">        <span class="keyword">if</span> (qr &gt; mid)</span><br><span class="line">            update(ql, qr, w, rs, mid + <span class="number">1</span>, r);</span><br><span class="line">        pushup(pos);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> &amp;u, <span class="keyword">int</span> v, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!u || !v)</span><br><span class="line">        &#123;</span><br><span class="line">            u = u + v;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">        &#123;</span><br><span class="line">            sum[u] = sum[u] + sum[v];</span><br><span class="line">            <span class="built_in">clear</span>(v);</span><br><span class="line"></span><br><span class="line">            id[u] = l;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        merge(tl[u], tl[v], l, mid);</span><br><span class="line">        merge(tr[u], tr[v], mid + <span class="number">1</span>, r);</span><br><span class="line">        pushup(u);</span><br><span class="line">        <span class="built_in">clear</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; T;</span><br></pre></td></tr></table></figure><h1 id="网络流"><a href="#网络流" class="headerlink" title="网络流"></a>网络流</h1><h2 id="EK-最大流"><a href="#EK-最大流" class="headerlink" title="EK 最大流"></a>EK 最大流</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, cap, nxt;</span><br><span class="line">    Edge() &#123;&#125;</span><br><span class="line">    Edge(<span class="keyword">int</span> v, <span class="keyword">int</span> c, <span class="keyword">int</span> t) : to(v), cap(c), nxt(t) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> EN = <span class="number">300</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> EM = <span class="number">5000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EK</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">    Edge e[EM &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> head[EN], scnt;</span><br><span class="line">    ll f[EN];</span><br><span class="line">    pii pre[EN];</span><br><span class="line">    EK() &#123; scnt = <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        e[++scnt] = Edge(v, w, head[u]);</span><br><span class="line">        head[u] = scnt;</span><br><span class="line">        e[++scnt] = Edge(u, <span class="number">0</span>, head[v]);</span><br><span class="line">        head[v] = scnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line"></span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        f[s] = INF;</span><br><span class="line">        q.push(s);</span><br><span class="line">        <span class="keyword">while</span> (!q.empty())</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> x = q.front();</span><br><span class="line"></span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i; i = e[i].nxt)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> to = e[i].to;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!f[to] &amp;&amp; e[i].cap)</span><br><span class="line">                &#123;</span><br><span class="line">                    pre[to] = mk(x, i);</span><br><span class="line">                    f[to] = <span class="built_in">min</span>(f[x], (ll)e[i].cap);</span><br><span class="line">                    q.push(to);</span><br><span class="line">                    <span class="keyword">if</span> (to == t)</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">Maxflow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll flow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (bfs(s, t))</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> u = t; u != s; u = pre[u].first)</span><br><span class="line">            &#123;</span><br><span class="line">                e[pre[u].second].cap -= f[t];</span><br><span class="line">                e[pre[u].second ^ <span class="number">1</span>].cap += f[t];</span><br><span class="line">            &#125;</span><br><span class="line">            flow += f[t];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; ek;</span><br></pre></td></tr></table></figure><h2 id="Dinic-最大流"><a href="#Dinic-最大流" class="headerlink" title="Dinic 最大流"></a>Dinic 最大流</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, w, nxt;</span><br><span class="line">    Edge() &#123;&#125;</span><br><span class="line">    Edge(<span class="keyword">int</span> v, <span class="keyword">int</span> c, <span class="keyword">int</span> t) : to(v), w(c), nxt(t) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> EN = <span class="number">300</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> EM = <span class="number">5000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dinic</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">    Edge e[EM &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> head[EN], scnt, d[EN], cur[EN];</span><br><span class="line">    pii pre[EN];</span><br><span class="line">    Dinic() &#123; scnt = <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        e[++scnt] = Edge(v, w, head[u]);</span><br><span class="line">        head[u] = scnt;</span><br><span class="line">        e[++scnt] = Edge(u, <span class="number">0</span>, head[v]);</span><br><span class="line">        head[v] = scnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span>(d));</span><br><span class="line">        q.push(s);</span><br><span class="line">        d[s] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i; i = e[i].nxt)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> to = e[i].to;</span><br><span class="line">                <span class="keyword">if</span> (!d[to] &amp;&amp; e[i].w)</span><br><span class="line">                &#123;</span><br><span class="line">                    d[to] = d[x] + <span class="number">1</span>;</span><br><span class="line">                    q.push(to);</span><br><span class="line">                    <span class="keyword">if</span> (to == t)</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> t, <span class="keyword">int</span> flow)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == t)</span><br><span class="line">            <span class="keyword">return</span> flow;</span><br><span class="line">        ll res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = cur[x]; i; i = e[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            cur[x] = i;</span><br><span class="line">            <span class="keyword">int</span> to = e[i].to;</span><br><span class="line">            <span class="keyword">if</span> (d[to] == d[x] + <span class="number">1</span> &amp;&amp; e[i].w)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> dis = dfs(to, t, <span class="built_in">min</span>(flow, e[i].w));</span><br><span class="line">                <span class="keyword">if</span> (dis)</span><br><span class="line">                &#123;</span><br><span class="line">                    e[i].w -= dis;</span><br><span class="line">                    e[i ^ <span class="number">1</span>].w += dis;</span><br><span class="line">                    flow -= dis;</span><br><span class="line">                    res += dis;</span><br><span class="line">                    <span class="keyword">if</span> (!flow)</span><br><span class="line">                        <span class="keyword">return</span> res;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">Maxflow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (bfs(s, t))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">memcpy</span>(cur, head, <span class="keyword">sizeof</span>(head));</span><br><span class="line">            ans += dfs(s, t, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; dinic;</span><br></pre></td></tr></table></figure><h2 id="类-Dinic-费用流"><a href="#类-Dinic-费用流" class="headerlink" title="类 Dinic 费用流"></a>类 Dinic 费用流</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, w, nxt, f;</span><br><span class="line">    Edge() &#123;&#125;</span><br><span class="line">    Edge(<span class="keyword">int</span> v, <span class="keyword">int</span> c, <span class="keyword">int</span> t, <span class="keyword">int</span> k) : to(v), w(c), nxt(t), f(k) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> EN = <span class="number">5e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> EM = <span class="number">5e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LeiDinic</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">    Edge e[EM &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> head[EN], scnt, dis[EN], vis[EN], cur[EN];</span><br><span class="line">    <span class="keyword">int</span> cost;</span><br><span class="line">    LeiDinic() &#123; scnt = <span class="number">1</span>, cost = <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        e[++scnt] = Edge(v, w, head[u], k);</span><br><span class="line">        head[u] = scnt;</span><br><span class="line">        e[++scnt] = Edge(u, <span class="number">0</span>, head[v], -k); <span class="comment">///!!!!</span></span><br><span class="line">        head[v] = scnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="built_in">memset</span>(dis, INF, <span class="keyword">sizeof</span>(dis));</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        dis[s] = <span class="number">0</span>;</span><br><span class="line">        vis[s] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        q.push(s);</span><br><span class="line">        <span class="keyword">while</span> (!q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            vis[x] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i; i = e[i].nxt)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> to = e[i].to;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (dis[to] &gt; dis[x] + e[i].f &amp;&amp; e[i].w)</span><br><span class="line">                &#123;</span><br><span class="line">                    dis[to] = dis[x] + e[i].f;</span><br><span class="line">                    <span class="keyword">if</span> (!vis[to])</span><br><span class="line">                    &#123;</span><br><span class="line">                        vis[to] = <span class="number">1</span>;</span><br><span class="line">                        q.push(to);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dis[t] != INF;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> t, <span class="keyword">int</span> flow)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == t)</span><br><span class="line">            <span class="keyword">return</span> flow;</span><br><span class="line">        vis[x] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = cur[x]; i &amp;&amp; res &lt; flow; i = e[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            cur[x] = i;</span><br><span class="line">            <span class="keyword">int</span> to = e[i].to;</span><br><span class="line">            <span class="keyword">if</span> (!vis[to] &amp;&amp; dis[to] == dis[x] + e[i].f &amp;&amp; e[i].w)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> dis = dfs(to, t, <span class="built_in">min</span>(flow - res, e[i].w));</span><br><span class="line">                <span class="keyword">if</span> (dis)</span><br><span class="line">                &#123;</span><br><span class="line">                    e[i].w -= dis;</span><br><span class="line">                    e[i ^ <span class="number">1</span>].w += dis;</span><br><span class="line">                    cost += e[i].f * dis;</span><br><span class="line">                    res += dis;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[x] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">pii <span class="title">Maxflow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, tmp;</span><br><span class="line">        <span class="keyword">while</span> (spfa(s, t))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">memcpy</span>(cur, head, <span class="keyword">sizeof</span>(head));</span><br><span class="line">            <span class="keyword">while</span> ((tmp = dfs(s, t, INF)))</span><br><span class="line">                ans += tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mk(ans, cost);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; dc;</span><br></pre></td></tr></table></figure><h2 id="MCMF-费用流"><a href="#MCMF-费用流" class="headerlink" title="MCMF 费用流"></a>MCMF 费用流</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, cap, nxt, f;</span><br><span class="line">    Edge() &#123;&#125;</span><br><span class="line">    Edge(<span class="keyword">int</span> v, <span class="keyword">int</span> c, <span class="keyword">int</span> t, <span class="keyword">int</span> k) : to(v), cap(c), nxt(t), f(k) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> EN = <span class="number">5e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> EM = <span class="number">5e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MCMF</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">    Edge e[EM &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> head[EN], scnt;</span><br><span class="line">    <span class="keyword">int</span> f[EN], dis[EN], vis[EN];</span><br><span class="line">    pii pre[EN];</span><br><span class="line">    MCMF() &#123; scnt = <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        e[++scnt] = Edge(v, w, head[u], k);</span><br><span class="line">        head[u] = scnt;</span><br><span class="line">        e[++scnt] = Edge(u, <span class="number">0</span>, head[v], -k); <span class="comment">///!!!!</span></span><br><span class="line">        head[v] = scnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="built_in">memset</span>(dis, INF, <span class="keyword">sizeof</span>(dis));</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        dis[s] = <span class="number">0</span>;</span><br><span class="line">        vis[s] = <span class="number">1</span>;</span><br><span class="line">        f[s] = INF;</span><br><span class="line">        q.push(s);</span><br><span class="line">        <span class="keyword">while</span> (!q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            vis[x] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i; i = e[i].nxt)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> to = e[i].to;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (dis[to] &gt; dis[x] + e[i].f &amp;&amp; e[i].cap)</span><br><span class="line">                &#123;</span><br><span class="line">                    pre[to] = mk(x, i);</span><br><span class="line">                    dis[to] = dis[x] + e[i].f;</span><br><span class="line">                    f[to] = <span class="built_in">min</span>(f[x], e[i].cap);</span><br><span class="line">                    <span class="keyword">if</span> (!vis[to])</span><br><span class="line">                    &#123;</span><br><span class="line">                        vis[to] = <span class="number">1</span>;</span><br><span class="line">                        q.push(to);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dis[t] != INF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">pii <span class="title">Maxflow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> flow = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (spfa(s, t))</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> u = t; u != s; u = pre[u].first)</span><br><span class="line">            &#123;</span><br><span class="line">                e[pre[u].second].cap -= f[t];</span><br><span class="line">                e[pre[u].second ^ <span class="number">1</span>].cap += f[t];</span><br><span class="line">                res += e[pre[u].second].f * f[t];</span><br><span class="line">            &#125;</span><br><span class="line">            flow += f[t];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mk(flow, res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; mc;</span><br></pre></td></tr></table></figure><h1 id="树论"><a href="#树论" class="headerlink" title="树论"></a>树论</h1><h2 id="点分治-1"><a href="#点分治-1" class="headerlink" title="点分治 1"></a>点分治 1</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> siz[N], f[N], vis[N];</span><br><span class="line"><span class="keyword">int</span> rt, gcnt;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetRoot</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    siz[x] = <span class="number">1</span>;</span><br><span class="line">    f[x] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> to : g[x])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (to == fa || vis[to])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        GetRoot(to, x);</span><br><span class="line">        siz[x] += siz[to];</span><br><span class="line">        f[x] = <span class="built_in">max</span>(f[x], siz[to]);</span><br><span class="line">    &#125;</span><br><span class="line">    f[x] = <span class="built_in">max</span>(f[x], gcnt - siz[x]);</span><br><span class="line">    <span class="keyword">if</span> (f[x] &lt; f[rt])</span><br><span class="line">        rt = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    vis[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> to : g[x])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[to])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        gcnt = siz[to];</span><br><span class="line">        rt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        GetRoot(to, x);</span><br><span class="line"></span><br><span class="line">        solve(rt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="点分治-2"><a href="#点分治-2" class="headerlink" title="点分治 2"></a>点分治 2</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetRoot</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa, <span class="keyword">int</span> gcnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    siz[x] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    f[x] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> to : g[x])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (to == fa || vis[to])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        GetRoot(to, x, gcnt);</span><br><span class="line">        siz[x] += siz[to];</span><br><span class="line">        f[x] = <span class="built_in">max</span>(f[x], siz[to]);</span><br><span class="line">    &#125;</span><br><span class="line">    f[x] = <span class="built_in">max</span>(f[x], gcnt - siz[x]);</span><br><span class="line">    <span class="keyword">if</span> (f[x] &lt; f[rt])</span><br><span class="line">        rt = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> gcnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vis[x] = <span class="number">1</span>;</span><br><span class="line">    dsiz[x] = gcnt;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> to : g[x])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[to])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        rt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> k = (siz[to] &lt; siz[x]) ? siz[to] : (gcnt - siz[x]);</span><br><span class="line"></span><br><span class="line">        GetRoot(to, x, k);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//father[rt] = x;</span></span><br><span class="line">        solve(rt, k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="树链剖分"><a href="#树链剖分" class="headerlink" title="树链剖分"></a>树链剖分</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200000</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">int</span> next;</span><br><span class="line">&#125; e[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, lazy, sum;</span><br><span class="line">&#125; tree[N * <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[N], d[N], si[N], son[N], father[N], id[N];</span><br><span class="line"><span class="keyword">int</span> a[N], w[N], top[N];</span><br><span class="line"><span class="keyword">int</span> cnt, n, m, mod, root, num;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[pos].sum = (tree[pos * <span class="number">2</span>].sum + tree[pos * <span class="number">2</span> + <span class="number">1</span>].sum) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree[pos].lazy)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> add = tree[pos].lazy % mod;</span><br><span class="line">        tree[pos * <span class="number">2</span>].lazy += add;</span><br><span class="line">        tree[pos * <span class="number">2</span> + <span class="number">1</span>].lazy += add;</span><br><span class="line">        tree[pos * <span class="number">2</span>].sum += add * (tree[pos * <span class="number">2</span>].r - tree[pos * <span class="number">2</span>].l + <span class="number">1</span>) % mod;</span><br><span class="line">        tree[pos * <span class="number">2</span> + <span class="number">1</span>].sum += add * (tree[pos * <span class="number">2</span> + <span class="number">1</span>].r - tree[pos * <span class="number">2</span> + <span class="number">1</span>].l + <span class="number">1</span>) % mod;</span><br><span class="line">        tree[pos].lazy = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[pos].l = l;</span><br><span class="line">    tree[pos].r = r;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[pos].sum = w[l] % mod;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build(pos * <span class="number">2</span>, l, mid);</span><br><span class="line">    build(pos * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    push(pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ad)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= tree[pos].l &amp;&amp; tree[pos].r &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[pos].lazy += ad;</span><br><span class="line">        tree[pos].sum += ad % mod * (tree[pos].r - tree[pos].l + <span class="number">1</span>) % mod;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(pos);</span><br><span class="line">    <span class="keyword">int</span> mid = (tree[pos].l + tree[pos].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= mid)</span><br><span class="line">        add(pos * <span class="number">2</span>, l, r, ad);</span><br><span class="line">    <span class="keyword">if</span> (r &gt; mid)</span><br><span class="line">        add(pos * <span class="number">2</span> + <span class="number">1</span>, l, r, ad);</span><br><span class="line">    push(pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= tree[pos].l &amp;&amp; tree[pos].r &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[pos].sum % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(pos);</span><br><span class="line">    <span class="keyword">int</span> mid = (tree[pos].l + tree[pos].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= mid)</span><br><span class="line">        ans = (ans + <span class="built_in">find</span>(pos * <span class="number">2</span>, l, r)) % mod;</span><br><span class="line">    <span class="keyword">if</span> (r &gt; mid)</span><br><span class="line">        ans = (ans + <span class="built_in">find</span>(pos * <span class="number">2</span> + <span class="number">1</span>, l, r)) % mod;</span><br><span class="line">    <span class="comment">//push(pos);</span></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++cnt].to = y;</span><br><span class="line">    e[cnt].next = head[x];</span><br><span class="line">    head[x] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> f, <span class="keyword">int</span> deep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    d[x] = deep;</span><br><span class="line">    father[x] = f;</span><br><span class="line">    si[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> maxson = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i != <span class="number">0</span>; i = e[i].next)</span><br><span class="line">        <span class="keyword">if</span> (e[i].to != f)</span><br><span class="line">        &#123;</span><br><span class="line">            dfs1(e[i].to, x, deep + <span class="number">1</span>);</span><br><span class="line">            si[x] += si[e[i].to];</span><br><span class="line">            <span class="keyword">if</span> (maxson &lt; si[e[i].to])</span><br><span class="line">            &#123;</span><br><span class="line">                maxson = si[e[i].to];</span><br><span class="line">                son[x] = e[i].to;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> topf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    id[x] = ++num;</span><br><span class="line">    w[num] = a[x];</span><br><span class="line">    top[x] = topf;</span><br><span class="line">    <span class="keyword">if</span> (!son[x])</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    dfs2(son[x], topf);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i != <span class="number">0</span>; i = e[i].next)</span><br><span class="line">        <span class="keyword">if</span> (e[i].to != son[x] &amp;&amp; e[i].to != father[x])</span><br><span class="line">            dfs2(e[i].to, e[i].to);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qrange</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (top[u] != top[v])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (d[top[u]] &lt; d[top[v]])</span><br><span class="line">            swap(u, v);</span><br><span class="line">        ans = (ans + <span class="built_in">find</span>(<span class="number">1</span>, id[top[u]], id[u])) % mod;</span><br><span class="line">        u = father[top[u]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (d[u] &gt; d[v])</span><br><span class="line">        swap(u, v);</span><br><span class="line">    ans = (ans + <span class="built_in">find</span>(<span class="number">1</span>, id[u], id[v])) % mod;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">arange</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> ad)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (top[u] != top[v])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (d[top[u]] &lt; d[top[v]])</span><br><span class="line">            swap(u, v);</span><br><span class="line">        add(<span class="number">1</span>, id[top[u]], id[u], ad);</span><br><span class="line">        u = father[top[u]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (d[u] &gt; d[v])</span><br><span class="line">        swap(u, v);</span><br><span class="line">    add(<span class="number">1</span>, id[u], id[v], ad);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qson</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="built_in">find</span>(<span class="number">1</span>, id[u], id[u] + si[u] - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ason</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> ad)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    add(<span class="number">1</span>, id[u], id[u] + si[u] - <span class="number">1</span>, ad);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;m, &amp;root, &amp;mod);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        add(u, v);</span><br><span class="line">        add(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; 1 &lt;&lt; endl;</span></span><br><span class="line">    dfs1(root, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    dfs2(root, root);</span><br><span class="line">    build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="comment">//cout &lt;&lt; tree[1].sum &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//cout &lt;&lt; m &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> p, x, y, z;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; 21 &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;p);</span><br><span class="line">        <span class="comment">//cout &lt;&lt; p &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">if</span> (p == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;x, &amp;y, &amp;z);</span><br><span class="line">            arange(x, y, z);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, qrange(x, y));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p == <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;z);</span><br><span class="line">            ason(x, z);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p == <span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, qson(x));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="莫队"><a href="#莫队" class="headerlink" title="莫队"></a>莫队</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,id;</span><br><span class="line">&#125;Q[maxn];</span><br><span class="line"><span class="keyword">int</span> pos[maxn];<span class="comment">//保存所在块</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> node &amp;a,<span class="keyword">const</span> node &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos[a.l]==pos[b.l])</span><br><span class="line">        <span class="keyword">return</span> a.r&lt;b.r;</span><br><span class="line">    <span class="keyword">return</span> pos[a.l]&lt;pos[b.l];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line">ll ans[maxn];<span class="comment">//保存每个查询得答案</span></span><br><span class="line"><span class="keyword">int</span> L=<span class="number">0</span>,R=<span class="number">0</span>;<span class="comment">//多组记得重置</span></span><br><span class="line">ll Ans=<span class="number">0</span>;<span class="comment">//多组记得重置</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">    <span class="keyword">int</span> sz=<span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        a[i]=a[i]^a[i<span class="number">-1</span>];</span><br><span class="line">        pos[i]=i/sz;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;Q[i].l,&amp;Q[i].r);</span><br><span class="line">        Q[i].id=i;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(Q+<span class="number">1</span>,Q+<span class="number">1</span>+m,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(R&lt;Q[i].r)</span><br><span class="line">        &#123;</span><br><span class="line">            R++;</span><br><span class="line">            add(R);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(L+<span class="number">1</span>&gt;Q[i].l)</span><br><span class="line">        &#123;</span><br><span class="line">            L--;</span><br><span class="line">            add(L);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(L+<span class="number">1</span>&lt;Q[i].l)</span><br><span class="line">        &#123;</span><br><span class="line">            del(L);</span><br><span class="line">            L++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(R&gt;Q[i].r)</span><br><span class="line">        &#123;</span><br><span class="line">            del(R);</span><br><span class="line">            R--;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[Q[i].id]=Ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="dp"><a href="#dp" class="headerlink" title="dp"></a>dp</h1><h2 id="2D1D-动态规划"><a href="#2D1D-动态规划" class="headerlink" title="2D1D 动态规划"></a>2D1D 动态规划</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">2</span>; len &lt;= n; ++len)  <span class="comment">// 枚举区间长度</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>, r = len; r &lt;= n; ++l, ++r) &#123;</span><br><span class="line">    <span class="comment">// 枚举长度为len的所有区间</span></span><br><span class="line">    f[l][r] = INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = m[l][r - <span class="number">1</span>]; k &lt;= m[l + <span class="number">1</span>][r]; ++k)</span><br><span class="line">      <span class="keyword">if</span> (f[l][r] &gt; f[l][k] + f[k + <span class="number">1</span>][r] + w(l, r)) &#123;</span><br><span class="line">        f[l][r] = f[l][k] + f[k + <span class="number">1</span>][r] + w(l, r);  <span class="comment">// 更新状态值</span></span><br><span class="line">        m[l][r] = k;  <span class="comment">// 更新（最小）最优决策点</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="1D1D-动态规划"><a href="#1D1D-动态规划" class="headerlink" title="1D1D 动态规划"></a>1D1D 动态规划</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r &lt; l)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> maxn = <span class="number">0</span>, p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = L; i &lt;= <span class="built_in">min</span>(mid, R); i++)</span><br><span class="line">        <span class="keyword">if</span> (w(mid, i) &gt; maxn)</span><br><span class="line">            p = i, maxn = w(mid, i);</span><br><span class="line">    dp[mid] = <span class="built_in">max</span>(maxn, dp[mid]);</span><br><span class="line">    solve(l, mid - <span class="number">1</span>, L, p);</span><br><span class="line">    solve(mid + <span class="number">1</span>, r, p, R);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数位-dp"><a href="#数位-dp" class="headerlink" title="数位 dp"></a>数位 dp</h2><p>不要 62 和 4</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 922337203685477580;</span></span><br><span class="line">ll dp[<span class="number">30</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">bit</span>[<span class="number">30</span>];</span><br><span class="line">ll pow10[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line">ll l, r;</span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">bool</span> pre6, <span class="keyword">bool</span> flag)</span> <span class="comment">//pre为状态,flag为上界判断,pre4前面是否都为4</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pos == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (!flag &amp;&amp; dp[pos][pre6] != <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> dp[pos][pre6];</span><br><span class="line">    <span class="keyword">int</span> rr = flag ? <span class="built_in">bit</span>[pos] : <span class="number">9</span>;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= rr; i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((i == <span class="number">2</span> &amp;&amp; pre6) || i == <span class="number">4</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ans += dfs(pos - <span class="number">1</span>, i == <span class="number">6</span>, (i == rr &amp;&amp; flag));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!flag)</span><br><span class="line">        dp[pos][pre6] = ans;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">bit</span>[++cnt] = x % <span class="number">10</span>;</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dfs(cnt, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//init();</span></span><br><span class="line">    <span class="comment">//scanf("%d", &amp;T);</span></span><br><span class="line">    <span class="comment">// pow10[0] = 1;</span></span><br><span class="line">    <span class="comment">// for (int i = 1; i &lt;= 20; i++)</span></span><br><span class="line">    <span class="comment">//     pow10[i] = pow10[i - 1] * 10;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; pow10[18] &lt;&lt; endl;</span></span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;l, &amp;r))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (l == <span class="number">0</span> &amp;&amp; r == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, calc(r) - calc(l - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><h2 id="权值并查集"><a href="#权值并查集" class="headerlink" title="权值并查集"></a>权值并查集</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> f[N], n, m, sum[N], ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (f[x] != x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> father = f[x];</span><br><span class="line">f[x] = <span class="built_in">find</span>(f[x]);</span><br><span class="line">sum[x] = (sum[x] + sum[father]) % <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> f[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">f[i] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> flag, x, y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;flag, &amp;x, &amp;y);</span><br><span class="line"><span class="keyword">int</span> xx = <span class="built_in">find</span>(x);</span><br><span class="line"><span class="keyword">int</span> yy = <span class="built_in">find</span>(y);</span><br><span class="line"><span class="keyword">if</span> ((flag == <span class="number">2</span> &amp;&amp; x == y) || x &gt; n || y &gt; n)</span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (xx == yy)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (sum[x] != sum[y])</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">f[xx] = yy;</span><br><span class="line">sum[xx] = (<span class="number">0</span> + sum[y] - sum[x] + <span class="number">3</span>) % <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (xx == yy)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; x &lt;&lt; " " &lt;&lt; y &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">if</span> ((sum[x] - sum[y] + <span class="number">3</span>) % <span class="number">3</span> != <span class="number">1</span>)</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">f[xx] = yy;</span><br><span class="line">sum[xx] = (<span class="number">1</span> + sum[y] - sum[x] + <span class="number">3</span>) % <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout &lt;&lt; ans &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="cdq-分治"><a href="#cdq-分治" class="headerlink" title="cdq 分治"></a>cdq 分治</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(i) i &amp;(-i)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> tr[N];</span><br><span class="line"><span class="keyword">int</span> cnt, n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (x &lt;= n)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[x] += w;</span><br><span class="line">        x += lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">quary</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += tr[x];</span><br><span class="line">        x -= lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y, w, op, flag, id;</span><br><span class="line">&#125; q[N * <span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpx</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x == b.x ? a.y &lt; b.y : a.x &lt; b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> flag, <span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    q[++cnt].x = x;</span><br><span class="line">    q[cnt].y = y;</span><br><span class="line">    q[cnt].flag = flag;</span><br><span class="line">    q[cnt].op = <span class="number">2</span>;</span><br><span class="line">    q[cnt].id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdq</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    cdq(l, mid);</span><br><span class="line">    cdq(mid + <span class="number">1</span>, r);</span><br><span class="line">    sort(q + l, q + <span class="number">1</span> + mid, cmpx);</span><br><span class="line">    sort(q + <span class="number">1</span> + mid, q + <span class="number">1</span> + r, cmpx);</span><br><span class="line">    <span class="keyword">int</span> pl = l, pr = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (pr &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;pl&lt;&lt;" "&lt;&lt;pr&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">while</span> (q[pl].op == <span class="number">2</span> &amp;&amp; pl &lt;= mid)</span><br><span class="line">            pl++;</span><br><span class="line">        <span class="keyword">while</span> (q[pr].op == <span class="number">1</span> &amp;&amp; pr &lt;= r)</span><br><span class="line">            pr++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pl &lt;= mid &amp;&amp; q[pl].x &lt;= q[pr].x)</span><br><span class="line">            update(q[pl].y, q[pl].w), pl++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pr &lt;= r)</span><br><span class="line">            ans[q[pr].id] += q[pr].flag * quary(q[pr].y), pr++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt; pl; i++)</span><br><span class="line">        <span class="keyword">if</span> (q[i].op == <span class="number">1</span>)</span><br><span class="line">            update(q[i].y, -q[i].w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ask;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> p;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;p);</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ++cnt;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;q[cnt].x, &amp;q[cnt].y, &amp;q[cnt].w);</span><br><span class="line">            q[cnt].op = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ask++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> x1, y1, x2, y2;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</span><br><span class="line"></span><br><span class="line">            add(x2, y2, <span class="number">1</span>, ask);</span><br><span class="line">            add(x1 - <span class="number">1</span>, y1 - <span class="number">1</span>, <span class="number">1</span>, ask);</span><br><span class="line">            add(x2, y1 - <span class="number">1</span>, <span class="number">-1</span>, ask);</span><br><span class="line">            add(x1 - <span class="number">1</span>, y2, <span class="number">-1</span>, ask);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;cnt&lt;&lt;endl;</span></span><br><span class="line">    cdq(<span class="number">1</span>, cnt);</span><br><span class="line">    <span class="comment">//cout&lt;&lt;ask&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ask; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扫描线最多包围点"><a href="#扫描线最多包围点" class="headerlink" title="扫描线最多包围点"></a>扫描线最多包围点</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">6e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, maxx, lazy;</span><br><span class="line">&#125; tree[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[pos].maxx = <span class="built_in">max</span>(tree[pos * <span class="number">2</span>].maxx, tree[pos * <span class="number">2</span> + <span class="number">1</span>].maxx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree[pos].lazy != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[pos * <span class="number">2</span>].maxx += tree[pos].lazy;</span><br><span class="line">        tree[pos * <span class="number">2</span> + <span class="number">1</span>].maxx += tree[pos].lazy;</span><br><span class="line">        tree[pos * <span class="number">2</span>].lazy += tree[pos].lazy;</span><br><span class="line">        tree[pos * <span class="number">2</span> + <span class="number">1</span>].lazy += tree[pos].lazy;</span><br><span class="line">        tree[pos].lazy = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[pos].l = l;</span><br><span class="line">    tree[pos].r = r;</span><br><span class="line">    tree[pos].lazy = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (tree[pos].l + tree[pos].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build(pos * <span class="number">2</span>, l, mid);</span><br><span class="line">    build(pos * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= tree[pos].l &amp;&amp; tree[pos].r &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[pos].maxx += v;</span><br><span class="line">        tree[pos].lazy += v;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; l&lt;&lt; " "&lt;&lt;r&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(pos);</span><br><span class="line">    <span class="keyword">int</span> mid = (tree[pos].l + tree[pos].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= mid)</span><br><span class="line">        update(pos * <span class="number">2</span>, l, r, v);</span><br><span class="line">    <span class="keyword">if</span> (r &gt; mid)</span><br><span class="line">        update(pos * <span class="number">2</span> + <span class="number">1</span>, l, r, v);</span><br><span class="line">    pushup(pos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> y, l, r, v;</span><br><span class="line">&#125; <span class="built_in">line</span>[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.y == b.y)</span><br><span class="line">        <span class="keyword">return</span> a.v &gt; b.v;</span><br><span class="line">    <span class="keyword">return</span> a.y &lt; b.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> y, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">line</span>[++cnt].y = y;</span><br><span class="line">    <span class="built_in">line</span>[cnt].v = v;</span><br><span class="line">    <span class="built_in">line</span>[cnt].l = l;</span><br><span class="line">    <span class="built_in">line</span>[cnt].r = r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, r, li[N], num, ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sort(li + <span class="number">1</span>, li + <span class="number">1</span> + num);</span><br><span class="line">    num = unique(li + <span class="number">1</span>, li + <span class="number">1</span> + num) - li - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; cnt &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">line</span>[i].r = lower_bound(li + <span class="number">1</span>, li + <span class="number">1</span> + num, <span class="built_in">line</span>[i].r) - li;</span><br><span class="line">        <span class="built_in">line</span>[i].l = lower_bound(li + <span class="number">1</span>, li + <span class="number">1</span> + num, <span class="built_in">line</span>[i].l) - li;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; a[i].l &lt;&lt; " " &lt;&lt; a[i].r &lt;&lt; endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;r);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</span><br><span class="line">        li[++num] = x;</span><br><span class="line">        li[++num] = x + r;</span><br><span class="line">        add(y, x, x + r, <span class="number">1</span>);</span><br><span class="line">        add(y + r, x, x + r, <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; cnt &lt;&lt; endl;</span></span><br><span class="line">    <span class="built_in">prepare</span>();</span><br><span class="line">    sort(<span class="number">1</span> + <span class="built_in">line</span>, <span class="number">1</span> + <span class="built_in">line</span> + cnt, cmp);</span><br><span class="line">    build(<span class="number">1</span>, <span class="number">1</span>, N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; line[i].y &lt;&lt; " " &lt;&lt; line[i].l &lt;&lt; ' ' &lt;&lt; line[i].r &lt;&lt; " " &lt;&lt; line[i].v &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">int</span> y = <span class="built_in">line</span>[i].y;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= cnt &amp;&amp; <span class="built_in">line</span>[i].y == y &amp;&amp; <span class="built_in">line</span>[i].v == <span class="number">1</span>)</span><br><span class="line">            update(<span class="number">1</span>, <span class="built_in">line</span>[i].l, <span class="built_in">line</span>[i].r, <span class="number">1</span>), i++;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; tree[1].maxx &lt;&lt; endl;</span></span><br><span class="line">        ans = <span class="built_in">max</span>(tree[<span class="number">1</span>].maxx, ans);</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= cnt &amp;&amp; <span class="built_in">line</span>[i].y == y &amp;&amp; <span class="built_in">line</span>[i].v == <span class="number">-1</span>)</span><br><span class="line">            update(<span class="number">1</span>, <span class="built_in">line</span>[i].l, <span class="built_in">line</span>[i].r, <span class="number">-1</span>), i++;</span><br><span class="line">        i--;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; tree[1].maxx &lt;&lt; endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="点分治"><a href="#点分治" class="headerlink" title="点分治"></a>点分治</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, w, next;</span><br><span class="line">&#125; e[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[N], cnt, n, k, d[N], deep[N];</span><br><span class="line"><span class="keyword">int</span> num, ans, f[N], son[N], vis[N], root, sum;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++cnt].to = v;</span><br><span class="line">    e[cnt].w = w;</span><br><span class="line">    e[cnt].next = head[u];</span><br><span class="line">    head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getroot</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    son[x] = <span class="number">1</span>;</span><br><span class="line">    f[x] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i; i = e[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (e[i].to == fa || vis[e[i].to])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        getroot(e[i].to, x);</span><br><span class="line">        son[x] += son[e[i].to];</span><br><span class="line">        f[x] = <span class="built_in">max</span>(f[x], son[e[i].to]);</span><br><span class="line">    &#125;</span><br><span class="line">    f[x] = <span class="built_in">max</span>(f[x], sum - son[x]);</span><br><span class="line">    <span class="keyword">if</span> (f[x] &lt; f[root])</span><br><span class="line">        root = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getdeep</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    deep[++num] = d[x];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i; i = e[i].next)</span><br><span class="line">        <span class="keyword">if</span> (e[i].to != fa &amp;&amp; !vis[e[i].to])</span><br><span class="line">        &#123;</span><br><span class="line">            d[e[i].to] = d[x] + e[i].w;</span><br><span class="line">            getdeep(e[i].to, x);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> st = <span class="number">0</span>;</span><br><span class="line">    d[x] = now;</span><br><span class="line">    num = <span class="number">0</span>;</span><br><span class="line">    getdeep(x, <span class="number">0</span>);</span><br><span class="line">    sort(deep + <span class="number">1</span>, deep + <span class="number">1</span> + num);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = num;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (deep[l] + deep[r] &lt;= k)</span><br><span class="line">            st += r - l, l++;</span><br><span class="line">       <span class="keyword">else</span>  r--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> st;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slove</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ans += calc(x, <span class="number">0</span>);</span><br><span class="line">    vis[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i; i = e[i].next)</span><br><span class="line">        <span class="keyword">if</span> (!vis[e[i].to])</span><br><span class="line">        &#123;</span><br><span class="line">            ans -= calc(e[i].to, e[i].w);</span><br><span class="line">            sum = son[e[i].to];</span><br><span class="line">            root = <span class="number">0</span>;</span><br><span class="line">            getroot(e[i].to, root);</span><br><span class="line">            slove(root);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k) != EOF &amp;&amp; n &amp;&amp; k)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        root = <span class="number">0</span>;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        sum = n;</span><br><span class="line">        f[<span class="number">0</span>] = inf;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="built_in">memset</span>(head, <span class="number">0</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u, v, w;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">            addedge(u, v, w);</span><br><span class="line">            addedge(v, u, w);</span><br><span class="line">        &#125;</span><br><span class="line">        getroot(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        slove(root);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dsu-on-tree"><a href="#dsu-on-tree" class="headerlink" title="$dsu\  on \ tree$"></a>$dsu\  on \ tree$</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt;</span><br><span class="line">&#125; e[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[N], cnt, n, w[N], son[N], siz[N];</span><br><span class="line"><span class="keyword">int</span> maxnum, num[N], vis[N];</span><br><span class="line">ll ans[N];</span><br><span class="line">ll res;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addadge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++cnt].to = v;</span><br><span class="line">    e[cnt].nxt = head[u];</span><br><span class="line">    head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">predfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    siz[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == fa)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        predfs(v, x);</span><br><span class="line">        siz[x] += siz[v];</span><br><span class="line">        <span class="keyword">if</span> (!son[x] || siz[son[x]] &lt; siz[v])</span><br><span class="line">            son[x] = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa, <span class="keyword">int</span> flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    num[w[x]] += flag;</span><br><span class="line">    <span class="keyword">if</span> (flag &gt; <span class="number">0</span> &amp;&amp; num[w[x]] &gt; maxnum)</span><br><span class="line">    &#123;</span><br><span class="line">        res = <span class="number">0</span>;</span><br><span class="line">        maxnum = num[w[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag &gt; <span class="number">0</span> &amp;&amp; num[w[x]] == maxnum)</span><br><span class="line">        res += w[x];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == fa || vis[v] == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        calc(v, x, flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa, <span class="keyword">int</span> flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == fa || v == son[x])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        solve(v, x, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (son[x])</span><br><span class="line">        solve(son[x], x, <span class="number">1</span>), vis[son[x]] = <span class="number">1</span>;</span><br><span class="line">    calc(x, fa, <span class="number">1</span>);</span><br><span class="line">    ans[x] = res;</span><br><span class="line">    <span class="keyword">if</span> (son[x])</span><br><span class="line">        vis[son[x]] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!flag)</span><br><span class="line">        calc(x, fa, <span class="number">-1</span>), res = <span class="number">0</span>, maxnum = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;w[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        addadge(u, v);</span><br><span class="line">        addadge(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    predfs(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">    solve(<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld "</span>, ans[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="kmp"><a href="#kmp" class="headerlink" title="$kmp$"></a>$kmp$</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getnext</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nxt[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = nxt[i - <span class="number">1</span>]; j &gt;= <span class="number">0</span> &amp;&amp; t[j + <span class="number">1</span>] != t[i]; j = nxt[j])</span><br><span class="line">            ;</span><br><span class="line">        nxt[i] = j + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kmp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (; j &gt;= <span class="number">0</span> &amp;&amp; t[j + <span class="number">1</span>] != s[i]; j = nxt[j])</span><br><span class="line">            ;</span><br><span class="line">        j++;</span><br><span class="line">        <span class="keyword">if</span> (j == m)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i - j + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="exkmp"><a href="#exkmp" class="headerlink" title="$exkmp$"></a>$exkmp$</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preexkmp</span><span class="params">(<span class="keyword">char</span> *t, <span class="keyword">int</span> mlen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    nxt[<span class="number">1</span>] = mlen;</span><br><span class="line">    <span class="keyword">int</span> exlen = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (exlen + <span class="number">2</span> &lt;= mlen &amp;&amp; exlen + <span class="number">1</span> &lt;= mlen &amp;&amp; t[exlen + <span class="number">2</span>] == t[exlen + <span class="number">1</span>])</span><br><span class="line">        exlen++;</span><br><span class="line">    nxt[<span class="number">2</span>] = exlen;</span><br><span class="line">    <span class="keyword">int</span> pl = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= mlen; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> pr = nxt[pl] + pl - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> l2 = i - pl + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> r2 = nxt[pl];</span><br><span class="line">        <span class="keyword">if</span> (i + nxt[l2] - <span class="number">1</span> &lt; pr)</span><br><span class="line">        &#123;</span><br><span class="line">            nxt[i] = nxt[l2];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            exlen = <span class="built_in">max</span>(<span class="number">0</span>, pr - i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (exlen + i &lt;= mlen &amp;&amp; exlen + <span class="number">1</span> &lt;= mlen &amp;&amp; t[exlen + i] == t[exlen + <span class="number">1</span>])</span><br><span class="line">                exlen++;</span><br><span class="line">            nxt[i] = exlen;</span><br><span class="line">            pl = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EXKMP</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> nlen, <span class="keyword">char</span> t[], <span class="keyword">int</span> mlen, <span class="keyword">int</span> beg, <span class="keyword">int</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    preexkmp(t, mlen);</span><br><span class="line">    <span class="keyword">int</span> exlen = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (exlen + <span class="number">1</span> &lt;= nlen &amp;&amp; exlen + <span class="number">1</span> &lt;= mlen &amp;&amp; s[exlen + <span class="number">1</span>] == t[exlen + <span class="number">1</span>])</span><br><span class="line">        exlen++;</span><br><span class="line">    extend[<span class="number">1</span>] = exlen;</span><br><span class="line">    <span class="keyword">int</span> pl = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= nlen; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> pr = extend[pl] + pl - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> l2 = i - pl + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> r2 = extend[pl];</span><br><span class="line">        <span class="keyword">if</span> (i + nxt[l2] - <span class="number">1</span> &lt; pr)</span><br><span class="line">        &#123;</span><br><span class="line">            extend[i] = nxt[l2];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            exlen = <span class="built_in">max</span>(<span class="number">0</span>, pr - i + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// cout&lt;&lt;i&lt;&lt;" "&lt;&lt;exlen&lt;&lt;endl;</span></span><br><span class="line">            <span class="keyword">while</span> (exlen + i &lt;= nlen &amp;&amp; exlen + <span class="number">1</span> &lt;= mlen &amp;&amp; s[exlen + i] == t[exlen + <span class="number">1</span>])</span><br><span class="line">                exlen++;</span><br><span class="line">            extend[i] = exlen;</span><br><span class="line">            pl = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nlen; i++)</span><br><span class="line">        palum[beg + i][op] = (extend[i] + i - <span class="number">1</span> == nlen);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="马拉车"><a href="#马拉车" class="headerlink" title="马拉车"></a>马拉车</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cg</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ss[<span class="number">0</span>] = <span class="string">'~'</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ss[i * <span class="number">2</span>] = s[i];</span><br><span class="line">        ss[i * <span class="number">2</span> - <span class="number">1</span>] = <span class="string">'#'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    n = <span class="number">2</span> * n + <span class="number">1</span>;</span><br><span class="line">    ;</span><br><span class="line">    ss[n] = <span class="string">'#'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">manacher</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> maxr = <span class="number">0</span>, mid = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//printf("%c",ss[i]);</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt;= maxr)</span><br><span class="line">            p[i] = <span class="built_in">min</span>(p[<span class="number">2</span> * mid - i], maxr - i + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (ss[i + p[i]] == ss[i - p[i]])</span><br><span class="line">            p[i]++;</span><br><span class="line">        <span class="keyword">if</span> (p[i] + i - <span class="number">1</span> &gt;= maxr)</span><br><span class="line">        &#123;</span><br><span class="line">            maxr = p[i] + i - <span class="number">1</span>;</span><br><span class="line">            mid = i;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">max</span>(p[i], ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最大最小表示"><a href="#最大最小表示" class="headerlink" title="最大最小表示"></a>最大最小表示</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_cmpstr</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">int</span> cc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//printf("%d\n",len);</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">2</span>, k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= len &amp;&amp; j &lt;= len &amp;&amp; k &lt; len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> cmp = str[(i + k - <span class="number">1</span>) % len + <span class="number">1</span>] - str[(j + k - <span class="number">1</span>) % len + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (!cmp)</span><br><span class="line">            k++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((cmp &gt; <span class="number">0</span>) == cc)</span><br><span class="line">                j += k + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                i += k + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i == j)</span><br><span class="line">                j++;</span><br><span class="line">            k = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(i, j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SA"><a href="#SA" class="headerlink" title="SA"></a>SA</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SA</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ra[N], y[N], sa[N];</span><br><span class="line">    <span class="keyword">int</span> tn[N], he[N];</span><br><span class="line">    <span class="keyword">int</span> tmp[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">GetSA</span><span class="params">(<span class="keyword">char</span> *t, <span class="keyword">int</span> siz)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(t + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= siz; i++)</span><br><span class="line">            tn[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++)</span><br><span class="line">            ra[i] = t[i], tn[ra[i]]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= siz; i++)</span><br><span class="line">            tn[i] += tn[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">            sa[tn[ra[i]]--] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= len; k &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = len - k + <span class="number">1</span>; i &lt;= len; i++)</span><br><span class="line">                y[++cnt] = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++)</span><br><span class="line">                <span class="keyword">if</span> (sa[i] &gt; k)</span><br><span class="line">                    y[++cnt] = sa[i] - k;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= siz; i++)</span><br><span class="line">                tn[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++)</span><br><span class="line">                tn[ra[i]]++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= siz; i++)</span><br><span class="line">                tn[i] += tn[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">                sa[tn[ra[y[i]]]--] = y[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++)</span><br><span class="line">                tmp[i] = ra[i];</span><br><span class="line">            cnt = <span class="number">1</span>;</span><br><span class="line">            ra[sa[<span class="number">1</span>]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= len; i++)</span><br><span class="line">                ra[sa[i]] = (tmp[sa[i]] == tmp[sa[i - <span class="number">1</span>]] &amp;&amp; tmp[sa[i] + k] == tmp[sa[i - <span class="number">1</span>] + k]) ? cnt : ++cnt;</span><br><span class="line">            <span class="keyword">if</span> (cnt == len)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            siz = cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; ++i)</span><br><span class="line">            ra[sa[i]] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j)</span><br><span class="line">                --j;</span><br><span class="line">            <span class="keyword">while</span> (t[i + j] == t[sa[ra[i] - <span class="number">1</span>] + j])</span><br><span class="line">                ++j;</span><br><span class="line">            he[ra[i]] = j;</span><br><span class="line">        &#125;</span><br><span class="line">        he[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; T;</span><br></pre></td></tr></table></figure><h2 id="AC-自动机"><a href="#AC-自动机" class="headerlink" title="AC 自动机"></a>AC 自动机</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_AC = <span class="number">2e3</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ACAM</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> scnt;</span><br><span class="line">    <span class="keyword">int</span> nxt[N_AC][<span class="number">26</span>], fail[N_AC];</span><br><span class="line">    ll cnt[N_AC];</span><br><span class="line">    <span class="keyword">int</span> root;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(nxt, <span class="number">0</span>, <span class="keyword">sizeof</span>(nxt));</span><br><span class="line">        <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span>(cnt));</span><br><span class="line">        <span class="built_in">memset</span>(fail, <span class="number">0</span>, <span class="keyword">sizeof</span>(fail));</span><br><span class="line">        root = <span class="number">0</span>;</span><br><span class="line">        scnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Newnode</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pos = ++scnt;</span><br><span class="line">        fail[pos] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(nxt[pos], <span class="number">0</span>, <span class="keyword">sizeof</span>(nxt[pos]));</span><br><span class="line">        <span class="keyword">return</span> pos;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> *t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(t);</span><br><span class="line">        <span class="keyword">int</span> tmp = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> id = t[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (!nxt[tmp][id])</span><br><span class="line">                nxt[tmp][id] = Newnode();</span><br><span class="line">            tmp = nxt[tmp][id];</span><br><span class="line">        &#125;</span><br><span class="line">        cnt[tmp]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = nxt[root][i];</span><br><span class="line">            <span class="keyword">if</span> (tmp)</span><br><span class="line">            &#123;</span><br><span class="line">                q.push(tmp);</span><br><span class="line">                fail[tmp] = root;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            cnt[x] += cnt[fail[x]];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = nxt[x][i];</span><br><span class="line">                <span class="keyword">if</span> (tmp)</span><br><span class="line">                &#123;</span><br><span class="line">                    q.push(tmp);</span><br><span class="line">                    fail[tmp] = nxt[fail[x]][i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    nxt[x][i] = nxt[fail[x]][i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; ;</span><br></pre></td></tr></table></figure><h2 id="SA-1"><a href="#SA-1" class="headerlink" title="SA"></a>SA</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sa[N], ra[N], y[N], tn[N], he[N];</span><br><span class="line"><span class="keyword">int</span> rq[N][<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_SA</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">int</span> len, <span class="keyword">int</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp[N]; <span class="comment">//辅助数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">size</span>; i++)</span><br><span class="line">        tn[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++)</span><br><span class="line">        ra[i] = s[i], tn[ra[i]]++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">size</span>; i++)</span><br><span class="line">        tn[i] += tn[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        sa[tn[ra[i]]--] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= len; k &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = len - k + <span class="number">1</span>; i &lt;= len; i++)</span><br><span class="line">            y[++cnt] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++)</span><br><span class="line">            <span class="keyword">if</span> (sa[i] &gt; k)</span><br><span class="line">                y[++cnt] = sa[i] - k;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">size</span>; i++)</span><br><span class="line">            tn[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++)</span><br><span class="line">            tn[ra[i]]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">size</span>; i++)</span><br><span class="line">            tn[i] += tn[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &gt;= <span class="number">1</span>; i--) <span class="comment">//倒叙原因是因为tn[ra[y[i]]]是桶里面最大的</span></span><br><span class="line">            sa[tn[ra[y[i]]]--] = y[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++)</span><br><span class="line">            tmp[i] = ra[i];</span><br><span class="line"></span><br><span class="line">        cnt = <span class="number">1</span>;</span><br><span class="line">        ra[sa[<span class="number">1</span>]] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= len; i++)</span><br><span class="line">            ra[sa[i]] = (tmp[sa[i]] == tmp[sa[i - <span class="number">1</span>]] &amp;&amp; tmp[sa[i] + k] == tmp[sa[i - <span class="number">1</span>] + k]) ? cnt : ++cnt;</span><br><span class="line">        <span class="keyword">if</span> (cnt == len)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">size</span> = cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++)</span><br><span class="line">        ra[sa[i]] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (k)</span><br><span class="line">            k--;</span><br><span class="line">        <span class="keyword">int</span> j = sa[ra[i] - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span> (i + k &lt;= len &amp;&amp; j + k &lt;= len &amp;&amp; s[j + k] == s[i + k])</span><br><span class="line">            k++;</span><br><span class="line">        he[ra[i]] = k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++)</span><br><span class="line">        rq[i][<span class="number">0</span>] = he[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; i) &lt;= len; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j + (<span class="number">1</span> &lt;&lt; i) - <span class="number">1</span> &lt;= len; j++)</span><br><span class="line">            rq[j][i] = <span class="built_in">min</span>(rq[j][i - <span class="number">1</span>], rq[j + (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>))][i - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == y)</span><br><span class="line">        <span class="keyword">return</span> len - sa[x] + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//x = ra[x], y = ra[y];</span></span><br><span class="line">    <span class="keyword">if</span> (x &gt; y)</span><br><span class="line">        swap(x, y);</span><br><span class="line">    x++;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="keyword">int</span>(<span class="built_in">log</span>(y - x + <span class="number">1.0</span>) * <span class="number">1.0</span> / (<span class="number">1.0</span> * <span class="built_in">log</span>(<span class="number">2</span>)));</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(rq[x][p], rq[y - (<span class="number">1</span> &lt;&lt; p) + <span class="number">1</span>][p]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SAM"><a href="#SAM" class="headerlink" title="SAM"></a>SAM</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SN = <span class="number">2e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SM = <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SAM</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> trans[SN][SM];</span><br><span class="line">    <span class="keyword">int</span> mxl[SN], link[SN], pre, scnt;</span><br><span class="line">    SAM() &#123; pre = scnt = <span class="number">1</span>; &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= scnt; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            link[j] = <span class="number">0</span>;</span><br><span class="line">            mxl[j] = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//siz[j] = 0;</span></span><br><span class="line">            <span class="built_in">memset</span>(trans[j], <span class="number">0</span>, <span class="keyword">sizeof</span>(trans[j]));</span><br><span class="line">        &#125;</span><br><span class="line">        scnt = pre = <span class="number">1</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cur = ++scnt;</span><br><span class="line">        mxl[cur] = mxl[pre] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> u;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (u = pre; u &amp;&amp; !trans[u][id]; u = link[u])</span><br><span class="line">            trans[u][id] = cur;</span><br><span class="line">        pre = cur;</span><br><span class="line">        <span class="keyword">if</span> (!u)</span><br><span class="line">            link[cur] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = trans[u][id];</span><br><span class="line">            <span class="keyword">if</span> (mxl[x] == mxl[u] + <span class="number">1</span>)</span><br><span class="line">                link[cur] = x;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> nc = ++scnt;</span><br><span class="line">                link[nc] = link[x];</span><br><span class="line">                mxl[nc] = mxl[u] + <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">memcpy</span>(trans[nc], trans[x], <span class="keyword">sizeof</span>(trans[x]));</span><br><span class="line"></span><br><span class="line">                link[cur] = link[x] = nc;</span><br><span class="line">                <span class="keyword">for</span> (; u &amp;&amp; trans[u][id] == x; u = link[u])</span><br><span class="line">                    trans[u][id] = nc;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; sam;</span><br></pre></td></tr></table></figure><h2 id="广义-SAM-字典树在线构造"><a href="#广义-SAM-字典树在线构造" class="headerlink" title="广义 SAM 字典树在线构造"></a>广义 SAM 字典树在线构造</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SN = <span class="number">4e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SM = <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SAM</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> trans[SN][SM], maxlen[SN], link[SN], scnt, sum[SN], siz[N];</span><br><span class="line">    SAM() &#123; scnt = <span class="number">1</span>; &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (trans[pre][id] &amp;&amp; (maxlen[pre] + <span class="number">1</span> == maxlen[trans[pre][id]]))</span><br><span class="line">            <span class="keyword">return</span> trans[pre][id];</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cur = ++scnt;</span><br><span class="line">        maxlen[cur] = maxlen[pre] + <span class="number">1</span>;</span><br><span class="line">        siz[cur] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> u = pre, nc;</span><br><span class="line">        pre = cur;</span><br><span class="line">        <span class="keyword">for</span> (; u &amp;&amp; !trans[u][id]; u = link[u])</span><br><span class="line">            trans[u][id] = cur;</span><br><span class="line">        <span class="keyword">if</span> (!u)</span><br><span class="line">            link[cur] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = trans[u][id];</span><br><span class="line">            <span class="keyword">if</span> (maxlen[x] == maxlen[u] + <span class="number">1</span>)</span><br><span class="line">                link[cur] = x;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (u == pre)</span><br><span class="line">                    flag = <span class="number">1</span>;</span><br><span class="line">                nc = ++scnt;</span><br><span class="line">                maxlen[nc] = maxlen[u] + <span class="number">1</span>;</span><br><span class="line">                link[nc] = link[x];</span><br><span class="line">                link[cur] = link[x] = nc;</span><br><span class="line">                <span class="built_in">memcpy</span>(trans[nc], trans[x], <span class="keyword">sizeof</span>(trans[x]));</span><br><span class="line">                <span class="keyword">for</span> (; u &amp;&amp; trans[u][id] == x; u = link[u])</span><br><span class="line">                    trans[u][id] = nc;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag ? nc : cur;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; sam;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt;</span><br><span class="line">&#125; e[SN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[SN], ecnt;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addadge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++ecnt].to = v;</span><br><span class="line">    e[ecnt].nxt = head[u];</span><br><span class="line">    head[u] = ecnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa, <span class="keyword">int</span> fas)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> xs = sam.update(a[x], fas);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> to = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (to == fa)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        dfs(to, x, xs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SAM-线段树合并"><a href="#SAM-线段树合并" class="headerlink" title="SAM+线段树合并"></a>SAM+线段树合并</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SN = <span class="number">2e5</span> + <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, sum;</span><br><span class="line">&#125; tree[N * <span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> scnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[pos].sum = tree[ls].sum + tree[rs].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> &amp;pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pos)</span><br><span class="line">        pos = ++scnt;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[pos].sum++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (w &lt;= mid)</span><br><span class="line">        modify(ls, l, mid, w);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        modify(rs, mid + <span class="number">1</span>, r, w);</span><br><span class="line">    pushup(pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr)</span><br><span class="line">        <span class="keyword">return</span> tree[pos].sum;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= mid)</span><br><span class="line">        res += query(ls, ql, qr, l, mid);</span><br><span class="line">    <span class="keyword">if</span> (qr &gt; mid)</span><br><span class="line">        res += query(rs, ql, qr, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!u || !v)</span><br><span class="line">        <span class="keyword">return</span> u + v;</span><br><span class="line">    <span class="keyword">int</span> pos = ++scnt;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[pos].sum = tree[u].sum + tree[v].sum;</span><br><span class="line">        <span class="keyword">return</span> pos;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    ls = merge(tree[u].l, tree[v].l, l, mid);</span><br><span class="line">    rs = merge(tree[u].r, tree[v].r, mid + <span class="number">1</span>, r);</span><br><span class="line">    pushup(pos);</span><br><span class="line">    <span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rt[SN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SAM</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> trans[SN][<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">int</span> mxl[SN], link[SN], pre, scnt;</span><br><span class="line">    SAM() &#123; pre = scnt = <span class="number">1</span>; &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= scnt; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            link[j] = <span class="number">0</span>;</span><br><span class="line">            mxl[j] = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//siz[j] = 0;</span></span><br><span class="line">            <span class="built_in">memset</span>(trans[j], <span class="number">0</span>, <span class="keyword">sizeof</span>(trans[j]));</span><br><span class="line">        &#125;</span><br><span class="line">        scnt = pre = <span class="number">1</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cur = ++scnt;</span><br><span class="line">        mxl[cur] = mxl[pre] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> u;</span><br><span class="line">        modify(rt[cur], <span class="number">1</span>, n, p);</span><br><span class="line">        <span class="keyword">for</span> (u = pre; u &amp;&amp; !trans[u][id]; u = link[u])</span><br><span class="line">            trans[u][id] = cur;</span><br><span class="line">        pre = cur;</span><br><span class="line">        <span class="keyword">if</span> (!u)</span><br><span class="line">            link[cur] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = trans[u][id];</span><br><span class="line">            <span class="keyword">if</span> (mxl[x] == mxl[u] + <span class="number">1</span>)</span><br><span class="line">                link[cur] = x;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> nc = ++scnt;</span><br><span class="line">                link[nc] = link[x];</span><br><span class="line">                mxl[nc] = mxl[u] + <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">memcpy</span>(trans[nc], trans[x], <span class="keyword">sizeof</span>(trans[x]));</span><br><span class="line"></span><br><span class="line">                link[cur] = link[x] = nc;</span><br><span class="line">                <span class="keyword">for</span> (; u &amp;&amp; trans[u][id] == x; u = link[u])</span><br><span class="line">                    trans[u][id] = nc;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; sam;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt;</span><br><span class="line">&#125; e[SN];</span><br><span class="line"><span class="keyword">int</span> ecnt, head[SN], f[SN][<span class="number">21</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addadge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++ecnt].to = v;</span><br><span class="line">    e[ecnt].nxt = head[u];</span><br><span class="line">    head[u] = ecnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++)</span><br><span class="line">        f[x][i] = f[f[x][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> to = e[i].to;</span><br><span class="line">        f[to][<span class="number">0</span>] = x;</span><br><span class="line">        dfs(to);</span><br><span class="line">        rt[x] = merge(rt[x], rt[to], <span class="number">1</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="计算几何"><a href="#计算几何" class="headerlink" title="计算几何"></a>计算几何</h1><h2 id="杂"><a href="#杂" class="headerlink" title="杂"></a>杂</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    <span class="keyword">double</span> v, li;</span><br><span class="line">    <span class="built_in">point</span> <span class="keyword">operator</span>-(<span class="keyword">const</span> <span class="built_in">point</span> &amp;p) <span class="keyword">const</span> &#123; <span class="keyword">return</span> (<span class="built_in">point</span>)&#123;x - p.x, y - p.y&#125;; &#125;;</span><br><span class="line">    <span class="built_in">point</span> <span class="keyword">operator</span>+(<span class="keyword">const</span> <span class="built_in">point</span> &amp;p) <span class="keyword">const</span> &#123; <span class="keyword">return</span> (<span class="built_in">point</span>)&#123;x + p.x, y + p.y&#125;; &#125;;</span><br><span class="line">    <span class="keyword">double</span> <span class="keyword">operator</span>^(<span class="keyword">const</span> <span class="built_in">point</span> &amp;p) <span class="keyword">const</span> &#123; <span class="keyword">return</span> x * p.y - y * p.x; &#125;;</span><br><span class="line">    <span class="keyword">double</span> <span class="keyword">operator</span>*(<span class="keyword">const</span> <span class="built_in">point</span> &amp;p) <span class="keyword">const</span> &#123; <span class="keyword">return</span> x * p.x + y * p.y; &#125;;</span><br><span class="line">    <span class="built_in">point</span> <span class="keyword">operator</span>*(<span class="keyword">const</span> <span class="keyword">double</span> &amp;p) <span class="keyword">const</span> &#123; <span class="keyword">return</span> (<span class="built_in">point</span>)&#123;x * p, y * p&#125;; &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">dis</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">sqrt</span>(x * x + y * y); &#125;</span><br><span class="line"></span><br><span class="line">&#125; p[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">line</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">point</span> p1, p2;</span><br><span class="line">    <span class="keyword">double</span> ag;</span><br><span class="line">&#125; le[N];</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">point</span>&gt; g;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">eare</span><span class="params">(<span class="built_in">point</span> p1, <span class="built_in">point</span> p2, <span class="built_in">point</span> p3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">point</span> p4 = p2 - p1;</span><br><span class="line">    <span class="built_in">point</span> p5 = p3 - p1;</span><br><span class="line">    <span class="keyword">return</span> p4 ^ p5;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">point</span> p1, <span class="built_in">point</span> p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p1 = p1 - g[pos];</span><br><span class="line">    p2 = p2 - g[pos];</span><br><span class="line">    <span class="keyword">return</span> ((p1 ^ p2) == <span class="number">0</span> ? (p1 * p1) &lt; (p2 * p2) : (p1 ^ p2) &gt; <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">point</span> <span class="title">inter_point</span><span class="params">(<span class="built_in">point</span> a1, <span class="built_in">point</span> a2, <span class="built_in">point</span> b1, <span class="built_in">point</span> b2)</span> <span class="comment">///返回直线AB和线段CD的交点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// if (!intersect(A, B, C, D))</span></span><br><span class="line">    <span class="comment">//     return &#123;-INF * 1.0, 0&#125;; ///判断直线AB是否与线段CD相交，不相交必须须特判</span></span><br><span class="line">    <span class="built_in">point</span> a = a2 - a1;</span><br><span class="line">    <span class="built_in">point</span> b = b2 - b1;</span><br><span class="line">    <span class="keyword">double</span> t = ((b1 ^ b) - (a1 ^ b)) / (a ^ b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (a1 + a * t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">point</span> s[N];</span><br><span class="line"><span class="keyword">int</span> top,pos;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">graham</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (g.<span class="built_in">size</span>() == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; g.<span class="built_in">size</span>(); i++)</span><br><span class="line">        <span class="keyword">if</span> (g[i].y &lt; g[<span class="number">0</span>].y || (g[i].y == g[<span class="number">0</span>].y &amp;&amp; g[i].x &lt; g[<span class="number">0</span>].x))</span><br><span class="line">            swap(g[<span class="number">0</span>], g[i]);</span><br><span class="line">    pos = <span class="number">0</span>;</span><br><span class="line">    sort(g.<span class="built_in">begin</span>() + <span class="number">1</span>, g.<span class="built_in">end</span>(), cmp);</span><br><span class="line"></span><br><span class="line">    top = <span class="number">-1</span>;</span><br><span class="line">    s[++top] = g[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; g.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (top &amp;&amp; ((g[i] - s[top]) ^ (s[top] - s[top - <span class="number">1</span>])) &gt;= <span class="number">0</span>)</span><br><span class="line">            top--;</span><br><span class="line">        s[++top] = g[i];</span><br><span class="line">    &#125;</span><br><span class="line">    s[top + <span class="number">1</span>] = g[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= top; i++)</span><br><span class="line">        ans += (s[i] - s[i + <span class="number">1</span>]).dis();</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向量AB 与 AC 的叉积 如果叉积大于0，那么C在向量AB的逆时针方向，叉积小于0则在AB的顺时针方向。如果叉积等于0，则ABC共线。</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">cross</span><span class="params">(<span class="built_in">point</span> A, <span class="built_in">point</span> B, <span class="built_in">point</span> C)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (B - A) ^ (C - A);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向量AB 与 AC 的点积 如果点积的结果为0，那么这两个向量互相垂直</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">multi</span><span class="params">(<span class="built_in">point</span> A, <span class="built_in">point</span> B, <span class="built_in">point</span> C)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (B - A) * (C - A);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两点距离</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">dist</span><span class="params">(<span class="built_in">point</span> A, <span class="built_in">point</span> B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (A - B).dis();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 逆时针排序</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">anticlockwise_sort</span><span class="params">(<span class="built_in">point</span> *p, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">2</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> tmp = cross(p[i], p[i + <span class="number">1</span>], p[i + <span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span> (tmp &gt; eps)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tmp &lt; -eps)</span><br><span class="line">        &#123;</span><br><span class="line">            reverse(p, p + n);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算C点到线段AB的最短距离</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">point_to_line</span><span class="params">(<span class="built_in">point</span> A, <span class="built_in">point</span> B, <span class="built_in">point</span> C)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dist(A, B) &lt; eps) <span class="comment">// A,B重合</span></span><br><span class="line">        <span class="keyword">return</span> dist(B, C);</span><br><span class="line">    <span class="keyword">if</span> (multi(A, B, C) &lt; -eps) <span class="comment">//B-A-C 钝角</span></span><br><span class="line">        <span class="keyword">return</span> dist(A, C);</span><br><span class="line">    <span class="keyword">if</span> (multi(B, A, C) &lt; -eps) <span class="comment">// A-B-C 钝角</span></span><br><span class="line">        <span class="keyword">return</span> dist(B, C);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>(cross(A, B, C) / dist(A, B));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求一条线段的两端点到另外一条线段的距离，反过来一样，共4种情况</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">line_to_line</span><span class="params">(<span class="built_in">point</span> A, <span class="built_in">point</span> B, <span class="built_in">point</span> C, <span class="built_in">point</span> D)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">min</span>(point_to_line(A, B, C), point_to_line(A, B, D)), <span class="built_in">min</span>(point_to_line(C, D, A), point_to_line(C, D, B)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;&amp;quot;https://codeforces.ml/profile/WaluntOvO&amp;quot;&quot;&gt;&lt;img src=&quot;http://cfrating.ihcr.top/?user=WaluntOvO&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;&amp;quot;https://codeforces.ml/profile/NaCNerer&amp;quot;&quot;&gt;&lt;img src=&quot;http://cfrating.ihcr.top/?user=NaCNerer&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>训练记录</title>
    <link href="http://yoursite.com/2020/12/31/%E8%AE%AD%E7%BB%83%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2020/12/31/%E8%AE%AD%E7%BB%83%E8%AE%B0%E5%BD%95/</id>
    <published>2020-12-31T02:47:00.000Z</published>
    <updated>2020-09-12T06:24:10.590Z</updated>
    
    <content type="html"><![CDATA[<p>训练呀</p><h2 id="脑瘫问题首发"><a href="#脑瘫问题首发" class="headerlink" title="脑瘫问题首发"></a>脑瘫问题首发</h2><ul><li>$s.earse(地址)$</li><li>递归是用全局$vetor$</li><li>线段树$if(!tag[pos])$</li><li>可撤销并查集可以采用<strong>保持合并前所有信息</strong></li><li>多项式 $如果 while(ML&lt;n+m-1)$ ,$n,m为项数$，如果$ML\leq n+m$<br>$n,m$为最高项系数，$sqrt,Inv….$等倒入的是项数（有多少项）。</li><li>多项式合并时注意限制项数。</li><li>线段树注意$lazy$的初始化</li><li>公式化的离散化线段变成左开右闭  </li><li>直径看清楚是否需要$-1$</li><li>虚树注意清空该清空的</li><li>多维$dp$转移注意边界</li></ul><a id="more"></a><h3 id="牛客多校"><a href="#牛客多校" class="headerlink" title="牛客多校"></a>牛客多校</h3><ul><li><a href="https://ac.nowcoder.com/acm/contest/5666" target="_blank" rel="noopener">2020牛客暑期多校训练营（第一场）</a>  $solve(2/10)$,$upsolve(2/10)$</li><li><a href="https://ac.nowcoder.com/acm/contest/5667" target="_blank" rel="noopener">2020牛客暑期多校训练营（第二场）</a> $solve(1/11)$,$upsolve(9/11)$</li><li><a href="https://ac.nowcoder.com/acm/contest/5668" target="_blank" rel="noopener">2020牛客暑期多校训练营（第三场）</a> $solve(5/12)$,$upsolve(9/12)$</li><li><a href="https://ac.nowcoder.com/acm/contest/5669" target="_blank" rel="noopener">2020牛客暑期多校训练营（第四场）</a> $solve(3/10)$,$upsolve(4/10)$</li><li><a href="https://ac.nowcoder.com/acm/contest/5670" target="_blank" rel="noopener">2020牛客暑期多校训练营（第五场）</a> $solve(4/11)$,$upsolve(8/10)$</li><li><a href="https://ac.nowcoder.com/acm/contest/5671" target="_blank" rel="noopener">2020牛客暑期多校训练营（第六场）</a> $solve(2/11)$,$upsolve(6/11)$</li><li><a href="https://ac.nowcoder.com/acm/contest/5672" target="_blank" rel="noopener">2020牛客暑期多校训练营（第七场）</a> </li><li><a href="https://ac.nowcoder.com/acm/contest/5673" target="_blank" rel="noopener">2020牛客暑期多校训练营（第八场）</a> $solve(3/11)$,$upsolve(5/11)$</li><li><a href="https://ac.nowcoder.com/acm/contest/5673" target="_blank" rel="noopener">2020牛客暑期多校训练营（第九场）</a> $solve(3/11)$,$upsolve(10/12)$</li></ul><h3 id="codeforces-Virtual-contest"><a href="#codeforces-Virtual-contest" class="headerlink" title="$codeforces$ ($Virtual contest$)"></a>$codeforces$ ($Virtual contest$)</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;训练呀&lt;/p&gt;
&lt;h2 id=&quot;脑瘫问题首发&quot;&gt;&lt;a href=&quot;#脑瘫问题首发&quot; class=&quot;headerlink&quot; title=&quot;脑瘫问题首发&quot;&gt;&lt;/a&gt;脑瘫问题首发&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;$s.earse(地址)$&lt;/li&gt;
&lt;li&gt;递归是用全局$vetor$&lt;/li&gt;
&lt;li&gt;线段树$if(!tag[pos])$&lt;/li&gt;
&lt;li&gt;可撤销并查集可以采用&lt;strong&gt;保持合并前所有信息&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;多项式 $如果 while(ML&amp;lt;n+m-1)$ ,$n,m为项数$，如果$ML\leq n+m$&lt;br&gt;$n,m$为最高项系数，$sqrt,Inv….$等倒入的是项数（有多少项）。&lt;/li&gt;
&lt;li&gt;多项式合并时注意限制项数。&lt;/li&gt;
&lt;li&gt;线段树注意$lazy$的初始化&lt;/li&gt;
&lt;li&gt;公式化的离散化线段变成左开右闭  &lt;/li&gt;
&lt;li&gt;直径看清楚是否需要$-1$&lt;/li&gt;
&lt;li&gt;虚树注意清空该清空的&lt;/li&gt;
&lt;li&gt;多维$dp$转移注意边界&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2020 CCPC网络赛 1013.Residual Polynomial</title>
    <link href="http://yoursite.com/2020/09/20/HDU6900/"/>
    <id>http://yoursite.com/2020/09/20/HDU6900/</id>
    <published>2020-09-20T02:47:00.000Z</published>
    <updated>2020-09-21T09:28:05.697Z</updated>
    
    <content type="html"><![CDATA[<script type="math/tex; mode=display">    f_i(x)=b_i(f_{i-1}(x))^{'}+c_if(x)</script><a id="more"></a><p>$设t^{y}f(x)$表示$f(x)$求导$y$次。</p><p>由此构造得到$f_n(x)=f_1(x)(b_1t+c_1)….(b_it+c_i)$</p><p>可以得到$t^{y}f(x)$的系数就是后面这个，假设$t^yf(x)$的系数为$z_i$。</p><p>我们知道最后$x_i$的系数其实就是$ans_i=z_0a_i+z_1(i+1)a_{i+1}+z_2(i+2)(i+1)a_{2+1}…,ans_i\times(i)!=\sum_{j=0}^n z_jg_{j+i}$</p><p>$g_i=a_i\times(i)!$</p><p>上面就是卷积套路，翻转一下变成一般形式，就可以$NTT$了。</p><p>$HDU，G++(2900ms)$飘过，如果更快，特盘特殊点。</p><details>  <summary>代码</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">6e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="comment">// const double pi = acos(-1.0);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">998244353</span>, gi = <span class="number">3</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inc</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> (x + y &gt;= mod) ? (x + y - mod) : (x + y); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> (x - y &lt; <span class="number">0</span>) ? (x - y + mod) : (x - y); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)</span><br><span class="line">        x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> x, <span class="keyword">int</span> mo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &amp; <span class="number">1</span>)</span><br><span class="line">            res = <span class="number">1l</span>l * res * a % mo;</span><br><span class="line">        x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a = <span class="number">1l</span>l * a * a % mo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rev[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NTT</span><span class="params">(<span class="keyword">int</span> *A, <span class="keyword">int</span> n, <span class="keyword">int</span> inv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">if</span> (i &lt; rev[i])</span><br><span class="line">            swap(A[i], A[rev[i]]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l &lt; n; l &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tt = qpow(gi, (P - <span class="number">1</span>) / (l &lt;&lt; <span class="number">1</span>), P);</span><br><span class="line">        <span class="keyword">int</span> temp = (inv == <span class="number">1</span> ? tt : qpow(tt, P - <span class="number">2</span>, P));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += (l &lt;&lt; <span class="number">1</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> omega = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; l; j++, omega = <span class="number">1l</span>l * omega * temp % P)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> x = A[i + j], y = <span class="number">1l</span>l * omega * A[i + j + l] % P;</span><br><span class="line">                A[i + j] = inc(x, y);</span><br><span class="line">                A[i + j + l] = del(x, y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> invv = qpow(n, P - <span class="number">2</span>, P);</span><br><span class="line">    <span class="keyword">if</span> (inv == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            A[i] = <span class="number">1l</span>l * A[i] * invv % P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Inv2;</span><br><span class="line"><span class="keyword">int</span> C[N], D[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Ployinit</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ML = <span class="number">1</span>, <span class="built_in">bit</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ML &lt; n + m - <span class="number">1</span>)</span><br><span class="line">        ML &lt;&lt;= <span class="number">1</span>, <span class="built_in">bit</span>++;</span><br><span class="line">    <span class="keyword">return</span> ML;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NTTX</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> n, <span class="keyword">int</span> *b, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ML = <span class="number">1</span>, <span class="built_in">bit</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ML &lt; n + m - <span class="number">1</span>)</span><br><span class="line">        ML &lt;&lt;= <span class="number">1</span>, <span class="built_in">bit</span>++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ML; i++)</span><br><span class="line">        rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (<span class="built_in">bit</span> - <span class="number">1</span>));</span><br><span class="line">    NTT(a, ML, <span class="number">1</span>);</span><br><span class="line">    NTT(b, ML, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ML; i++)</span><br><span class="line">        a[i] = <span class="number">1l</span>l * a[i] * b[i] % P;</span><br><span class="line">    NTT(a, ML, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> fac[N];</span><br><span class="line"><span class="keyword">int</span> ifac[N];</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p1[N], p2[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> pa = solve(l, mid);</span><br><span class="line">    <span class="keyword">int</span> pb = solve(mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">int</span> len1 = g[pa].<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> len2 = g[pb].<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> ML = Ployinit(len1, len2);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ML; i++)</span><br><span class="line">        p1[i] = p2[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len1; i++)</span><br><span class="line">        p1[i] = g[pa][i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len2; i++)</span><br><span class="line">        p2[i] = g[pb][i];</span><br><span class="line"></span><br><span class="line">    NTTX(p1, len1, p2, len2);</span><br><span class="line"></span><br><span class="line">    g[pa].<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">int</span> li = len1 + len2 - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; li; i++)</span><br><span class="line">        g[pa].push_back(p1[i]);</span><br><span class="line">    <span class="keyword">return</span> pa;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c[N], b[N], a[N];</span><br><span class="line"><span class="keyword">int</span> f[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="built_in">read</span>();</span><br><span class="line">        fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            fac[i] = <span class="number">1l</span>l * fac[i - <span class="number">1</span>] * i % mod;</span><br><span class="line">        ifac[n] = qpow(fac[n], mod - <span class="number">2</span>, mod);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; --i)</span><br><span class="line">            ifac[i - <span class="number">1</span>] = <span class="number">1l</span>l * ifac[i] * i % mod;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line">        <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span>(b));</span><br><span class="line">        <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span>(c));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">            a[i] = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">            a[i] = <span class="number">1l</span>l * a[i] * fac[i] % mod;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">            b[i] = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">            c[i] = <span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            g[i].<span class="built_in">clear</span>();</span><br><span class="line">            g[i].push_back(c[i]), g[i].push_back(b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> o = solve(<span class="number">2</span>, n);</span><br><span class="line">        reverse(g[o].<span class="built_in">begin</span>(), g[o].<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">int</span> flen = g[o].<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g[o].<span class="built_in">size</span>(); i++)</span><br><span class="line">            f[i] = g[o][i];</span><br><span class="line">        NTTX(f, flen, a, n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld "</span>, (<span class="number">1l</span>l * f[i + n - <span class="number">1</span>] * ifac[i]) % mod);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, (<span class="number">1l</span>l * f[n + n - <span class="number">1</span>] * ifac[n]) % mod);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </details>]]></content>
    
    <summary type="html">
    
      &lt;script type=&quot;math/tex; mode=display&quot;&gt;
    f_i(x)=b_i(f_{i-1}(x))^{&#39;}+c_if(x)&lt;/script&gt;
    
    </summary>
    
    
    
      <category term="NTT" scheme="http://yoursite.com/tags/NTT/"/>
    
  </entry>
  
  <entry>
    <title>CF1418E. Expected Damage</title>
    <link href="http://yoursite.com/2020/09/15/CF1418E/"/>
    <id>http://yoursite.com/2020/09/15/CF1418E/</id>
    <published>2020-09-15T02:47:00.000Z</published>
    <updated>2020-09-16T07:33:11.983Z</updated>
    
    <content type="html"><![CDATA[<p>不想写题意</p><a id="more"></a><p>一定要单独考虑。</p><p>这种排列组合，一定要考虑概率,首先$\leq b$一定可以$1-\frac{a}{big}$</p><p>然后小的一定要单独考虑$big+1$个间隙不能选择$a$种。</p><p>一定要单独考虑</p><details>  <summary>代码</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)</span><br><span class="line">        x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inc</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> (x + y &gt;= mod) ? (x + y - mod) : (x + y); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> (x - y &lt; <span class="number">0</span>) ? (x - y + mod) : (x - y); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> x, <span class="keyword">int</span> mo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &amp; <span class="number">1</span>)</span><br><span class="line">            res = <span class="number">1l</span>l * a * res % mo;</span><br><span class="line">        a = <span class="number">1l</span>l * a * a % mo;</span><br><span class="line"></span><br><span class="line">        x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> d[N];</span><br><span class="line"><span class="keyword">int</span> sum[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">read</span>(), m = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        d[i] = <span class="built_in">read</span>();</span><br><span class="line">    sort(<span class="number">1</span> + d, <span class="number">1</span> + d + n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        sum[i] = inc(sum[i - <span class="number">1</span>], d[i] % mod);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="built_in">read</span>(), b = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">int</span> k = lower_bound(<span class="number">1</span> + d, <span class="number">1</span> + d + n, b) - d;</span><br><span class="line">        k--;</span><br><span class="line">        <span class="keyword">int</span> big = n - k;</span><br><span class="line">        <span class="keyword">if</span> (big &lt; a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            ans = inc(<span class="number">1l</span>l * del(sum[n], sum[k]) * (big - a) % mod * qpow(big, mod - <span class="number">2</span>, mod) % mod, ans);</span><br><span class="line">            ans = inc(<span class="number">1l</span>l * sum[k] * (big + <span class="number">1</span> - a) % mod * qpow(big + <span class="number">1</span>, mod - <span class="number">2</span>, mod) % mod, ans);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不想写题意&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="概率" scheme="http://yoursite.com/tags/%E6%A6%82%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>CF1373F. Network Coverage</title>
    <link href="http://yoursite.com/2020/09/13/CF1373F/"/>
    <id>http://yoursite.com/2020/09/13/CF1373F/</id>
    <published>2020-09-13T02:47:00.000Z</published>
    <updated>2020-09-14T03:13:06.209Z</updated>
    
    <content type="html"><![CDATA[<p>第$i$个供电所可以提供$b_i$给$i$,$(i+1)\% n$,$a_i$是所需要的电。</p><p>询问是否可以满足供电。<br><a id="more"></a></p><p>一个很神奇的二分，原来二分可以这样用。</p><p>考虑给$b_1$给$x$给$a_1$,那么显然后面可以递推过去</p><ul><li>如果在中途发生了供电不足，表示$x$需要少一点</li><li>如果最后给$a_1$的满足不了$a_1$,那就让$b_i$多一点（此时最后$b_n$给$a_i$的只会增加或者不变，但不会减少）</li><li>成功的就会在$[l,r]$之间。</li></ul><details>  <summary>代码</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;ll, ll&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="keyword">const</span> ll N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)</span><br><span class="line">        x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line">ll a[N], b[N];</span><br><span class="line">ll n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll p = b[<span class="number">1</span>] - x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        p = <span class="built_in">min</span>(b[i] + p - a[i], b[i]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (p &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p + x &gt;= a[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll T = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        n = <span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            a[i] = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            b[i] = <span class="built_in">read</span>();</span><br><span class="line">        ll l = <span class="number">0</span>, r = b[<span class="number">1</span>];</span><br><span class="line">        ll ok = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">        &#123;</span><br><span class="line">            ll mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            ll o = check(mid);</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                ok = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (o == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(ok ? <span class="string">"YES"</span></span><br><span class="line">                : <span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第$i$个供电所可以提供$b_i$给$i$,$(i+1)\% n$,$a_i$是所需要的电。&lt;/p&gt;
&lt;p&gt;询问是否可以满足供电。&lt;br&gt;
    
    </summary>
    
    
    
      <category term="二分" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>CF1009G Allowed Letters</title>
    <link href="http://yoursite.com/2020/09/13/CF1009G/"/>
    <id>http://yoursite.com/2020/09/13/CF1009G/</id>
    <published>2020-09-13T02:47:00.000Z</published>
    <updated>2020-09-16T04:27:42.385Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个长为$n$的串，字符集$’a’…’f’$。你可以重排这个串，满足指定$m$个位置上只能放特定的字符，$m$个位置以及字符集会给出,求字典序最小的串<br><a id="more"></a></p><p>首先看成二分图，把$a,f$字母当作$X$,位置当成$Y$。$|Y|$连向$|X|$的边就是特定字符。</p><p>根据完美匹配可以知道，产生了$X$的子集$\leq|Y|$ </p><p>二分图G中的两部分顶点组成的集合分别为X, Y(假设有$|𝑋|≤|𝑌|$)。G中有一组无公共点的边，一端恰好为组成X的点(也就是存在完美匹配)的充分必要条件是：X中的任意k个点至少与Y中的k个点相邻，即对于X中的一个点集W ，令N(W)为W的所有邻居， 霍尔定理即对于任意W，$|𝑊|≤|𝑁(𝑊)|$</p><p>$f[i][s]，表示[i,n]$,子集$s$所连的位置有多少。</p><p>那么贪心的取，判断是否可以取到由于取完了$ans[i]=j$，则$cnt[j]-1$，这时候判断$f[i+1][s]\geq cnt[j]$。根据定理即可。</p><p>比如$a \ 1 \ b$</p><details>  <summary>代码</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)</span><br><span class="line">        x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> s[N], ans[N];</span><br><span class="line"><span class="keyword">int</span> cnt[N], z[N];</span><br><span class="line"><span class="keyword">int</span> f[N][<span class="number">70</span>];</span><br><span class="line"><span class="keyword">int</span> st, n;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; st; t++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">6</span>; k++)</span><br><span class="line">            <span class="keyword">if</span> ((<span class="number">1</span> &lt;&lt; k) &amp; t)</span><br><span class="line">            &#123;</span><br><span class="line">                res += cnt[k];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (res &gt; f[i + <span class="number">1</span>][t])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> m = <span class="built_in">read</span>();</span><br><span class="line">    n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cnt[s[i] - <span class="string">'a'</span>]++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> t[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">int</span> x = <span class="built_in">read</span>();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, t + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(t + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= len; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            z[x] |= (<span class="number">1</span> &lt;&lt; (t[j] - <span class="string">'a'</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    st = <span class="number">1</span> &lt;&lt; <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!z[i])</span><br><span class="line">            z[i] = st - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; st; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            f[i][j] = f[i + <span class="number">1</span>][j] + ((j &amp; z[i]) &gt; <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ok = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++)</span><br><span class="line">            <span class="keyword">if</span> (cnt[j] &gt; <span class="number">0</span> &amp;&amp; ((<span class="number">1</span> &lt;&lt; j) &amp; z[i]))</span><br><span class="line">            &#123;</span><br><span class="line">                cnt[j]--;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (check(i))</span><br><span class="line">                &#123;</span><br><span class="line">                    ans[i] = <span class="string">'a'</span> + j;</span><br><span class="line"></span><br><span class="line">                    ok = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="comment">//cout &lt;&lt; 2333 &lt;&lt; endl;</span></span><br><span class="line">                    cnt[j]++;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span> (!ok)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Impossible"</span>), <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans[i];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个长为$n$的串，字符集$’a’…’f’$。你可以重排这个串，满足指定$m$个位置上只能放特定的字符，$m$个位置以及字符集会给出,求字典序最小的串&lt;br&gt;
    
    </summary>
    
    
    
      <category term="hall定理" scheme="http://yoursite.com/tags/hall%E5%AE%9A%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>CF1373G Pawns</title>
    <link href="http://yoursite.com/2020/09/13/CF1373G/"/>
    <id>http://yoursite.com/2020/09/13/CF1373G/</id>
    <published>2020-09-13T02:47:00.000Z</published>
    <updated>2020-09-16T06:40:33.889Z</updated>
    
    <content type="html"><![CDATA[<p>增加点$a_i$，然后一个位置只能挤一个不然，就要往上挤。询问最少要增高多少。</p><a id="more"></a><p>可以看成二分图匹配。</p><p>假设$s$</p><p>$f[j]$表示$j$以上的$a_j$有几个。</p><p>根据$hall$定理,$s-j+1\geq f[j]$.</p><p>根据$hall$定理,$s\geq f[j]+j-1$.</p><p>$(max(a_i),s]$必然可以。</p><p>只需要找$f[i]\in[1,max(a_i)]$的最大值。</p><p>然后维护就是$[1,j]$的$f[j]$的区间$+$。</p><details>  <summary>代码</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)</span><br><span class="line">        x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SEN = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segmentTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> lazy[SEN &lt;&lt; <span class="number">2</span>], mx[SEN &lt;&lt; <span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addtag</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        lazy[pos] += w;</span><br><span class="line">        mx[pos] += w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lazy[pos])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> w = lazy[pos];</span><br><span class="line">            <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            addtag(pos &lt;&lt; <span class="number">1</span>, l, mid, w);</span><br><span class="line">            addtag(pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, w);</span><br><span class="line"></span><br><span class="line">            lazy[pos] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        mx[pos] = <span class="built_in">max</span>(mx[pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>], mx[pos &lt;&lt; <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ql &gt; qr)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> mx[pos];</span><br><span class="line">        &#125;</span><br><span class="line">        pushdown(pos, l, r);</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= mid)</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, query(ql, qr, pos &lt;&lt; <span class="number">1</span>, l, mid));</span><br><span class="line">        <span class="keyword">if</span> (qr &gt; mid)</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, query(ql, qr, pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> w, <span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ql &gt; qr)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr)</span><br><span class="line">        &#123;</span><br><span class="line">            addtag(pos, l, r, w);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pushdown(pos, l, r);</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= mid)</span><br><span class="line">            update(ql, qr, w, pos &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">        <span class="keyword">if</span> (qr &gt; mid)</span><br><span class="line">            update(ql, qr, w, pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">        pushup(pos);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; t;</span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="built_in">map</span>&lt;pii, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">read</span>(), k = <span class="built_in">read</span>(), m = <span class="built_in">read</span>();</span><br><span class="line">    n *= <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        t.update(i, i, i - <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="built_in">read</span>(), y = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">int</span> o = y + <span class="built_in">abs</span>(x - k);</span><br><span class="line">        <span class="keyword">if</span> (mp[mk(x, y)] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            mp[mk(x, y)] = <span class="number">1</span>;</span><br><span class="line">            s.insert(o);</span><br><span class="line"></span><br><span class="line">            t.update(<span class="number">1</span>, o, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            mp[mk(x, y)] = <span class="number">0</span>;</span><br><span class="line">            s.erase(s.lower_bound(o));</span><br><span class="line">            t.update(<span class="number">1</span>, o, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">size</span>() != <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="built_in">max</span>(<span class="number">0</span>, t.query(<span class="number">1</span>, *s.rbegin(), <span class="number">1</span>, <span class="number">1</span>, n) - n / <span class="number">2</span>));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;增加点$a_i$，然后一个位置只能挤一个不然，就要往上挤。询问最少要增高多少。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="hall 定理" scheme="http://yoursite.com/tags/hall-%E5%AE%9A%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>CF1073G. Yet Another LCP Problem</title>
    <link href="http://yoursite.com/2020/09/12/CF1073G/"/>
    <id>http://yoursite.com/2020/09/12/CF1073G/</id>
    <published>2020-09-12T02:47:00.000Z</published>
    <updated>2020-09-14T03:05:41.079Z</updated>
    
    <content type="html"><![CDATA[<p>选两组后缀$s,t$,求$\sum lcp(s_i,t_j)$<br><a id="more"></a></p><p>检验板子题</p><ul><li>字符串反转插入后缀自动机就是后缀树，记录下每个后缀的终止节点。</li><li>$lcp(i,j)$=$maxlen[lca(i,j)]$</li><li>非常简单的树形$dp$，注意$i=j$的情况即可。</li></ul><details>  <summary>代码</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">8e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)</span><br><span class="line">        x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SN = <span class="number">4e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SM = <span class="number">26</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SAM</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> trans[SN][SM], link[SN], pre, scnt, len[SN], siz[SN];</span><br><span class="line">    SAM() &#123; pre = scnt = <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cur = ++scnt;</span><br><span class="line">        siz[cur] = <span class="number">1</span>;</span><br><span class="line">        len[cur] = len[pre] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> u;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (u = pre; u &amp;&amp; !trans[u][id]; u = link[u])</span><br><span class="line">            trans[u][id] = cur;</span><br><span class="line">        pre = cur;</span><br><span class="line">        <span class="keyword">if</span> (!u)</span><br><span class="line">            link[cur] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = trans[u][id];</span><br><span class="line">            <span class="keyword">if</span> (len[u] + <span class="number">1</span> == len[x])</span><br><span class="line">                link[cur] = x;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> nc = ++scnt;</span><br><span class="line">                link[nc] = link[x];</span><br><span class="line">                len[nc] = len[u] + <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">memcpy</span>(trans[nc], trans[x], <span class="keyword">sizeof</span>(trans[x]));</span><br><span class="line">                link[cur] = link[x] = nc;</span><br><span class="line">                <span class="keyword">for</span> (; u &amp;&amp; trans[u][id] == x; u = link[u])</span><br><span class="line">                    trans[u][id] = nc;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; sam;</span><br><span class="line"><span class="keyword">namespace</span> Tree</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> st[N][<span class="number">22</span>], dfn[N], dep[N], tot, lg2[N];</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        st[++tot][<span class="number">0</span>] = x;</span><br><span class="line">        dep[x] = dep[fa] + <span class="number">1</span>;</span><br><span class="line">        dfn[x] = tot;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> to : G[x])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (to == fa)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            dfs(to, x);</span><br><span class="line">            st[++tot][<span class="number">0</span>] = x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lower</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (dep[u] &lt; dep[v]) ? u : v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Lca_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= tot; i++)</span><br><span class="line">            lg2[i] = lg2[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; l) &lt;= tot; l++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; l) - <span class="number">1</span> &lt;= tot; i++)</span><br><span class="line">                st[i][l] = lower(st[i][l - <span class="number">1</span>], st[i + (<span class="number">1</span> &lt;&lt; (l - <span class="number">1</span>))][l - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        u = dfn[u];</span><br><span class="line">        v = dfn[v];</span><br><span class="line">        <span class="keyword">if</span> (u &gt; v)</span><br><span class="line">            swap(u, v);</span><br><span class="line">        <span class="keyword">int</span> i = lg2[v - u + <span class="number">1</span>], w = (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">        <span class="keyword">return</span> lower(st[u][i], st[v - w + <span class="number">1</span>][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dis</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lc = lca(u, v);</span><br><span class="line">        <span class="keyword">return</span> dep[u] + dep[v] - <span class="number">2</span> * dep[lc];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;; <span class="comment">// namespace Tree</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Tree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> XTree</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line">    <span class="keyword">int</span> dp[N][<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> b[N];</span><br><span class="line">    <span class="keyword">int</span> vis1[N], vis0[N];</span><br><span class="line">    ll ans;</span><br><span class="line">    <span class="built_in">vector</span>&lt;pii&gt; g[N];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Tree::dfn[x] &lt; Tree::dfn[y];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> d = Tree::dis(u, v);</span><br><span class="line"></span><br><span class="line">        g[u].push_back(mk(v, d));</span><br><span class="line">        g[v].push_back(mk(u, d));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        tmp.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">while</span> (!s.empty())</span><br><span class="line">            s.pop();</span><br><span class="line">        sort(b + <span class="number">1</span>, b + <span class="number">1</span> + k, cmp);</span><br><span class="line">        k = unique(b + <span class="number">1</span>, b + <span class="number">1</span> + k) - b - <span class="number">1</span>;</span><br><span class="line">        s.push(<span class="number">1</span>);</span><br><span class="line">        tmp.push_back(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = b[i];</span><br><span class="line">            tmp.push_back(x);</span><br><span class="line">            <span class="keyword">int</span> lca = Tree::lca(x, s.top());</span><br><span class="line">            <span class="keyword">while</span> (s.top() != lca)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> tmc = s.top();</span><br><span class="line">                s.pop();</span><br><span class="line">                <span class="keyword">if</span> (dfn[s.top()] &lt; dfn[lca])</span><br><span class="line">                    s.push(lca), tmp.push_back(lca);</span><br><span class="line">                addEdge(s.top(), tmc);</span><br><span class="line">            &#125;</span><br><span class="line">            s.push(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (s.top() != <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            addEdge(s.top(), tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x : tmp)</span><br><span class="line">        &#123;</span><br><span class="line">            g[x].<span class="built_in">clear</span>();</span><br><span class="line">            dp[x][<span class="number">1</span>] = dp[x][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (pii now : g[x])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> to = now.first;</span><br><span class="line">            <span class="keyword">int</span> w = now.second;</span><br><span class="line">            <span class="keyword">if</span> (to == fa)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            dfs1(to, x, d + w);</span><br><span class="line">            <span class="keyword">if</span> (vis0[x] != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                res += dp[to][<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (vis1[x] != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                res += dp[to][<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            res += <span class="number">1l</span>l * dp[to][<span class="number">1</span>] * dp[x][<span class="number">0</span>];</span><br><span class="line">            res += <span class="number">1l</span>l * dp[x][<span class="number">1</span>] * dp[to][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">            dp[x][<span class="number">0</span>] += dp[to][<span class="number">0</span>];</span><br><span class="line">            dp[x][<span class="number">1</span>] += dp[to][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (vis0[x] != <span class="number">0</span>)</span><br><span class="line">            dp[x][<span class="number">0</span>] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (vis1[x] != <span class="number">0</span>)</span><br><span class="line">            dp[x][<span class="number">1</span>] += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        ans += sam.len[x] * res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        dfs1(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// namespace XTree</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> ed[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">read</span>(), q = <span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span><br><span class="line">    reverse(<span class="number">1</span> + s, <span class="number">1</span> + s + n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sam.insert(s[i] - <span class="string">'a'</span>);</span><br><span class="line">        ed[i] = sam.pre;</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(<span class="number">1</span> + ed, <span class="number">1</span> + ed + n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= sam.scnt; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        G[sam.link[i]].push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    Tree::Lca_init();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> A = <span class="built_in">read</span>(), B = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        XTree::ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= A; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = <span class="built_in">read</span>();</span><br><span class="line">            x = ed[x];</span><br><span class="line">            XTree::vis1[x] = <span class="number">1</span>;</span><br><span class="line">            XTree::b[++cnt] = x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= B; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = <span class="built_in">read</span>();</span><br><span class="line">            <span class="keyword">int</span> tmp = x;</span><br><span class="line">            x = ed[x];</span><br><span class="line">            <span class="keyword">if</span> (XTree::vis1[x])</span><br><span class="line">                XTree::ans += n - tmp + <span class="number">1</span>;</span><br><span class="line">            XTree::vis0[x] = <span class="number">1</span>;</span><br><span class="line">            XTree::b[++cnt] = x;</span><br><span class="line">        &#125;</span><br><span class="line">        XTree::build(cnt);</span><br><span class="line">        XTree::solve();</span><br><span class="line">        XTree::<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt; j++)</span><br><span class="line">            XTree::vis1[XTree::b[j]] = <span class="number">0</span>, XTree::vis0[XTree::b[j]] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;选两组后缀$s,t$,求$\sum lcp(s_i,t_j)$&lt;br&gt;
    
    </summary>
    
    
    
      <category term="虚树" scheme="http://yoursite.com/tags/%E8%99%9A%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>CF1406E. Deleting Numbers</title>
    <link href="http://yoursite.com/2020/09/12/CF1406E/"/>
    <id>http://yoursite.com/2020/09/12/CF1406E/</id>
    <published>2020-09-12T02:47:00.000Z</published>
    <updated>2020-09-14T03:00:58.922Z</updated>
    
    <content type="html"><![CDATA[<p>交互，给一堆数$1…n$,$n\leq 10^5$,$q\leq 10^4$</p><ul><li>A a 返回$a$的倍数的数量</li><li>B a 返回$a$的倍数的数量，并且删除这些数，不删除$x$。</li><li>C a 回答答案<a id="more"></a></li></ul><p>$10^5$的质数大概$9500$,$\sqrt{10^5}$的质数$70$。</p><p>分$x$</p><ul><li>大质数$\leq \sqrt{10^5}$</li><li>$1$</li><li>大质数$\times$一些小质数。</li></ul><p>首先我们先把所有$1…\sqrt{10^5}$的质数去掉。</p><p>这样只剩下$x,1,大质数$</p><p>可以通过$\sum \log_i{n}$大概$170$找到$x=大质数\times 非大质数部分$</p><p>然后再去寻找是否有这个大质数。</p><p>这里使用类似二分的查找</p><ul><li>$[mid,r]$部分如果出现大质数倍数数量$&gt;1$，就是第三种情况。</li><li>如果经过这波操作，通过$A,1$,$[mid,r]$还有残余，则表示有纯质数，这时候再询问一遍（答案一定在这里）。</li><li>否则$[l,mid-1]$继续寻找。</li></ul><p>询问次数$9500+70+170\leq 10^4$</p><details>  <summary>代码</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> npr[N], pr[N], pcnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Prime_init</span><span class="params">(<span class="keyword">int</span> X)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    npr[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= X; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!npr[i])</span><br><span class="line">            pr[++pcnt] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= pcnt &amp;&amp; pr[j] * i &lt;= X; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            npr[pr[j] * i] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i % pr[j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> bp[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sp;</span><br><span class="line"><span class="keyword">int</span> o, ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Aq</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"A "</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; ans;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Bq</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"B "</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; ans;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (l &gt; r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = mid; i &lt;= r; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = Bq(bp[i]);</span><br><span class="line">        sum++;</span><br><span class="line">        <span class="keyword">if</span> (tmp &gt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"C "</span> &lt;&lt; ans * bp[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> p = Aq(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (o - p != sum)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = mid; i &lt;= r; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = Bq(bp[i]);</span><br><span class="line">            <span class="keyword">if</span> (tmp &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"C "</span> &lt;&lt; ans * bp[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    o = p;</span><br><span class="line">    solve(l, mid - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    Prime_init(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= pcnt; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1l</span>l * pr[i] * pr[i] &lt;= n)</span><br><span class="line">        &#123;</span><br><span class="line">            sp.push_back(pr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            bp[++cnt] = pr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x : sp)</span><br><span class="line">    &#123;</span><br><span class="line">        Bq(x);</span><br><span class="line">    &#125;</span><br><span class="line">    o = Aq(<span class="number">1</span>);</span><br><span class="line">    ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x : sp)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> z = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> c = x; c &lt;= n; c *= x)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> tmp = Aq(c);</span><br><span class="line">            <span class="keyword">if</span> (tmp == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                z = c;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans *= z;</span><br><span class="line">    &#125;</span><br><span class="line">    solve(<span class="number">1</span>, cnt);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"C "</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;交互，给一堆数$1…n$,$n\leq 10^5$,$q\leq 10^4$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A a 返回$a$的倍数的数量&lt;/li&gt;
&lt;li&gt;B a 返回$a$的倍数的数量，并且删除这些数，不删除$x$。&lt;/li&gt;
&lt;li&gt;C a 回答答案
    
    </summary>
    
    
    
      <category term="思维" scheme="http://yoursite.com/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>CF981F Addition on Segments</title>
    <link href="http://yoursite.com/2020/09/12/CF981F/"/>
    <id>http://yoursite.com/2020/09/12/CF981F/</id>
    <published>2020-09-12T02:47:00.000Z</published>
    <updated>2020-09-16T06:31:19.016Z</updated>
    
    <content type="html"><![CDATA[<p>$n$个新郎和$n$个新娘围成一个环，长度为$L$，第$i$个新郎位置为$a_i$ ,第$i$个新娘位置为$b_i$,需要将他们两两配对，最小化新郎和新娘距离的最大值。</p><a id="more"></a><p>显然可以二分答案。</p><p>那么可以配对的新娘一定在$[a[i]-x,a[i]+x]$</p><p>就可解决环化成一条3倍长链。</p><p>若一个二分图存在完美匹配，那么对于左边任意子集𝑆，其对应边连接了一个点集𝑇，那么有|𝑆|≤|𝑇|。</p><ul><li>一种神奇的判断是根据人和位置都必须要是连续的，所以下一个人的范围必须是要在前一个人的l+1到r+1，然后不断地求区间并集即可。</li><li>这个题的二分图有一个特殊的地方，就是对于左边的一个点𝑖，连接的一定是一段连续的区间$[𝑙𝑖,𝑟𝑖]$，那么只需要求交集。</li></ul><p>如果要不满足的化$R[i]-L[i]<i-j,i-R_i>j-L_j$</p><details>  <summary>代码</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)</span><br><span class="line">        x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a[N], b[N], n;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = <span class="number">3</span> * n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> R = a[i] + x;</span><br><span class="line">        <span class="keyword">int</span> L = a[i] - x;</span><br><span class="line">        <span class="keyword">while</span> (b[l] &lt; L)</span><br><span class="line">            l++;</span><br><span class="line">        <span class="keyword">while</span> (b[r] &gt; R)</span><br><span class="line">            r--;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; L &lt;&lt; " " &lt;&lt; R &lt;&lt; endl;</span></span><br><span class="line">        <span class="comment">// cout &lt;&lt; l &lt;&lt; " " &lt;&lt; r &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">if</span> (l &gt; r)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        l++, r++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">int</span> L = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        a[i] = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        b[i] = <span class="built_in">read</span>();</span><br><span class="line">        b[i + n] = b[i] + L;</span><br><span class="line">        b[i + <span class="number">2</span> * n] = b[i] - L;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(<span class="number">1</span> + a, <span class="number">1</span> + a + n);</span><br><span class="line">    sort(<span class="number">1</span> + b, <span class="number">1</span> + b + <span class="number">3</span> * n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = L, ans = L;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (check(mid))</span><br><span class="line">            ans = mid, r = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;$n$个新郎和$n$个新娘围成一个环，长度为$L$，第$i$个新郎位置为$a_i$ ,第$i$个新娘位置为$b_i$,需要将他们两两配对，最小化新郎和新娘距离的最大值。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="hall定理" scheme="http://yoursite.com/tags/hall%E5%AE%9A%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>CF1320E Treeland and Viruses</title>
    <link href="http://yoursite.com/2020/09/11/CF1320E/"/>
    <id>http://yoursite.com/2020/09/11/CF1320E/</id>
    <published>2020-09-11T02:47:00.000Z</published>
    <updated>2020-09-12T05:37:26.658Z</updated>
    
    <content type="html"><![CDATA[<p>有一棵有$n$个节点的树，$q$次询问（询问互相独立），每次给定$k_i$个颜色，每个颜色有一个起始点$v_j$和移动速度$s_j$每一个颜色在每一次操作中会使它周围没有被染色的连通块上与它的距离不超过$s_j$<br> 的点全部染为这一个颜色，每一轮中，颜色从$1$到$k_i$<br> 依次开始操作，一直到所有点全部被染色为止，再询问$m_i$个关键点的颜色。</p> <a id="more"></a><p>显然是虚树的问题，转化一下。</p><p> 你有一棵树, 有一些点已经被感染了, 每条边有边权, 求这棵树所有的点被哪种病毒感染</p><p>考虑简单的$BFS$,按照编号顺序扩展每一个点，然后每次可以更新一下。<br>可以整一整玄学的$SPFA$.</p><p>考虑$1\rightarrow 3$需要$3$秒,考虑$2\rightarrow 3$需要$2$秒,那么这个点都会被抓到，但是扩展$3$的时候是用$2$号病毒扩展，类似$disjstar$，我总是拿最优的先扩展，那么可以用优先队列优化.</p><p><details><br>  <summary>代码</summary></p><p>```c++</p><h1 id="include"><a href="#include" class="headerlink" title="include "></a>include <iostream></h1><h1 id="include-1"><a href="#include-1" class="headerlink" title="include "></a>include <cstdio></h1><h1 id="include-2"><a href="#include-2" class="headerlink" title="include "></a>include <algorithm></h1><h1 id="include-3"><a href="#include-3" class="headerlink" title="include "></a>include <queue></h1><h1 id="include-4"><a href="#include-4" class="headerlink" title="include "></a>include <cmath></h1><h1 id="include-5"><a href="#include-5" class="headerlink" title="include "></a>include <cstring></h1><h1 id="include-6"><a href="#include-6" class="headerlink" title="include "></a>include <vector></h1><h1 id="include-7"><a href="#include-7" class="headerlink" title="include "></a>include <map></h1><h1 id="include-8"><a href="#include-8" class="headerlink" title="include "></a>include <stack></h1><p>using namespace std;<br>typedef long long ll;</p><h1 id="define-pii-pair"><a href="#define-pii-pair" class="headerlink" title="define pii pair"></a>define pii pair<int, int></h1><h1 id="define-mk-make-pair"><a href="#define-mk-make-pair" class="headerlink" title="define mk make_pair"></a>define mk make_pair</h1><p>const int N = 1e6 + 10;<br>const int mod = 1e9 + 7;<br>const int INF = 1e9;<br>int read()<br>{<br>    int x = 0, F = 1;<br>    char c = getchar();<br>    while (c &lt; ‘0’ || c &gt; ‘9’)<br>    {<br>        if (c == ‘-‘)<br>            F = -1;<br>        c = getchar();<br>    }<br>    while (c &gt;= ‘0’ &amp;&amp; c &lt;= ‘9’)<br>        x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + c - ‘0’, c = getchar();<br>    return x * F;<br>}</p><p>namespace Tree<br>{</p><pre><code>int st[N][22], dfn[N], dep[N], tot, lg2[N];vector&lt;int&gt; G[N];void dfs(int x, int fa){    st[++tot][0] = x;    dep[x] = dep[fa] + 1;    dfn[x] = tot;    for (int to : G[x])    {        if (to == fa)            continue;        dfs(to, x);        st[++tot][0] = x;    }}int lower(int u, int v){    return (dep[u] &lt; dep[v]) ? u : v;}void Lca_init(){    dfs(1, 0);    for (int i = 2; i &lt;= tot; i++)        lg2[i] = lg2[i &gt;&gt; 1] + 1;    for (int l = 1; (1 &lt;&lt; l) &lt;= tot; l++)    {        for (int i = 1; i + (1 &lt;&lt; l) - 1 &lt;= tot; i++)            st[i][l] = lower(st[i][l - 1], st[i + (1 &lt;&lt; (l - 1))][l - 1]);    }}int lca(int u, int v){    u = dfn[u];    v = dfn[v];    if (u &gt; v)        swap(u, v);    int i = lg2[v - u + 1], w = (1 &lt;&lt; i);    return lower(st[u][i], st[v - w + 1][i]);}int dis(int u, int v){    int lc = lca(u, v);    return dep[u] + dep[v] - 2 * dep[lc];}</code></pre><p>}; // namespace Tree<br>using namespace Tree;</p><p>struct node<br>{<br>    int u, t, c, d; // u表示点，t表示到达时间，c表示啥颜色，d表示经过的路程<br>};<br>inline bool operator&lt;(node x, node y) { return x.t == y.t ? x.c &gt; y.c : x.t &gt; y.t; }<br>priority_queue<node> q;<br>int col[N];</p><p>namespace XTree<br>{<br>    stack<int> s;<br>    vector<int> tmp;</p><pre><code>int b[N];vector&lt;pii&gt; g[N];bool cmp(int x, int y){    return Tree::dfn[x] &lt; Tree::dfn[y];}void addEdge(int u, int v){    int d = Tree::dis(u, v);    g[u].push_back(mk(v, d));    g[v].push_back(mk(u, d));}void build(int k){    tmp.clear();    while (!s.empty())        s.pop();    sort(b + 1, b + 1 + k, cmp);    k = unique(b + 1, b + 1 + k) - b - 1;    s.push(1);    tmp.push_back(1);    for (int i = 1; i &lt;= k; ++i)    {        int x = b[i];        tmp.push_back(x);        int lca = Tree::lca(x, s.top());        while (s.top() != lca)        {            int tmc = s.top();            s.pop();            if (dfn[s.top()] &lt; dfn[lca])                s.push(lca), tmp.push_back(lca);            addEdge(s.top(), tmc);        }        s.push(x);    }    while (s.top() != 1)    {        int tmp = s.top();        s.pop();        addEdge(s.top(), tmp);    }}void clear(){    for (int x : tmp)    {        g[x].clear();        col[x] = 0;    }}</code></pre><p>} // namespace XTree<br>int s[N], vt[N], ut[N];<br>void solve()<br>{</p><pre><code>while (!q.empty()){    node o = q.top();    q.pop();    int x = o.u;    if (col[x])        continue;    col[x] = o.c;    for (pii now : XTree::g[x])    {        int to = now.first;        int w = now.second;        if (!col[to])            q.push((node){to, (o.d + w - 1) / vt[o.c] + 1, o.c, o.d + w});    }}</code></pre><p>}</p><p>int main()<br>{</p><pre><code>int n = read();for (int i = 1; i &lt; n; i++){    int u = read(), v = read();    G[u].push_back(v);    G[v].push_back(u);}Lca_init();int Q = read();while (Q--){    int k = read(), m = read();    int cnt = 0;    for (int i = 1; i &lt;= k; i++)    {        s[i] = read();        vt[i] = read();        XTree::b[++cnt] = s[i];        q.push((node){s[i], 0, i, 0});    }    for (int i = 1; i &lt;= m; i++)    {        ut[i] = read();        XTree::b[++cnt] = ut[i];    }    XTree::build(cnt);    solve();    for (int i = 1; i &lt;= m; i++)    {        printf(&quot;%d &quot;, col[ut[i]]);    }    puts(&quot;&quot;);    XTree::clear();}</code></pre><p>}</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有一棵有$n$个节点的树，$q$次询问（询问互相独立），每次给定$k_i$个颜色，每个颜色有一个起始点$v_j$和移动速度$s_j$每一个颜色在每一次操作中会使它周围没有被染色的连通块上与它的距离不超过$s_j$&lt;br&gt; 的点全部染为这一个颜色，每一轮中，颜色从$1$到$k_i$&lt;br&gt; 依次开始操作，一直到所有点全部被染色为止，再询问$m_i$个关键点的颜色。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="虚树" scheme="http://yoursite.com/tags/%E8%99%9A%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round 669 (Div. 2)</title>
    <link href="http://yoursite.com/2020/09/10/CR669/"/>
    <id>http://yoursite.com/2020/09/10/CR669/</id>
    <published>2020-09-10T02:47:00.000Z</published>
    <updated>2020-09-10T02:39:06.326Z</updated>
    
    <content type="html"><![CDATA[<p>题解<br><a id="more"></a></p><h2 id="A-Ahahahahahahahaha"><a href="#A-Ahahahahahahahaha" class="headerlink" title="A.Ahahahahahahahaha"></a>A.Ahahahahahahahaha</h2><p>全输出0或1即可</p><h2 id="B-Big-Vova"><a href="#B-Big-Vova" class="headerlink" title="B. Big Vova"></a>B. Big Vova</h2><p>暴力</p><h2 id="C-Chocolate-Bunny"><a href="#C-Chocolate-Bunny" class="headerlink" title="C. Chocolate Bunny"></a>C. Chocolate Bunny</h2><p>$a_x \mod a_y,a_y \mod a_x$ ,没了。</p><h2 id="D-Discrete-Centrifugal-Jumps"><a href="#D-Discrete-Centrifugal-Jumps" class="headerlink" title="D. Discrete Centrifugal Jumps"></a>D. Discrete Centrifugal Jumps</h2><p>条件二就是$h_i\leq h_{i-1..j-1},h_j\leq h_{i-1..j-1}$</p><p>考虑$3214$,显然$3-4,2-4,1-4$ 都可以，那么用单调栈维护一个递减的数列就好了，最多$O(2n)$个转移。</p><ul><li>条件2与条件3类似</li></ul><h2 id="E-Egor-in-the-Republic-of-Dagestan"><a href="#E-Egor-in-the-Republic-of-Dagestan" class="headerlink" title="E. Egor in the Republic of Dagestan"></a>E. Egor in the Republic of Dagestan</h2><p>显然从$n$考虑是否可以进入$n$，由于是$1$的路径。$BFS$就可以最短路，显然如果出现不一样的需求，就可走这条路。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题解&lt;br&gt;
    
    </summary>
    
    
    
      <category term="训练记录" scheme="http://yoursite.com/tags/%E8%AE%AD%E7%BB%83%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>CF708C Centroids</title>
    <link href="http://yoursite.com/2020/09/10/CF708C/"/>
    <id>http://yoursite.com/2020/09/10/CF708C/</id>
    <published>2020-09-10T02:47:00.000Z</published>
    <updated>2020-09-12T04:55:22.160Z</updated>
    
    <content type="html"><![CDATA[<p>给定一颗树，你有一次将树改造的机会，改造的意思是删去一条边，再加入一条边，保证改造后还是一棵树。</p><p>请问有多少点可以通过改造，成为这颗树的重心？<br><a id="more"></a></p><p>考虑一次$dp$。<br>$dp[x]$表示$x$子树内不超过$n/2$的最大子树的大小。</p><p>$ans=(siz[maxsiz[x]]-dp[maxsiz[x]])\leq n/2$</p><p>显然不能直接每个暴力。</p><p>考虑换根$dp$</p><p>$h[x]$表示外子树的子树里不超过$n/2$的最大子树的大小。</p><p>判断的时候再加上外子树的大小即可。</p><p>考虑如何维护$h[x]$</p><p>$if(n - siz[x] &gt; n / 2)$那么所需要要的一定再外子树上，$h[to]=max(h[x],dp[x]去掉dp[to]$),</p><p>$if(n - siz[x] &lt;= n / 2)$那么$x$的外子树就是最大的$h[x]$，$h[to]=max(n-siz[x],dp[x]去掉dp[to]$),</p><p>$dp[x]$去掉$dp[to]$搞个最大值和次大值。</p><details>  <summary>代码</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)</span><br><span class="line">        x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">pii dp[N];</span><br><span class="line"><span class="keyword">int</span> siz[N], ms[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cmax</span><span class="params">(pii &amp;o, ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= o.first)</span><br><span class="line">    &#123;</span><br><span class="line">        o.second = o.first;</span><br><span class="line">        o.first = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &gt;= o.second)</span><br><span class="line">    &#123;</span><br><span class="line">        o.second = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> v[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dp[x] = mk(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    siz[x] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> to : g[x])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (to == fa)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        dfs(to, x);</span><br><span class="line">        siz[x] += siz[to];</span><br><span class="line">        <span class="keyword">if</span> (siz[ms[x]] &lt; siz[to])</span><br><span class="line">            ms[x] = to;</span><br><span class="line">        <span class="keyword">if</span> (siz[to] &gt; n / <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            cmax(dp[x], dp[to].first);</span><br><span class="line">            <span class="keyword">if</span> (dp[x].first == dp[to].first)</span><br><span class="line">                v[x] = to;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cmax(dp[x], siz[to]);</span><br><span class="line">            <span class="keyword">if</span> (dp[x].first == siz[to])</span><br><span class="line">                v[x] = to;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans[N];</span><br><span class="line"><span class="keyword">int</span> c[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ans[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (siz[ms[x]] &gt; n / <span class="number">2</span>)</span><br><span class="line">        ans[x] = (siz[ms[x]] - dp[ms[x]].first &lt;= n / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n - siz[x] &gt; n / <span class="number">2</span>)</span><br><span class="line">        ans[x] = (n - siz[x] - c[x] &lt;= n / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> to : g[x])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (to == fa)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> cur = (n - siz[x] &lt;= n / <span class="number">2</span>) ? (n - siz[x]) : c[x];</span><br><span class="line">        c[to] = <span class="built_in">max</span>(c[to], cur);</span><br><span class="line">        <span class="keyword">if</span> (to == v[x])</span><br><span class="line">            c[to] = <span class="built_in">max</span>(c[to], dp[x].second);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            c[to] = <span class="built_in">max</span>(c[to], dp[x].first);</span><br><span class="line"></span><br><span class="line">        dfs1(to, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="built_in">read</span>(), v = <span class="built_in">read</span>();</span><br><span class="line">        g[u].push_back(v);</span><br><span class="line">        g[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    dfs1(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, ans[i]);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一颗树，你有一次将树改造的机会，改造的意思是删去一条边，再加入一条边，保证改造后还是一棵树。&lt;/p&gt;
&lt;p&gt;请问有多少点可以通过改造，成为这颗树的重心？&lt;br&gt;
    
    </summary>
    
    
    
      <category term="换根dp" scheme="http://yoursite.com/tags/%E6%8D%A2%E6%A0%B9dp/"/>
    
  </entry>
  
  <entry>
    <title>P6419 [COCI2014-2015#1] Kamp</title>
    <link href="http://yoursite.com/2020/09/10/P6419/"/>
    <id>http://yoursite.com/2020/09/10/P6419/</id>
    <published>2020-09-10T02:47:00.000Z</published>
    <updated>2020-09-12T06:09:12.869Z</updated>
    
    <content type="html"><![CDATA[<p>一颗树 $n$ 个点，$n-1$ 条边，经过每条边都要花费一定的时间，任意两个点都是联通的。</p><p>询问经过$k$个点最少需要走多少路程。<br><a id="more"></a></p><p>设$f[x]$,$x$这个子树的所有关键点到$x$一来一回需要的路程。<br>$dis[x]$,表示最长的$x$与关键点最长距离。</p><script type="math/tex; mode=display">if(siz[to])  f[x] += f[to] + 2 * w;</script><p>显然对于根$ans[rt]=dp[rt]-dis[rt]$</p><p>考虑如果转移$x\rightarrow to\$</p><p>如果$siz[to]=k$<br>表示不需要做任何处理</p><script type="math/tex; mode=display"> dp[to]=dp[x]-(dp[to]+2w)+dp[to]+2w=dp[x]</script><p>但是注意如果$x$子树没有关键点</p><script type="math/tex; mode=display">dp[to]=dp[x]+2w</script><p>这个很好理解。</p><p>$up[x]$表示外子树最长的$x$与关键点最长距离</p><p>更新的时候只要注意下要更新原来$x$子树的最大还是次大值。</p><details>  <summary>代码</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;ll, ll&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="keyword">const</span> ll N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)</span><br><span class="line">        x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; g[N];</span><br><span class="line"></span><br><span class="line">pii dis[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cmax</span><span class="params">(pii &amp;o, ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= o.first)</span><br><span class="line">    &#123;</span><br><span class="line">        o.second = o.first;</span><br><span class="line">        o.first = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &gt;= o.second)</span><br><span class="line">    &#123;</span><br><span class="line">        o.second = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ll f[N];</span><br><span class="line">ll v[N], siz[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ll x, ll fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dis[x] = mk(<span class="number">0</span>, <span class="number">-1e9</span>);</span><br><span class="line">    siz[x] = v[x];</span><br><span class="line">    f[x] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (pii now : g[x])</span><br><span class="line">    &#123;</span><br><span class="line">        ll to = now.first;</span><br><span class="line">        ll w = now.second;</span><br><span class="line">        <span class="keyword">if</span> (to == fa)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        dfs(to, x);</span><br><span class="line">        siz[x] += siz[to];</span><br><span class="line">        <span class="keyword">if</span> (siz[to])</span><br><span class="line">        &#123;</span><br><span class="line">            f[x] += f[to] + <span class="number">2</span> * w;</span><br><span class="line">            cmax(dis[x], dis[to].first + w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ll up[N];</span><br><span class="line">ll k;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(ll x, ll fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (pii now : g[x])</span><br><span class="line">    &#123;</span><br><span class="line">        ll to = now.first;</span><br><span class="line">        ll w = now.second;</span><br><span class="line">        <span class="keyword">if</span> (to == fa)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (siz[to] != k)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            f[to] = f[x];</span><br><span class="line">            <span class="keyword">if</span> (!siz[to])</span><br><span class="line">                f[to] = f[x] + <span class="number">2</span> * w;</span><br><span class="line">            <span class="keyword">if</span> (dis[x].first == dis[to].first + w )</span><br><span class="line">            &#123;</span><br><span class="line">                up[to] = <span class="built_in">max</span>(dis[x].second, up[x]) + w;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                up[to] = <span class="built_in">max</span>(dis[x].first, up[x]) + w;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs1(to, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n = <span class="built_in">read</span>();</span><br><span class="line">    k = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ll u = <span class="built_in">read</span>(), v = <span class="built_in">read</span>(), w = <span class="built_in">read</span>();</span><br><span class="line">        g[u].push_back(mk(v, w));</span><br><span class="line">        g[v].push_back(mk(u, w));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ll x = <span class="built_in">read</span>();</span><br><span class="line">        v[x] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    dfs1(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; f[i] &lt;&lt; " " &lt;&lt; dis[i].first &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, f[i] - <span class="built_in">max</span>(up[i], dis[i].first));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一颗树 $n$ 个点，$n-1$ 条边，经过每条边都要花费一定的时间，任意两个点都是联通的。&lt;/p&gt;
&lt;p&gt;询问经过$k$个点最少需要走多少路程。&lt;br&gt;
    
    </summary>
    
    
    
      <category term="换根dp" scheme="http://yoursite.com/tags/%E6%8D%A2%E6%A0%B9dp/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round 668 (Div. 1)</title>
    <link href="http://yoursite.com/2020/09/09/CR668/"/>
    <id>http://yoursite.com/2020/09/09/CR668/</id>
    <published>2020-09-09T02:47:00.000Z</published>
    <updated>2020-09-10T02:28:52.636Z</updated>
    
    <content type="html"><![CDATA[<p>题解<br><a id="more"></a></p><h2 id="A-Balanced-Bitstring"><a href="#A-Balanced-Bitstring" class="headerlink" title="A.Balanced Bitstring"></a>A.Balanced Bitstring</h2><p>题意：安排$?$,使得$01$字符串,的所有$K$长的子串$NUM_0=NUM_1$</p><p>暴力安排所有$1+K,2+2K….$,$2+K,2+2K$…最后看一下 $[1,K]$是否可以满足情况即可</p><h2 id="B-Tree-Tag"><a href="#B-Tree-Tag" class="headerlink" title="B. Tree Tag"></a>B. Tree Tag</h2><p>题意：在一棵树上，$a,b$两个点，$a$最多可以走$da$步，$b$最多可以走$db$步。$a$先走,然后$b$再走，$b$不想被抓到，找到就输了。</p><p>考虑一条链的情况，如果$a$把$b$堵在角落，必须要$db&gt;2da$，反之</p><ul><li>如果第一次$a$能走到直径的中点，就可以覆盖所有点</li><li>$dis(a,b)\leq da$需要判断。</li></ul><h2 id="C-Fixed-Point-Removal"><a href="#C-Fixed-Point-Removal" class="headerlink" title="C. Fixed Point Removal"></a>C. Fixed Point Removal</h2><p>题意：询问区间$[L,R]$内，执行以下操作删除$a_i=i$，然后拼接继续删除$a_i=i$。问最多删除几次。</p><p>先让$a_i=i-a_i$</p><p>$F(l,r)\Rightarrow F(l,r+1)$  ,这是重点，显然需要判断$F(l,r)\leq a[i]$ 即可，显然我们发现$F[1,R],F[2,R]….F[R,R]$单调递减。就可以二分出需要更新的区间。 用线段树上二分，区间更新即可。</p><h2 id="D-Game-of-Pairs"><a href="#D-Game-of-Pairs" class="headerlink" title="D. Game of Pairs"></a>D. Game of Pairs</h2><p>题意：<br>先手选择$1.2.3….2n$的分成$n$对。<br>后手从每对里面挑出$1$个，如果能组成$2n$的倍数就胜利。</p><p>给定$n$，询问你选择先手还是后手，并且给出必胜策略。</p><p>$n$为偶数的时候先手必胜。</p><ul><li>我分成$n$堆偶数，$n$堆奇数，显然怎么挑都是奇数，不可能是$2n$的倍数。</li></ul><p>$n$为奇数的时候后手必胜。</p><ul><li>$\sum = 2n(n+1) \mod 2n=n$,如果存在$\sum =0 \mod 2n$，也一定存在$\sum =n \mod 2n$,那么我只需要找到$n$的倍数即可。$0….n-1$一定可以取到<br>我们其实是建了一张无向图。有$n$个节点，标号$0,1,…,n−1$。如果$(x,y)$配对，就在$x\mod n$和$y\mod n$之间连一条边。因为每个点度数都是$2$，所以整张图一定是若干个环。</li></ul><p>$\sum =n\times (n-1)/2$ 是$n$的倍数。</p><h2 id="E-Bricks"><a href="#E-Bricks" class="headerlink" title="E - Bricks"></a>E - Bricks</h2><p>题意:简单可见</p><p>假设一开始全部都是$1\times 1$的砖头去覆盖，那么就有$X$块（‘#’点的个数），要是相邻边合并x—，那么就是求在合法情况下最多能合并多少边。</p><p>这里可以把矩阵分成上边和右边，如果出现$L$行则表示不能合并某两个边，就是我如果合并，则另外一条垂直或者水平的边就不能合并。具体细节就是枚举4个$L$。这里就变成了最小点集合覆盖问题，显然垂直的边为一部分，水平一部分就变成了二分图。</p><p>答案就是总点数−（二分图中的点数−二分图最大匹配）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题解&lt;br&gt;
    
    </summary>
    
    
    
      <category term="训练记录" scheme="http://yoursite.com/tags/%E8%AE%AD%E7%BB%83%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>CF613D Kingdom and its Cities</title>
    <link href="http://yoursite.com/2020/09/01/CF613D/"/>
    <id>http://yoursite.com/2020/09/01/CF613D/</id>
    <published>2020-09-01T02:47:00.000Z</published>
    <updated>2020-09-12T04:06:00.130Z</updated>
    
    <content type="html"><![CDATA[<p>给定一棵树，每次询问$k_i$个点，询问最少需要截断多少个点，可以使得这些点两两联通。</p><a id="more"></a><p>$\sum k_i \leq 10^5$</p><p>显然是虚树，然后考虑如何$dp$。</p><p>首先特胖一下是否有相邻的两个点。</p><p>$f[x]$为以$x$为根的子树的答案.</p><p>$g[x]$为此时有没有关键点直连到 $x$ 的父亲，即把$x$去掉。</p><ul><li>如果$x$不是关键点，并且旗下关键点$&gt;1$,那么显然可以$f[x]=\sum dp[y]+1$，把自己去了并且$g[x]=0$</li><li>如果是关键点,子树里有顶部存在关键点去掉中间的点,$dp[x]=\sum (g[x] +dp[y])$,</li><li>如果$x$不是关键点，并且旗下关键点$g[x]=1$,无所谓，那么显然可以$f[x]=\sum dp[y]$，$g[x]=(g[x]=1)$</li></ul><details>  <summary>代码</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, F = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">            F = <span class="number">-1</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)</span><br><span class="line">        x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">    <span class="keyword">return</span> x * F;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Tree</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> st[N][<span class="number">22</span>], dfn[N], dep[N], tot, lg2[N];</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        st[++tot][<span class="number">0</span>] = x;</span><br><span class="line">        dep[x] = dep[fa] + <span class="number">1</span>;</span><br><span class="line">        dfn[x] = tot;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> to : G[x])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (to == fa)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            dfs(to, x);</span><br><span class="line">            st[++tot][<span class="number">0</span>] = x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lower</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (dep[u] &lt; dep[v]) ? u : v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Lca_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= tot; i++)</span><br><span class="line">            lg2[i] = lg2[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; l) &lt;= tot; l++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; l) - <span class="number">1</span> &lt;= tot; i++)</span><br><span class="line">                st[i][l] = lower(st[i][l - <span class="number">1</span>], st[i + (<span class="number">1</span> &lt;&lt; (l - <span class="number">1</span>))][l - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        u = dfn[u];</span><br><span class="line">        v = dfn[v];</span><br><span class="line">        <span class="keyword">if</span> (u &gt; v)</span><br><span class="line">            swap(u, v);</span><br><span class="line">        <span class="keyword">int</span> i = lg2[v - u + <span class="number">1</span>], w = (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">        <span class="keyword">return</span> lower(st[u][i], st[v - w + <span class="number">1</span>][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dis</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lc = lca(u, v);</span><br><span class="line">        <span class="keyword">return</span> dep[u] + dep[v] - <span class="number">2</span> * dep[lc];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;; <span class="comment">// namespace Tree</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Tree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> vis[N];</span><br><span class="line"><span class="keyword">int</span> b[N];</span><br><span class="line"><span class="keyword">namespace</span> XTree</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">int</span> F[N], G[N];</span><br><span class="line">    <span class="keyword">int</span> flag;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[N];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Tree::dfn[x] &lt; Tree::dfn[y];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> d = Tree::dis(u, v);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (vis[u] &amp;&amp; vis[v] &amp;&amp; d == <span class="number">1</span>)</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">        g[u].push_back(v);</span><br><span class="line">        g[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        flag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!s.empty())</span><br><span class="line"></span><br><span class="line">            s.pop();</span><br><span class="line">        sort(b + <span class="number">1</span>, b + <span class="number">1</span> + k, cmp);</span><br><span class="line"></span><br><span class="line">        s.push(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = b[i];</span><br><span class="line">            <span class="keyword">int</span> lca = Tree::lca(x, s.top());</span><br><span class="line">            <span class="keyword">while</span> (s.top() != lca)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = s.top();</span><br><span class="line">                s.pop();</span><br><span class="line">                <span class="keyword">if</span> (dfn[s.top()] &lt; dfn[lca])</span><br><span class="line">                    s.push(lca);</span><br><span class="line">                addEdge(s.top(), tmp);</span><br><span class="line">            &#125;</span><br><span class="line">            s.push(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (s.top() != <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            addEdge(s.top(), tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        F[x] = <span class="number">0</span>, G[x] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> to : g[x])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (to == fa)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            dfs(to, x);</span><br><span class="line">            F[x] += F[to];</span><br><span class="line">            G[x] += G[to];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!vis[x])</span><br><span class="line">            F[x] += (G[x] &gt; <span class="number">1</span>), G[x] = (G[x] == <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            F[x] += G[x], G[x] = <span class="number">1</span>;</span><br><span class="line">        g[x].<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (!flag)</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; F[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// namespace XTree</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="built_in">read</span>(), v = <span class="built_in">read</span>();</span><br><span class="line">        G[u].push_back(v);</span><br><span class="line">        G[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    Lca_init();</span><br><span class="line">    <span class="keyword">int</span> q = <span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> k = <span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = <span class="built_in">read</span>();</span><br><span class="line">            b[j] = x, vis[x] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        XTree::build(k);</span><br><span class="line">        XTree::solve();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; j++)</span><br><span class="line">            vis[b[j]] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一棵树，每次询问$k_i$个点，询问最少需要截断多少个点，可以使得这些点两两联通。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="虚树" scheme="http://yoursite.com/tags/%E8%99%9A%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>CF1106F Lunar New Year and a Recursive Sequence</title>
    <link href="http://yoursite.com/2020/08/31/CF1106F/"/>
    <id>http://yoursite.com/2020/08/31/CF1106F/</id>
    <published>2020-08-31T02:47:00.000Z</published>
    <updated>2020-09-12T05:50:31.849Z</updated>
    
    <content type="html"><![CDATA[<p>有一串$n(n\leqslant10^9)$个数的数列，给你$b_1\sim b_k$<br>$(k⩽100)$。当$i&gt;k$时：</p><script type="math/tex; mode=display">    f_i=(\prod f^{b_j}_{i-j}) \mod p</script><p>已知$f_1=f_2=\cdots=f_{k-1}=1,f_n=m$<br>，问最小的正整数$f_k$可能是多少<br><a id="more"></a></p><script type="math/tex; mode=display">    f_n=m=f_k^x \mod 998244353</script><p>$x$用个矩阵快速幂求出来就好了。</p><p><del>n次剩余</del>，其实把$f_k=g^y$,g表示原根即$3$.</p><p>$m=3^{xy} \mod 998244353$</p><p>$BSGS$求出$t=xy\mod (p-1)$</p><p>$exgcd$求出$y$即可</p><details>  <summary>代码</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;ll, ll&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="keyword">const</span> ll N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> ll M = <span class="number">1e2</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">exgcd</span><span class="params">(ll a, ll b, ll &amp;x, ll &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    ll gd = exgcd(b, a % b, y, x);</span><br><span class="line">    y -= a / b * x;</span><br><span class="line">    <span class="keyword">return</span> gd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a, ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b == <span class="number">0</span> ? a : gcd(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">inv</span><span class="params">(ll a, ll b)</span> <span class="comment">//逆元</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll x, y;</span><br><span class="line">    exgcd(a, b, x, y);</span><br><span class="line">    <span class="keyword">return</span> (x % b + b) % b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a, ll x, ll mo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &amp; <span class="number">1</span>)</span><br><span class="line">            res = <span class="number">1l</span>l * res * a % mo;</span><br><span class="line">        a = <span class="number">1l</span>l * a * a % mo;</span><br><span class="line">        x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ll a[M][M];</span><br><span class="line">    ll n, m;</span><br><span class="line">&#125; e;</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">mat_mul</span><span class="params">(Matrix x, Matrix y, ll P)</span> <span class="comment">//实现两个矩阵相乘，返回的还是一个矩阵。</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Matrix res; <span class="comment">//用来表示得到的新的矩阵；</span></span><br><span class="line">    <span class="built_in">memset</span>(res.a, <span class="number">0</span>, <span class="keyword">sizeof</span>(res.a));</span><br><span class="line">    res.n = x.n, res.m = y.m;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= res.n; i++)</span><br><span class="line">        <span class="keyword">for</span> (ll j = <span class="number">1</span>; j &lt;= res.m; j++)</span><br><span class="line">            <span class="keyword">for</span> (ll k = <span class="number">1</span>; k &lt;= x.m; k++)</span><br><span class="line">                res.a[i][j] = (res.a[i][j] + <span class="number">1l</span>l * x.a[i][k] * y.a[k][j] % P) % P;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">mqpow</span><span class="params">(Matrix x, ll y, ll P)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Matrix ans = e;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>)</span><br><span class="line">            ans = mat_mul(ans, x, P);</span><br><span class="line">        x = mat_mul(x, x, P);</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">BSGS</span><span class="params">(ll a, ll b, ll p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;ll, ll&gt; mp;</span><br><span class="line">    ll k = <span class="built_in">sqrt</span>(p) + <span class="number">1</span>;</span><br><span class="line">    ll tmp = b;</span><br><span class="line">    ll pa = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp = <span class="number">1l</span>l * tmp * a % p;</span><br><span class="line">        pa = <span class="number">1l</span>l * pa * a % p;</span><br><span class="line">        mp[tmp] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    ll now = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        now = <span class="number">1l</span>l * now * pa % p;</span><br><span class="line">        <span class="keyword">if</span> (mp[now])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> (i * k - mp[now] + <span class="number">2</span> * p) % p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll b[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll k, n, m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">        e.a[i][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    Matrix xx;</span><br><span class="line">    xx.n = xx.m = e.n = e.m = k;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">        xx.a[<span class="number">1</span>][i] = b[i] % (mod - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt; k; i++)</span><br><span class="line">        xx.a[i + <span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">    Matrix yy;</span><br><span class="line">    yy.n = k, yy.m = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">        yy.a[i][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    yy.a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//Matrix res = mqpow(xx, n - k, mod - 1);</span></span><br><span class="line"></span><br><span class="line">    ll res = mat_mul(mqpow(xx, n - k, mod - <span class="number">1</span>), yy, mod - <span class="number">1</span>).a[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        ll ans = BSGS(<span class="number">3</span>, m, mod);</span><br><span class="line">        <span class="keyword">if</span> (ans == <span class="number">-1</span>)</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (ans % gcd(mod - <span class="number">1</span>, res))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                ll x, y;</span><br><span class="line">                exgcd(res, mod - <span class="number">1</span>, x, y);</span><br><span class="line">                x = ((x % (mod - <span class="number">1</span>) + mod - <span class="number">1</span>) % (mod - <span class="number">1</span>)) * (ans / gcd(mod - <span class="number">1</span>, res)) % (mod - <span class="number">1</span>);</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; qpow(<span class="number">3</span>, x, mod) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有一串$n(n\leqslant10^9)$个数的数列，给你$b_1\sim b_k$&lt;br&gt;$(k⩽100)$。当$i&amp;gt;k$时：&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
    f_i=(\prod f^{b_j}_{i-j}) \mod p&lt;/script&gt;&lt;p&gt;已知$f_1=f_2=\cdots=f_{k-1}=1,f_n=m$&lt;br&gt;，问最小的正整数$f_k$可能是多少&lt;br&gt;
    
    </summary>
    
    
    
      <category term="BSGS" scheme="http://yoursite.com/tags/BSGS/"/>
    
  </entry>
  
  <entry>
    <title>CF1389G Directing Edges</title>
    <link href="http://yoursite.com/2020/08/27/CF1389G/"/>
    <id>http://yoursite.com/2020/08/27/CF1389G/</id>
    <published>2020-08-27T02:47:00.000Z</published>
    <updated>2020-09-14T03:30:58.030Z</updated>
    
    <content type="html"><![CDATA[<p>给出一张 $n$ 个点 $m$ 条边的无向图，有$k$ 个关键点。需要给所有无向边定向，如果第 $i$ 条边保留双向，要花费$w_i$的代价。我们称定向后的图上一个点是饱和的，当且仅当所有关键点都能到达它。此时这个点能够有 $c_i$<br>的收益。请对于每个$i = 1, 2, \ldots, n$ 回答，强制选择 $i$ 号点为饱和点时，收益减代价的最大值。</p><p>$n, m \le 3 \times 10 ^ 5$<br><a id="more"></a></p><p>如果出现了$双连通分量$，那么就可定向成强连通分量，就一定可以两两互通，就不需要考虑。</p><p>全部缩点之后，就变成了树。</p><p>考虑树上如果进行，并且显然这是个换根$dp$。</p><p>$dp[x]$表示以 $x$ 为根节点的子树里，保证 $x$ 是饱和的情况下最小的代价。</p><script type="math/tex; mode=display">dp[x]=\begin{cases}\sum dp[to]子树无关建点\\\sum max(0,dp[to]-w)子树有关建点\\\end{cases}</script><p>换根$dp$</p><script type="math/tex; mode=display">dp[to]=\begin{cases}\sum dp[x]子树无关建点\\\sum max(0,(dp[x]-max(0,dp[to]-w))-w)子树有关建点\\\end{cases}</script><p><details><br>  <summary>代码</summary></p><p>```c++</p><h1 id="include"><a href="#include" class="headerlink" title="include "></a>include <iostream></h1><h1 id="include-1"><a href="#include-1" class="headerlink" title="include "></a>include <cstdio></h1><h1 id="include-2"><a href="#include-2" class="headerlink" title="include "></a>include <algorithm></h1><h1 id="include-3"><a href="#include-3" class="headerlink" title="include "></a>include <queue></h1><h1 id="include-4"><a href="#include-4" class="headerlink" title="include "></a>include <cmath></h1><h1 id="include-5"><a href="#include-5" class="headerlink" title="include "></a>include <cstring></h1><h1 id="include-6"><a href="#include-6" class="headerlink" title="include "></a>include <vector></h1><h1 id="include-7"><a href="#include-7" class="headerlink" title="include "></a>include <map></h1><h1 id="include-8"><a href="#include-8" class="headerlink" title="include "></a>include <stack></h1><p>using namespace std;<br>typedef long long ll;</p><h1 id="define-pii-pair"><a href="#define-pii-pair" class="headerlink" title="define pii pair"></a>define pii pair<int, int></h1><h1 id="define-mk-make-pair"><a href="#define-mk-make-pair" class="headerlink" title="define mk make_pair"></a>define mk make_pair</h1><p>const int N = 1e6 + 10;<br>const int mod = 1e9 + 7;</p><p>int read()<br>{<br>    int x = 0, f = 1;<br>    char c = getchar();<br>    while (c &lt; ‘0’ || c &gt; ‘9’)<br>    {<br>        if (c == ‘-‘)<br>            f = -1;<br>        c = getchar();<br>    }<br>    while (c &gt;= ‘0’ &amp;&amp; c &lt;= ‘9’)<br>        x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + c - ‘0’, c = getchar();<br>    return x * f;<br>}</p><p>ll sp[N], c[N], w[N], flag[N];</p><p>namespace tarjan<br>{<br>    vector<int> g[N];<br>    int dfn[N], low[N], gcnt, ln, fa[N];<br>    stack<int> s;</p><pre><code>void tarjan(int x, int f){    dfn[x] = low[x] = ++gcnt;    s.push(x);    for (int i = 0; i &lt; g[x].size(); i++)    {        int to = g[x][i];        if (f == to)            continue;        if (!dfn[to])        {            tarjan(to, x);            low[x] = min(low[x], low[to]);        }        else            low[x] = min(low[x], dfn[to]);    }    if (dfn[x] == low[x])    {        ++ln;        while (1)        {            int cur = s.top();            s.pop();            fa[cur] = ln;            w[ln] += c[cur];            flag[ln] |= sp[cur];            if (cur == x)                break;        }    }}</code></pre><p>} // namespace tarjan</p><p>struct Edge<br>{<br>    int u, v;<br>    int w;<br>} e[N];</p><p>vector<pii> g[N];</p><p>ll dp[N];</p><p>void dfs1(int x, int fa)<br>{<br>    for (pii now : g[x])<br>    {<br>        int to = now.first;<br>        if (fa == to)<br>            continue;<br>        dfs1(to, x);<br>        flag[x] |= flag[to];<br>    }<br>}<br>void dfs2(int x, int fa)<br>{<br>    dp[x] = w[x];<br>    for (pii now : g[x])<br>    {<br>        int to = now.first;<br>        if (fa == to)<br>            continue;<br>        dfs2(to, x);<br>        if (flag[to] == 0)<br>            dp[x] += dp[to];<br>        else if (dp[to] - now.second &gt; 0)<br>            dp[x] += dp[to] - now.second;<br>    }<br>}</p><p>void dfs3(int x, int fa)<br>{</p><pre><code>for (pii now : g[x]){    int to = now.first, w = now.second;    if (fa == to)        continue;    if (flag[to] == 1)        dp[to] += max(0ll, dp[x] - max(0ll, dp[to] - w) - w);    else        dp[to] = dp[x];    dfs3(to, x);}</code></pre><p>}<br>int main()</p><p>{<br>    int n = read(), m = read(), k = read();<br>    for (int i = 1; i &lt;= k; i++)<br>    {<br>        int x = read();<br>        sp[x] = 1;<br>    }<br>    for (int i = 1; i &lt;= n; i++)<br>        c[i] = read();<br>    for (int i = 1; i &lt;= m; i++)<br>        e[i].w = read();<br>    for (int i = 1; i &lt;= m; i++)<br>    {<br>        e[i].u = read(), e[i].v = read();<br>        tarjan::g[e[i].u].push_back(e[i].v);<br>        tarjan::g[e[i].v].push_back(e[i].u);<br>    }<br>    tarjan::tarjan(1, 0);</p><pre><code>for (int i = 1; i &lt;= m; i++){    int u = tarjan::fa[e[i].u], v = tarjan::fa[e[i].v], w = e[i].w;    if (u != v)    {        g[u].push_back(mk(v, w));        g[v].push_back(mk(u, w));    }}int rt = 1;for (int i = 1; i &lt;= tarjan::ln; i++)    if (flag[i])        rt = i;dfs1(rt, 0);dfs2(rt, 0);dfs3(rt, 0);for (int i = 1; i &lt;= n; i++)    printf(&quot;%lld &quot;, dp[tarjan::fa[i]]);</code></pre><p>}</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给出一张 $n$ 个点 $m$ 条边的无向图，有$k$ 个关键点。需要给所有无向边定向，如果第 $i$ 条边保留双向，要花费$w_i$的代价。我们称定向后的图上一个点是饱和的，当且仅当所有关键点都能到达它。此时这个点能够有 $c_i$&lt;br&gt;的收益。请对于每个$i = 1, 2, \ldots, n$ 回答，强制选择 $i$ 号点为饱和点时，收益减代价的最大值。&lt;/p&gt;
&lt;p&gt;$n, m \le 3 \times 10 ^ 5$&lt;br&gt;
    
    </summary>
    
    
    
      <category term="图论" scheme="http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>1392G - Omkar and Pies</title>
    <link href="http://yoursite.com/2020/08/26/CF1392G/"/>
    <id>http://yoursite.com/2020/08/26/CF1392G/</id>
    <published>2020-08-26T02:47:00.000Z</published>
    <updated>2020-08-26T16:52:42.878Z</updated>
    
    <content type="html"><![CDATA[<p>给两个字符串$s$,$t$。选择某个区间$i\in[l,r],r+l-1\geq m,swap(s[a_i],s[b_i])$</p><p>$|s|=k\leq 20。l,r\leq n=10^6$</p><p>求操作完匹配度最高的匹配度以及操作区间。<br><a id="more"></a></p><p>考虑暴力枚举区间固定一个$l$，位运算求匹配度，$O(n^2k)$<br>如果选择$[1,x]$，我们可以轻松模拟出来。</p><p>误区</p><ul><li>一开始我想$[l+1,r]$即$s$操作$r$次，$t$操作$l$次，但是这是错的。</li></ul><p>根据固定一个端点的思路，考虑先把每个位置，映射成$2^i$。位置之间的对比就成了,$s的swap$，相当于$t每个映射需要比较i$的变化</p><ul><li>$dp[mask][1]$表示$t$的某个对应$s$的$p[i]$的状态的区间下标的最大值</li><li>$dp[mask][0]$表示$s$的某个对应$t$的$p[i]$的状态的区间下标的最小值</li></ul><!-- 所以对比$[l,r]$的时候$t$先映射到$p[r][i]$，即$2^{p[r][i]}(t[i]=1)$$s$先映射到$p[l-1][i]$，即$2^{p[l-][i]}(s[i]=1)$。这样就可以进行对比了。 --><p>打个比方$t$在$R$的时候$54321$，表示$t_1匹配5的位置$，但是$[L+1,R]区间的问题$，其实在$L$的时候$32145$,表示$s_1匹配3的位置,$,最终因为我俩交换=没交换，就可以把他们都映射到一个统一集合上。这样对比就可以找出共同的$1$可以有几个。</p><p>即$t[i]的位置$在$R$的时候，其实表示$s[i]\times 2^{p[r][i]}$</p><p>然后就是$SOSdp$套路下，找超集的最大和最小下标，枚举有多少个$1$匹配到了。</p><p><details><br>  <summary>代码</summary></p><p>```c++</p><h1 id="include"><a href="#include" class="headerlink" title="include "></a>include <cstdio></h1><h1 id="include-1"><a href="#include-1" class="headerlink" title="include "></a>include <algorithm></h1><h1 id="include-2"><a href="#include-2" class="headerlink" title="include "></a>include <queue></h1><h1 id="include-3"><a href="#include-3" class="headerlink" title="include "></a>include <cmath></h1><h1 id="include-4"><a href="#include-4" class="headerlink" title="include "></a>include <cstring></h1><h1 id="include-5"><a href="#include-5" class="headerlink" title="include "></a>include <vector></h1><h1 id="include-6"><a href="#include-6" class="headerlink" title="include "></a>include <map></h1><h1 id="include-7"><a href="#include-7" class="headerlink" title="include "></a>include <stack></h1><p>using namespace std;<br>typedef long long ll;</p><h1 id="define-pii-pair"><a href="#define-pii-pair" class="headerlink" title="define pii pair"></a>define pii pair<int, int></h1><h1 id="define-mk-make-pair"><a href="#define-mk-make-pair" class="headerlink" title="define mk make_pair"></a>define mk make_pair</h1><p>const int N = 2e6 + 10;<br>const int mod = 1e9 + 7;</p><p>int read()<br>{<br>    int x = 0, f = 1;<br>    char c = getchar();<br>    while (c &lt; ‘0’ || c &gt; ‘9’)<br>    {<br>        if (c == ‘-‘)<br>            f = -1;<br>        c = getchar();<br>    }<br>    while (c &gt;= ‘0’ &amp;&amp; c &lt;= ‘9’)<br>        x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + c - ‘0’, c = getchar();<br>    return x <em> f;<br>}<br>int p[N];<br>int calc(char </em>s)<br>{<br>    int len = strlen(s + 1);<br>    int res = 0;<br>    for (int i = 1; i &lt;= len; i++)<br>        if (s[i] == ‘1’)<br>            res |= 1 &lt;&lt; (p[i] - 1);<br>    return res;<br>}<br>int dp[N][2];<br>char s[N], t[N];<br>int main()<br>{<br>    int n = read(), m = read(), k = read();<br>    scanf(“%s”, t + 1);// t是主要变换的<br>    scanf(“%s”, s + 1);<br>    int st = 1 &lt;&lt; k;<br>    for (int i = 0; i &lt; st; i++)<br>    {<br>        dp[i][1] = -1e9;<br>        dp[i][0] = 1e9;<br>    }<br>    int cnt1 = 0, cnt2 = 0;<br>    for (int i = 0; i &lt; k; i++)<br>        p[i] = i;<br>    for (int i = 1; i &lt;= k; i++)<br>        cnt1 += (s[i] == ‘1’), cnt2 += (t[i] == ‘1’);<br>    dp[calc(t)][0] = 0;<br>    dp[calc(s)][1] = 0;<br>    for (int i = 1; i &lt;= n; i++)<br>    {<br>        int x = read(), y = read();<br>        swap(p[x - 1], p[y - 1]);<br>        dp[calc(s)][1] = max(dp[calc(s)][1], i);<br>        dp[calc(t)][0] = min(dp[calc(t)][0], i);<br>    }</p><pre><code>int ans = 0, la = 1, ra = n;for (int i = 0; i &lt; k; i++){    for (int j = 0; j &lt; st; j++)        if (j &amp; (1 &lt;&lt; i))        {            dp[j ^ (1 &lt;&lt; i)][1] = max(dp[j ^ (1 &lt;&lt; i)][1], dp[j][1]);            dp[j ^ (1 &lt;&lt; i)][0] = min(dp[j ^ (1 &lt;&lt; i)][0], dp[j][0]);        }}for (int j = st - 1; j &gt;= 0; j--){    int cnt = __builtin_popcount(j);    if (cnt1 &gt;= cnt &amp;&amp; cnt2 &gt;= cnt)    {        int res = k - (cnt1 + cnt2 - 2 * cnt);        if (dp[j][1] - dp[j][0] &gt;= m)        {            if (res &gt; ans)            {                ans = res;                la = dp[j][0] + 1;                ra = dp[j][1];            }        }    }}cout &lt;&lt; ans &lt;&lt; endl;cout &lt;&lt; la &lt;&lt; &quot; &quot; &lt;&lt; ra &lt;&lt; endl;</code></pre><p>}</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给两个字符串$s$,$t$。选择某个区间$i\in[l,r],r+l-1\geq m,swap(s[a_i],s[b_i])$&lt;/p&gt;
&lt;p&gt;$|s|=k\leq 20。l,r\leq n=10^6$&lt;/p&gt;
&lt;p&gt;求操作完匹配度最高的匹配度以及操作区间。&lt;br&gt;
    
    </summary>
    
    
    
      <category term="SOSDP" scheme="http://yoursite.com/tags/SOSDP/"/>
    
  </entry>
  
  <entry>
    <title>CF1394C Boboniu and String</title>
    <link href="http://yoursite.com/2020/08/19/CF1395F/"/>
    <id>http://yoursite.com/2020/08/19/CF1395F/</id>
    <published>2020-08-19T02:47:00.000Z</published>
    <updated>2020-08-19T14:24:02.353Z</updated>
    
    <content type="html"><![CDATA[<p>给定$n$个$B,N$组成字符串$s$.每次操作可以增减$N,B,NB$。<br>$dis(s,t)$表示从$s\rightarrow t$所需要的操作次数。（只需要$N，B$的字符数量相同即可）。</p><p>求$min \sum \max dis(t,s_i)$<br><a id="more"></a></p><p>第一次做到关于线性规划的题。</p><p>坑定是二分答案。考虑经过至少$k$次之后是否达到所需的状态。</p><p>放在平面几何上就是有没有交点。观察其有6条边，即有6个约束情况</p><script type="math/tex; mode=display">\begin{cases}    x_0-k\leq x \leq x_0+ k\\    y_0-k\leq y \leq y_0+ k\\    x_0-y_0-k\leq x -y\leq x_0-y_0+ k\\\end{cases}</script><p>然后暴力合并判断一下，然后枚举特殊点即可。</p><ul><li>需要注意的是 $x-y$的最小值边界与$x，y$的最小值边界不相同</li><li>不能出现空串，就尽量拿$x-y$大的一边。</li></ul><p><details><br>  <summary>代码</summary></p><p>```c++</p><h1 id="include"><a href="#include" class="headerlink" title="include "></a>include <iostream></h1><h1 id="include-1"><a href="#include-1" class="headerlink" title="include "></a>include <cstdio></h1><h1 id="include-2"><a href="#include-2" class="headerlink" title="include "></a>include <algorithm></h1><h1 id="include-3"><a href="#include-3" class="headerlink" title="include "></a>include <queue></h1><h1 id="include-4"><a href="#include-4" class="headerlink" title="include "></a>include <cmath></h1><h1 id="include-5"><a href="#include-5" class="headerlink" title="include "></a>include <cstring></h1><h1 id="include-6"><a href="#include-6" class="headerlink" title="include "></a>include <vector></h1><h1 id="include-7"><a href="#include-7" class="headerlink" title="include "></a>include <map></h1><h1 id="include-8"><a href="#include-8" class="headerlink" title="include "></a>include <stack></h1><p>using namespace std;<br>typedef long long ll;</p><h1 id="define-pii-pair"><a href="#define-pii-pair" class="headerlink" title="define pii pair"></a>define pii pair<int, int></h1><h1 id="define-mk-make-pair"><a href="#define-mk-make-pair" class="headerlink" title="define mk make_pair"></a>define mk make_pair</h1><p>const int N = 1e6 + 10;<br>const int mod = 1e9 + 7;</p><p>int read()<br>{<br>    int x = 0, f = 1;<br>    char c = getchar();<br>    while (c &lt; ‘0’ || c &gt; ‘9’)<br>    {<br>        if (c == ‘-‘)<br>            f = -1;<br>        c = getchar();<br>    }<br>    while (c &gt;= ‘0’ &amp;&amp; c &lt;= ‘9’)<br>        x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + c - ‘0’, c = getchar();<br>    return x * f;<br>}</p><p>struct node<br>{<br>    int l, r;<br>};<br>node p[N];</p><p>node c[3];<br>int n, ansx, ansy;<br>bool check(int v)<br>{<br>    for (int t = 0; t &lt; 3; t++)<br>        c[t].l = -1e9, c[t].r = 1e9;<br>    c[1].l = c[0].l = 0;<br>    for (int i = 1; i &lt;= n; i++)<br>    {<br>        int x = p[i].l, y = p[i].r;<br>        c[0].l = max(c[0].l, x - v);<br>        c[0].r = min(c[0].r, x + v);</p><pre><code>    c[1].l = max(c[1].l, y - v);    c[1].r = min(c[1].r, y + v);    c[2].l = max(c[2].l, x - y - v);    c[2].r = min(c[2].r, x - y + v);}for (int t = 0; t &lt; 3; t++)    if (c[t].r &lt; c[t].l)        return 0;int l = c[0].l - c[1].r;int r = c[0].r - c[1].l;if (max(c[2].l, l) &lt;= min(c[2].r, r)){    int k = max(c[2].l, l);    int ls = max(c[0].l, c[1].l + k), rs = min(c[0].r, c[1].r + k);    if (ls &lt;= rs)    {        ansx = rs;        ansy = rs - k;    }    return 1;}else    return 0;</code></pre><p>}<br>char s[N];<br>int main()<br>{<br>    n = read();<br>    for (int i = 1; i &lt;= n; i++)<br>    {<br>        scanf(“%s”, s);<br>        int len = strlen(s);<br>        for (int j = 0; j &lt; len; j++)<br>        {<br>            if (s[j] == ‘B’)<br>                p[i].l++;<br>            else<br>                p[i].r++;<br>        }<br>    }<br>    int l = 0, r = 1e6, ans = r;<br>    while (l &lt;= r)<br>    {<br>        int mid = (l + r) &gt;&gt; 1;<br>        if (check(mid))<br>        {<br>            ans = mid;<br>            r = mid - 1;<br>        }<br>        else<br>            l = mid + 1;<br>    }<br>    cout &lt;&lt; ans &lt;&lt; endl;<br>    cout &lt;&lt; string(ansx, ‘B’) + string(ansy, ‘N’) &lt;&lt; endl;<br>}</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定$n$个$B,N$组成字符串$s$.每次操作可以增减$N,B,NB$。&lt;br&gt;$dis(s,t)$表示从$s\rightarrow t$所需要的操作次数。（只需要$N，B$的字符数量相同即可）。&lt;/p&gt;
&lt;p&gt;求$min \sum \max dis(t,s_i)$&lt;br&gt;
    
    </summary>
    
    
    
      <category term="线性规划" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
</feed>
